From 9ca7e455ce02c8f6cf887e2f059d1dcea3754226 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Tue, 24 Mar 2020 20:37:29 +0000
Subject: [add] hackerrank, 'luck balance', rust port

---
 .../luck.balance.rs                           | 80 ++++++++++++++++++-
 1 file changed, 79 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.greedy.-.easy.-.luck.balance/luck.balance.rs b/hackerrank/algorithms.-.greedy.-.easy.-.luck.balance/luck.balance.rs
index 75b9783..3e06b65 100644
--- a/hackerrank/algorithms.-.greedy.-.easy.-.luck.balance/luck.balance.rs
+++ b/hackerrank/algorithms.-.greedy.-.easy.-.luck.balance/luck.balance.rs
@@ -1,3 +1,81 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
+use std::cmp::Ordering;
+use std::cmp::max;
 
+fn luck_balance(k: i32, contests: &Vec<Vec<i32>>) -> i32 {
+    let mut important: std::vec::Vec<i32> = Vec::new();
+    let mut unimportant: Vec<i32> = vec!();
+    let mut l: i32;
+    let mut t: i32;
+    for contest in contests {
+        l = contest[0];
+        t = contest[1];
+        if t == 1 {
+            important.push(l);
+        } else {
+            unimportant.push(l);
+        }
+    }
+    fn order(l1: &i32, l2: &i32) -> Ordering {
+        if l1 == l2 {
+            return Ordering::Equal;
+        } else if l1 < l2 {
+            return Ordering::Less;
+        } else {
+            return Ordering::Greater;
+        }
+    }
+    important.sort_by(&order);
+    let l_important = important.len() as i32;
+    unimportant.sort_by(&order);
+    //let l_unimportant = unimportant.len() as i32;
+
+    //println!("k: {:?}, important [{:?}]: {:?}, unimportant[{:?}]: {:?}", k, l_important, important, l_unimportant, unimportant);
+
+    return -1 * (important[(0 as usize)..(max(0, l_important - k) as usize)]).iter().sum::<i32>() +
+           important[(max(0, l_important - k) as usize)..].iter().sum::<i32>() + unimportant.iter().sum::<i32>();
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_end_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    let mut data: Vec<Vec<i32>> = vec!();
+    let mut data2: Vec<i32>;
+    let k: i32;
+    next_line(&mut line);  // ignore count
+    data2 = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    k = data2[1];
+    next_line(&mut line);
+    while line != "" {
+        data2 = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+        data.push(data2.clone());
+        next_line(&mut line);
+    }
+    let res = luck_balance(k, &data);
+    f.write_all(res.to_string().as_bytes()).expect("file io error");
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.26.0


From 814b89dde0bac6155e8aa46c08a252f3305c4cb2 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 2 Jan 2020 20:16:09 +0000
Subject: [add] hackerrank, 'the grid search', c++ port

---
 .../the.grid.search.cpp                       | 42 ++++++++++++++++++-
 1 file changed, 40 insertions(+), 2 deletions(-)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.the.grid.search/the.grid.search.cpp b/hackerrank/algorithms.-.implementation.-.medium.-.the.grid.search/the.grid.search.cpp
index 4d33b75..d6203b8 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.the.grid.search/the.grid.search.cpp
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.the.grid.search/the.grid.search.cpp
@@ -6,8 +6,46 @@ vector<string> split_string(string);
 
 // Complete the gridSearch function below.
 string gridSearch(vector<string> G, vector<string> P) {
-
-
+    auto fnMatch = [](vector<string>& G, vector<string>& P, int* pt, int* dim) -> bool {
+        auto cidx = pt[1];
+        auto cidx2 = pt[1] + dim[1] - 1 + 1;
+        auto l = 0;
+        while (l < dim[0]) {
+            //cout << "testing P[" << l << "]: " << P[l] << " vs G[" << pt[0] + l << ":" << cidx \
+            //     << "-" << cidx2 <<  "]: " << G[pt[0] + l].substr(cidx, cidx2 - cidx) << endl;
+            if (G[pt[0] + l].substr(cidx, cidx2 - cidx) != P[l])
+                return false;
+            l++;
+        }
+        //cout << "match at point: [" << pt[0] << ", " << pt[1] << "]" <<  endl;
+        return true;
+    };
+
+    int l_G[2] = {(int)G.size(), (int)G[0].size()};
+    int l_P[2] = {(int)P.size(), (int)P[0].size()};
+    //cout << "dim G: [" << l_G[0] << ", " << l_G[1] << "], " \
+    //     << "dim P: [" << l_P[0] << ", " << l_P[1] << "]" << endl;
+    string* s;
+    int cidx;
+    int pt[2];
+    auto ridx = 0;
+    auto ridx_max = l_G[0] - l_P[0] + 1;
+    while (ridx < ridx_max) {
+        s = &G[ridx];
+        cidx = s->find(P[0]);
+        pt[0] = ridx;
+        while (cidx != string::npos) {
+            //cout << "matched substring P[0]: '" << P[0] << "' at point: [" << ridx << "," << cidx << "]" << endl;
+            pt[1] = cidx;
+            if (fnMatch(G, P, pt, l_P)) {
+                return "YES";
+            }
+            //cout << "cidx: " << cidx << ", searching s[" << *s << "] substring: " << s->substr(cidx) << endl;
+            cidx = s->find(P[0], cidx + 1);
+        }
+        ridx++;
+    }
+    return "NO";
 }
 
 int main()
-- 
2.24.1


From f9c7dbeb630d7edf98665454d7da45a8c94adb39 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 12 Jul 2019 14:22:08 +0100
Subject: [add] hackerrank, 'larry's array', python port

---
 .../larry's.array.py                          | 84 +++++++++++++++++++
 1 file changed, 84 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.py b/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.py
index 9ee2a72..a85b77e 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.py
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.py
@@ -8,6 +8,90 @@ import sys
 
 # Complete the larrysArray function below.
 def larrysArray(A):
+    """
+
+    boils down to length and whether the final necessary rotation is possible
+
+    0 rotations  -> c b a
+    1 rotation   c b a -> b a c
+    2 rotations  b a c -> a c b ..impossible
+
+    ..hence you're just moving the first item through the array with no affect on the other two
+    ..up until the last 3
+
+    0 rotations  -> e d c b a
+    x rotations  -> a b c e d ..impossible
+
+    what is the affect of x moving to the front?
+
+    it can jump -2 with no affect
+    if there's only one space left, jump 1, switch -1 and +1 and jump -1
+
+    implementation
+    how to pull each x out of array A_n
+
+    consider the lead 3 idxs a special 'next' subset, keep populated until only 3 remain, then deduce
+
+    """
+
+    #print(f"\n\ninit: {A}")
+    As = sorted(A)
+    #print(f"sort: {As}")
+    n = len(A)
+    idx = -1
+    idx_sparse = -1
+    l_tmp = -1
+    l = -1
+    target = -1
+    for l_s in range(0, n):
+        target = As[l_s]
+        # get idx in 'sparse array'
+        idx = 0
+        idx_sparse = 0
+        while True:
+            if A[idx_sparse] == target:
+                break
+            elif A[idx_sparse] > 0:
+                idx += 1
+            idx_sparse += 1
+
+        #print(f"target: {target}, found at idx: {idx}")
+        # effect of removal on special lead rotation
+        if idx < 3:
+            if idx == 0:
+                A[0] = A[1]
+                A[1] = A[2]
+            elif idx == 1:
+                l_tmp = A[0]
+                A[0] = A[2]
+                A[1] = l_tmp
+
+            A[2] = -1
+            # re-populate next[2]?
+            set_ = False
+            for l in range(3, n):
+                #print(f"searching: idx {l} = {A[l]}")
+                if A[l] > 0:
+                    A[2] = A[l]
+                    A[l] = -1
+                    set_ = True
+                    break
+            #print(f"step: {A}")
+            if not set_:
+                # decide!
+                res = "YES" if A[0] < A[1] else "NO"
+                #print(f"res: {res}")
+                return res
+        else:
+            if idx % 2 == 1:
+                # switch -1 and +1 idxs
+                l_tmp = A[0]
+                A[0] = A[1]
+                A[1] = l_tmp
+
+            A[idx_sparse] = -1
+            #print(f"step: {A}")
+
 
 if __name__ == '__main__':
     fptr = open(os.environ['OUTPUT_PATH'], 'w')
-- 
2.23.0


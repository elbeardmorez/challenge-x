From 0899c339e1ddd7a5be42b96c62adb1ac1660c526 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 13 Jun 2019 08:12:51 +0100
Subject: [add] hackerrank, 'separate the numbers', c# port

---
 .../separate.the.numbers.cs                   | 92 ++++++++++++++++++-
 1 file changed, 91 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.strings.-.easy.-.separate.the.numbers/separate.the.numbers.cs b/hackerrank/algorithms.-.strings.-.easy.-.separate.the.numbers/separate.the.numbers.cs
index 13d59e8..9fd7f81 100644
--- a/hackerrank/algorithms.-.strings.-.easy.-.separate.the.numbers/separate.the.numbers.cs
+++ b/hackerrank/algorithms.-.strings.-.easy.-.separate.the.numbers/separate.the.numbers.cs
@@ -12,12 +12,102 @@ using System.Text.RegularExpressions;
 using System.Text;
 using System;
 
+using static System.Console;
+
 class Solution {
 
+    static string add_(string s1, string s2) {
+        string res = "";
+        int l_s1 = s1.Length;
+        int l_s2 = s2.Length;
+        if (l_s2 > l_s1) {
+            string s1_ = s2;
+            s2 = s1;
+            s1 = s1_;
+            int l_s1_ = l_s2;
+            l_s2 = l_s1;
+            l_s1 = l_s1_;
+        }
+        int carry = 0;
+        int idx = 0;
+        int i1 = 0;
+        int i2 = 0;
+        string sum;
+        //WriteLine($"adding s1: {s1}, s2: {s2}, l_s1: {l_s1}, l_s2: {l_s2}");
+        while (idx < l_s1) {
+            i1 = Convert.ToInt32(s1.Substring(l_s1 - idx - 1, 1));
+            i2 = 0;
+            if (idx < l_s2)
+                i2 = Convert.ToInt32(s2.Substring(l_s2 - idx - 1, 1));
+            //WriteLine($"adding i1: {i1}, i2: {i2}");
+            sum = (i1 + i2 + carry).ToString();
+            if (sum.Length == 1) {
+                carry = 0;
+                res = sum + res;
+            } else {
+                res = sum.Substring(sum.Length - 1) + res;
+                carry = Convert.ToInt32(sum.Substring(0, sum.Length -1));
+            }
+            idx++;
+        }
+        if (carry != 0)
+            res = carry.ToString() + res;
+        return res;
+    }
+
     // Complete the separateNumbers function below.
     static void separateNumbers(string s) {
+        // add numbers as strings
+        int state = 0;
+        string min_ = "";
+        int l_s = s.Length;
+        if (s.Substring(0, 1) != "0" && l_s > 1) {
+            int l_ss1 = 0;
+            var sss = new List<string>();
+            string ss;
+            while (true) {
+                l_ss1++; // length of initial number
+                if (l_ss1 > l_s) {
+                    // no further attempts possible
+                    state = -1;
+                    break;
+                }
+                sss.Clear();
+                ss = s.Substring(0, l_ss1);
+                sss.Add(ss);
+                //WriteLine($"l_ss1: {l_ss1}, considering: {String.Join(" ", sss.Select(x => x.ToString()))}");
+                int l = ss.Length;
+                while (true) {
+                    if (l == l_s) {
+                        if (sss.Count > 1) {
+                            state = 1;
+                            min_ = sss[0];
+                        } else
+                            state = -1;
+                        break;
+                    }
+                    //WriteLine($"pre ss: {ss}");
+                    ss = add_(ss, "1");
+                    //WriteLine($"post ss: {ss}");
+                    if (l + ss.Length > l_s) {
+                        //WriteLine($"{l + ss.Length} > {l_s}");
+                        break;  // no further numbers possible
+                    }
+                    // next is possible
+                    if (s.Substring(l, ss.Length) != ss) {
+                        //WriteLine($"l: {l}, ss: {ss}, {s.Substring(l, ss.Length)} != {ss}");
+                        break;  // invalid, non-contiguous
+                    }
+                    sss.Add(ss);
+                    l += ss.Length;
+                    //WriteLine($"considering: {String.Join(" ", sss.Select(x => x.ToString()))}");
+                }
+                if (state != 0)
+                    break;
+            }
+        }
 
-
+        WriteLine($"{state == 1 ? "YES " + min_ : "NO"}");
     }
 
     static void Main(string[] args) {
-- 
2.23.0


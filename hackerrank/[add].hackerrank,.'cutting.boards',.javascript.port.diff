From 07da7420aceca1d56622e5aa598fe733ec0ffeac Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Mon, 23 Sep 2019 07:22:45 +0100
Subject: [add] hackerrank, 'cutting boards', javascript port

---
 .../cutting.boards.js                         | 85 +++++++++++++++++++
 1 file changed, 85 insertions(+)

diff --git a/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.js b/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.js
index 84c5a53..c4506ed 100644
--- a/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.js
+++ b/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.js
@@ -26,8 +26,93 @@ function readLine() {
 
 // Complete the boardCutting function below.
 function boardCutting(cost_y, cost_x) {
+    /*
+    xxxx
+    xxxx
 
+    cutting horizontally yields 3 x cuts x1,x2,x3 to get 4 2x1 pieces, then 4 y1 cuts ..7 cuts total
+    or.. 1 y1 cut and 6 x cuts 2 x1, 2 x2, 2 x3 ..7 cuts total
 
+    xxxx
+    xxxx
+    xxxx
+
+    x1,x2,x3 ..4 y1,y2 ..11 cuts
+
+    w x h - 1 cuts total
+    optimise cutting most expensive first
+
+    maintain piece count per column / row
+    e.g 3x2
+      [111]                 [1 11]                 [1 1 1]                 [2 2 2]
+    [1]xxx  -> x1 cut ->  [2]x xx  -> x2 cut ->  [3]x x x  -> y1 cut -> [3] x x x
+    [1]xxx                [2]x xx                [3]x x x
+                                                                        [3] x x x
+      [1111]                 [2222]                [222 2]
+    [1]xxxx                [1]xxxx               [2]xxx x
+    [1]xxxx  -> y1 cut ->  [1]xxxx  -> x3 cut -> [2]xxx x
+    [1]xxxx
+                           [1]xxxx               [2]xxx x
+
+    so we just have horizontal and vertical segments to track per cut
+
+    chose cut plain based on max(cost_x_i, cost_y_i)
+    */
+
+    let l_x = cost_x.length;
+    let l_y = cost_y.length;
+
+    let x_idx_sorted = [];
+    for (let l = 0; l < l_x; l++) {
+        x_idx_sorted.push([cost_x[l], l]);
+    }
+    //console.log("x_idx_sorted: %j", x_idx_sorted);
+    x_idx_sorted.sort((x1, x2) => { return parseInt(x1[0]) === parseInt(x2[0]) ? 0 : ( parseInt(x1[0]) < parseInt(x2[0]) ? -1 : 1 )});
+    //console.log("x_idx_sorted: %j", x_idx_sorted);
+
+    let y_idx_sorted = [];
+    for (let l = 0; l < l_y; l++) {
+        y_idx_sorted.push([cost_y[l], l]);
+    }
+    //console.log("y_idx_sorted: %j", y_idx_sorted);
+    y_idx_sorted.sort((y1, y2) => { return parseInt(y1[0]) === parseInt(y2[0]) ? 0 : ( parseInt(y1[0]) < parseInt(y2[0]) ? -1 : 1 )});
+    //console.log("y_idx_sorted: %j", y_idx_sorted);
+
+    let cost = 0;
+    let l1 = l_x - 1;
+    let l2 = l_y - 1;
+    let x_segments = 1;
+    let y_segments = 1;
+
+    let mod_v = 10 ** 9 + 7;
+    while (l1 + l2 > -2) {
+        //console.log(`l1: ${l1}, l2: ${l2}`);
+        while ((l2 === -1 && l1 > -1) ||
+              (l1 > -1 && x_idx_sorted[l1][0] >=
+               y_idx_sorted[l2][0])) {
+            //console.log(`cutting along x${x_idx_sorted[l1][1]} @ cost: ${x_idx_sorted[l1][0]} x ${y_segments}`);
+            cost = (cost + x_idx_sorted[l1][0] * y_segments) % mod_v;
+            x_segments += 1;
+            l1 -= 1;
+            if (l1 === -1)
+                break;
+            //console.log(`l1: ${l1}, l2: ${l2}`);
+        }
+
+        while ((l1 === -1 && l2 > -1) ||
+              (l2 > -1 && y_idx_sorted[l2][0] >=
+                           x_idx_sorted[l1][0])) {
+            //console.log(`cutting along y${y_idx_sorted[l2][1]} @ cost: ${y_idx_sorted[l2][0]} x ${x_segments}`);
+            cost = (cost + y_idx_sorted[l2][0] * x_segments) % mod_v;
+            y_segments += 1;
+            l2 -= 1;
+            if (l2 === -1)
+                break;
+            //console.log(`l1: ${l1}, l2: ${l2}`);
+        }
+    }
+
+    return parseInt(cost);
 }
 
 function main() {
-- 
2.23.0


From ba29c4692640f949b3ee74013fa80bc7ad7a5204 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 9 Aug 2019 06:54:21 +0100
Subject: [add] hackerrank, 'bonetrousle', c++ port

---
 .../bonetrousle.cpp                           | 83 +++++++++++++++++++
 1 file changed, 83 insertions(+)

diff --git a/hackerrank/algorithms.-.constructive.algorithms.-.medium.-.bonetrousle/bonetrousle.cpp b/hackerrank/algorithms.-.constructive.algorithms.-.medium.-.bonetrousle/bonetrousle.cpp
index 5397ddd..3065b10 100644
--- a/hackerrank/algorithms.-.constructive.algorithms.-.medium.-.bonetrousle/bonetrousle.cpp
+++ b/hackerrank/algorithms.-.constructive.algorithms.-.medium.-.bonetrousle/bonetrousle.cpp
@@ -11,7 +11,90 @@ vector<long> bonetrousle(long n, long k, int b) {
     /*
      * Write your code here.
      */
+    /*
+    nothing in the question states that each trip is dependent upon the last
+    e.g. the stock is replenished each time
+
+    sum b values to get n ..in ? ways when 1 <= b <= k
+
+    always possible if sum of all numbers up to b <= n and..
+    n is reachable in b numbers.. so accumulate backwards to check
+
+    take lower b - x numbers x >= 0
+    sum
+    then shift b - xth number as far right along the set of possible numbers
+    either as far as is needed to acheive the sum, else at the range limit
+    repeat if necessary
+
+    e.g. b = 4, n = 26
+
+    1 2 3 4  ....    [10]  s = 10
+    1 2 3 ....        10   s = 16
+    1 2 ....        9 10   s = 22
+    1 ....  5 ....  9 10   s = 28
+
+    ..or more simple, (long)(n / b) as starting point and then shuffle extents
+
+    10^18 max n int64 safe
+    */
+
+    if (b > n || b > k)
+        return vector<long>({-1});
+
+    auto mid_boxes = (long)(b / 2);
+    auto med_sum = b % 2 == 1 ? (long)(n / b) : (long)(n / b) + 1;
+    //cout << "target: " << n << ", max: " << k << ", boxes: " << b << ", mid boxes " << mid_boxes << ", median sum: " << med_sum << endl;
+    vector<long> numbers;
+    for (long l = med_sum - mid_boxes; l < med_sum - mid_boxes + b; l++)
+        numbers.push_back(l);
+
+    long n_ = 0;
+    n_ = accumulate(numbers.begin(), numbers.end(), n_);
+    long diff = 0;
+    if (n_ > n) {
+        //cout << "numbers:"; for (auto itr = numbers.begin(); itr != numbers.end(); ++itr) cout << " " << *itr; cout << " need shift(s)" << endl;
+        auto idx = 0;
+        long min_ = 0;
+        while (n_ != n) {
+            // shift;
+            //cout << "considering min of " << n_ - n << "  and " << numbers[idx] - (min_ + 1) << endl;
+            diff = min(n_ - n, numbers[idx] - (min_ + 1));
+            //cout << "too big, substracting diff: " << diff << " from idx: " << idx << ", so " << numbers[idx] << " -> " << numbers[idx] - diff << endl;
+            numbers[idx] -= diff;
+            n_ -= diff;
+            min_ = numbers[idx];
+            idx += 1;
+            if (idx > b - 1)
+                 break;
+        }
+    } else if (n_ < n) {
+        auto idx = b - 1;
+        auto max_ = k + 1;
+        //cout << "numbers:"; for (auto itr = numbers.begin(); itr != numbers.end(); ++itr) cout << " " << *itr; cout << " need shift(s)" << endl;
+        while (n_ != n) {
+            // shift;
+            //cout << "considering min of " << n - n_ << "  and " << (max_ - 1) - numbers[idx] << endl;
+            diff = min(n - n_, (max_ - 1) - numbers[idx]);
+            //cout << "too small, adding diff: " << diff << " to idx: " << idx << ", so " << numbers[idx] << " -> " << numbers[idx] + diff << endl;
+            numbers[idx] += diff;
+            n_ += diff;
+            max_ = numbers[idx];
+            idx -= 1;
+            if (idx < 0)
+                 break;
+        }
+    }
+
+    n_ = 0;
+    n_ = accumulate(numbers.begin(), numbers.end(), n_);
+    //cout << "sum: " << n_ << " vs " << n << ", proposing numbers: "; for (auto itr = numbers.begin(); itr != numbers.end(); ++itr) cout << " " << *itr; cout << endl;
+
+    if (n_ != n || numbers[0] < 1 || numbers[numbers.size() - 1] > k) {
+        //cout << "incompatible stock!" << endl;
+        return vector<long>({-1});
+    }
 
+    return numbers;
 }
 
 int main()
-- 
2.23.0


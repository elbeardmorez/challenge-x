From 8d2fc2ed1f8eadd5c90609c7bc2f7e5a8f8367a8 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 20 Nov 2019 23:22:32 +0000
Subject: [add] hackerrank, 'flatland space stations', rust port

---
 .../flatland.space.stations.rs                | 75 +++++++++++++++++++
 1 file changed, 75 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.flatland.space.stations/flatland.space.stations.rs b/hackerrank/algorithms.-.implementation.-.easy.-.flatland.space.stations/flatland.space.stations.rs
index 9219c31..46eff35 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.flatland.space.stations/flatland.space.stations.rs
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.flatland.space.stations/flatland.space.stations.rs
@@ -1,2 +1,77 @@
 // Enter your code here 
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
+
+fn flatland_space_stations(n: &i32, c: &mut Vec<i32>) -> i32 {
+    // edge
+    c.sort();
+    //println!("n: {:?}, c: {:?}", n, c);
+    let mut max_: i32  = (n - 1) - c[c.len() - 1];
+    if c[0] > max_ {
+        max_ = c[0];
+    }
+    // distances
+    let mut last = c[0];
+    let mut dist: i32;
+    let mut diff: i32;
+    let mut s: i32;
+    for l in 0..(c.len()) {
+        s = c[l] - 2;
+        diff = s - last;
+        if diff % 2 == 0 {
+            dist = diff / 2;
+        } else {
+            dist = (diff - 1) / 2;
+        }
+        //println!("diff: {}, dist: {}", diff, dist);
+        if dist > max_ {
+            max_ = dist;
+        }
+        last = s;
+    }
+    return max_;
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_right_matches('\n'));
+    }
+}
+
+fn main() {
+
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::from("-");
+    let mut data: Vec<i32>;
+
+    while line.len() > 0 {
+        next_line(&mut line);
+
+        data = line.split(' ').map(|s| s.parse::<i32>().unwrap()).collect();
+        let n = data[0];
+
+        next_line(&mut line);
+        data = line.split(' ').map(|s| s.parse::<i32>().unwrap()).collect();
+
+        let res: i32 = flatland_space_stations(&n, &mut data);
+        let _ = f.write_all(res.to_string().as_bytes());
+        next_line(&mut line);
+    }
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.23.0


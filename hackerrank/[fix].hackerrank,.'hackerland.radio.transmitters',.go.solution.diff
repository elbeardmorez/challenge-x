From d38251b0a19caf3a5fb9b8ada90f940745a79b04 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 26 Feb 2020 19:49:32 +0000
Subject: [fix] hackerrank, 'hackerland radio transmitters', go solution

-redux algorithm, account for non-contiguous ranges and multiple
houses occupying the same position
---
 .../hackerland.radio.transmitters.go          | 54 +++++++++++++++----
 1 file changed, 45 insertions(+), 9 deletions(-)

diff --git a/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.go b/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.go
index 681ceb1..b4954a1 100644
--- a/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.go
+++ b/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.go
@@ -12,20 +12,53 @@ import (
 
 // Complete the hackerlandRadioTransmitters function below.
 func hackerlandRadioTransmitters(x []int32, k int32) int32 {
+
+    /*
+    x       x x                 x
+    ?       O c
+
+    account for non-contiguous ranges
+    */
+
     sort.Slice(x, func(i1, i2 int) bool { return x[i1] < x[i2] })
+    map_ := make(map[int32]int32, 0)
+
     count := int32(0)
-    last_antenna := x[0] - k
-    last_house := int32(0)
+    left_house := x[0]
+    last_house := int32(-1)
+    last_antenna := int32(-1)
+
     var attach int32
     for _, v := range(x) {
-        //fmt.Printf("house @: %v, last antenna @: %v, range: %v\n", v, last_antenna, k)
+        if _, ok := map_[v]; ok {
+            continue
+        }
+        map_[v] = 1
+
+        //fmt.Printf("house @: %v, left_house @: %v, last antenna @: %v, range: %v, count: %v\n", v, left_house, last_antenna, k, count)
         attach = -1
-        if v > last_antenna + 2 * k {
-            //fmt.Printf("setting transmitter on last house: %v\n", last_house)
-            attach = last_house
-        } else if v == last_antenna + 2 * k {
-            //fmt.Printf("setting transmitter on current house: %v\n", v)
-            attach = v
+        if left_house == -1 {
+            // first house in next antenna range
+            left_house = v
+        } else if last_antenna == -1 {
+            // we're gone out of range of the last antenna
+            if v - left_house > k {
+                //fmt.Printf("setting transmitter on last house: %v\n", last_house)
+                attach = last_house
+            } else if v - left_house == k {
+                //fmt.Printf("setting transmitter on current house: %v\n", v)
+                attach = v
+            }
+        } else {
+            // antenna set, are we still in range?
+            if v - last_antenna > k {
+                left_house = v
+                last_antenna = -1
+            } else if v - last_antenna == k {
+                // edge of antenna range
+                left_house = -1
+                last_antenna = -1
+            }
         }
         if attach > -1 {
             last_antenna = attach
@@ -33,6 +66,9 @@ func hackerlandRadioTransmitters(x []int32, k int32) int32 {
         }
         last_house = v
     }
+    if last_antenna == -1 {
+        count += 1
+    }
     return count
 }
 
-- 
2.25.0


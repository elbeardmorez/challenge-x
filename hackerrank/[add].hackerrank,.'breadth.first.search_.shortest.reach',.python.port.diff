From dd6cc1bce898d58648d9080725422ffcce6738ca Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Tue, 18 Jun 2019 18:18:16 +0100
Subject: [add] hackerrank, 'breadth first search: shortest reach', python port

---
 .../breadth.first.search:.shortest.reach.py   | 92 +++++++++++++++++++
 1 file changed, 92 insertions(+)

diff --git a/hackerrank/algorithms.-.graph.theory.-.medium.-.breadth.first.search:.shortest.reach/breadth.first.search:.shortest.reach.py b/hackerrank/algorithms.-.graph.theory.-.medium.-.breadth.first.search:.shortest.reach/breadth.first.search:.shortest.reach.py
index b90aaaa..adff14c 100644
--- a/hackerrank/algorithms.-.graph.theory.-.medium.-.breadth.first.search:.shortest.reach/breadth.first.search:.shortest.reach.py
+++ b/hackerrank/algorithms.-.graph.theory.-.medium.-.breadth.first.search:.shortest.reach/breadth.first.search:.shortest.reach.py
@@ -5,10 +5,102 @@ import os
 import random
 import re
 import sys
+from collections import deque
 
 
 # Complete the bfs function below.
 def bfs(n, m, edges, s):
+    class node():
+        def __init__(self, number):
+            self.number = number
+            self.nodes = []
+
+        def bfs(self, path, pool, search, res, max_depth):
+            #print(f"considering path {path} -> {self.number}?")
+            if self.number in path:
+                return
+            elif self.number in search:
+                del search[self.number]
+                #print(f"setting res: {self.number} = {6 * len(path)}, search length: {len(search)}; res length: {len(res)}")
+                res[self.number] = 6 * len(path)
+                pool.append(path + [self.number])
+                #print(f"pushed path: {path + [self.number]}, pool length: {len(pool)}")
+            elif len(path) == max_depth:
+                pool.append(path + [self.number])
+                #print(f"pushed path: {path + [self.number]}, pool length: {len(pool)}")
+            else:
+                path.append(self.number)
+                for l in range(len(self.nodes)):
+                    n = self.nodes[l]
+                    if n.number not in path:
+                        n.bfs(path, pool, search, res, max_depth)
+                        if len(search) == 0:
+                            break
+                path.pop()
+
+    map_ = {}
+    for [a, b] in edges:
+        #print(f"considering edge {a} -> {b}")
+        n_a = None
+        if a in map_:
+            n_a = map_[a]
+        else:
+            n_a = node(a)
+            map_[a] = n_a
+        if b:
+            n_b = None
+            if b in map_:
+                n_b = map_[b]
+            else:
+                n_b = node(b)
+                map_[b] = n_b
+            n_b.nodes.append(n_a)
+            n_a.nodes.append(n_b)
+
+    #print(f"map_: {list(map_.keys())}")
+    #print(f"s '{s}' is a '{type (s)}'")
+    #print(f"nodes: {n}")
+    map_search = {}
+    for l in range(1, n + 1):
+        if l != s and l in map_:
+            map_search[l] = -1
+
+    # search
+    pool = deque()
+    max_depth = 1
+    map_res = {}
+
+    if s not in map_:
+        return [-1] * (n - 1)
+
+    while len(map_search) > 0 and max_depth < len(map_):
+        #print(f"pre pool length: {len(pool)}")
+        while len(pool) > 0 and len(pool[0]) < max_depth - 1:
+            pool.popleft()
+        #print(f"post pool length: {len(pool)}")
+        if len(pool) == 0:
+            pool.append([s])
+        last = len(pool)
+        #print(f"searching at depth: {max_depth}, pool length: {len(pool)}")
+        for l2 in range(last):
+            path = pool[l2]
+            n_start = map_[path.pop()]
+            n_start.bfs(path, pool, map_search, map_res, max_depth)
+            #print(f"considering path {l2}: {pool[l2]}")
+            if len(map_search) == 0:
+                break
+        max_depth += 1
+
+    # final results array
+    res = []
+    for l in range(1, n + 1):
+        if l == s:
+            continue
+        if l in map_res:
+            res.append(map_res[l])
+        else:
+            res.append(-1)
+    return res
 
 
 if __name__ == '__main__':
-- 
2.23.0


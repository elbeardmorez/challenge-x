From bc0a552e95cd2f3ad4f775754ce7edd00e33ff89 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 10 Jul 2019 09:23:28 +0100
Subject: [add] hackerrank, 'larry's array', javascript solution

---
 .../larry's.array.js                          | 83 +++++++++++++++++++
 1 file changed, 83 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.js b/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.js
index bf4d7a4..ae664e0 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.js
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.js
@@ -26,6 +26,89 @@ function readLine() {
 
 // Complete the larrysArray function below.
 function larrysArray(A) {
+    /*
+
+    boils down to length and whether the final necessary rotation is possible
+
+    0 rotations  -> c b a
+    1 rotation   c b a -> b a c
+    2 rotations  b a c -> a c b ..impossible
+
+    ..hence you're just moving the first item through the array with no affect on the other two
+    ..up until the last 3
+
+    0 rotations  -> e d c b a
+    x rotations  -> a b c e d ..impossible
+
+    what is the affect of x moving to the front?
+
+    it can jump -2 with no affect
+    if there's only one space left, jump 1, switch -1 and +1 and jump -1
+
+    implementation
+    how to pull each x out of array A_n
+
+    consider the lead 3 idxs a special 'next' subset, keep populated until only 3 remain, then deduce
+
+    */
+
+    //console.log(`init: ${A}`);
+    let As = A.slice(0).sort((x, y) => x === y ? 0 : (parseInt(x) > parseInt(y) ? 1 : -1));
+    //console.log(`sort: ${As}`);
+    let n = A.length;
+    let idx = -1;
+    let l_tmp = -1;
+    let l = -1;
+    let target = -1;
+    for (let l_s = 0; l_s < n; l_s++) {
+        target = As[l_s];
+        // get idx in 'sparse array'
+        idx = 0;
+        l = 0;
+        while (true) {
+            if (A[l] === target)
+                break;
+            else if (A[l] > 0)
+                idx++;
+            l++;
+        }
+        // effect of removal on special lead rotation
+        if (idx < 3) {
+            if (idx === 0) {
+                A[0] = A[1];
+                A[1] = A[2];
+            } else if (idx === 1) {
+                l_tmp = A[0];
+                A[0] = A[2];
+                A[1] = l_tmp;
+            }
+            A[2] = -1;
+            // re-populate next[2]?
+            let set_ = false;
+            for (l = 3; l < n; l++) {
+                //console.log(`searching: idx ${l} = ${A[l]}`);
+                if (A[l] > 0) {
+                    A[2] = A[l];
+                    A[l] = -1;
+                    set_ = true;
+                    break;
+                }
+            }
+            //console.log(`step: ${A}`);
+            if (!set_)
+                // decide!
+                return A[0] < A[1] ? "YES" : "NO";
+        } else {
+            if (idx % 3 === 1) {
+                // switch -1 and +1 idxs
+                l_tmp = A[0];
+                A[1] = A[1];
+                A[0] = l_tmp;
+            }
+            A[idx] = -1;
+            //console.log(`step: ${A}`);
+        }
+    }
 }
 
 function main() {
-- 
2.23.0


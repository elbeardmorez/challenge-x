From 41617be2b38a3fe2176a6fade9c43dcbb6a3bd63 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Mon, 22 Jul 2019 23:21:15 +0100
Subject: [add] hackerrank, 'beautiful triplets', python port

---
 .../beautiful.triplets.py                     | 61 +++++++++++++++++++
 1 file changed, 61 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.py b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.py
index 945b955..f55bd24 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.py
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.py
@@ -6,8 +6,69 @@ import random
 import re
 import sys
 
+
 # Complete the beautifulTriplets function below.
 def beautifulTriplets(d, arr):
+    """
+    map containing pairs of valid jump pairs starting at that idx
+    (1, 2, 3, 4)  d=1
+    [1] 1|2 1|3 1|4
+    [2] 2|3 2|4
+    [3] 3|4
+
+    for any number in map
+      for each pair in that set
+    add the number of entries in the second idx of the pair's map entry set
+    1|2 -> 1 + each [2] = len([2])
+    1|3 -> 1 + each [3] = len([3])
+    1|4 -> 1 + each [4] = len([4])
+    2|3 -> 2 + each [3] = len([3])
+    ..
+    sum total
+
+    map of array of jump targets is cheaper
+    """
+
+    l_a = len(arr)
+    #print(f"considering [{l_a}] {arr}")
+    arr_x = arr[0:]
+    _ = arr_x
+    if l_a < 3:
+        return 0
+
+    sum_ = 0
+
+    map_ = {}
+    order = []
+    for l in range(0, l_a):
+        v = arr[l]
+        arr2 = []
+        l2 = 1
+        while True:
+            if l+l2 >= l_a:
+                break
+
+            diff = arr[l+l2] - v
+            if diff > d:
+                break
+            elif diff == d:
+                arr2.append(l+l2)
+            l2 += 1
+
+        if len(arr2) > 0:
+            order.append(l)
+            map_[l] = arr2
+            print(f"adding idx: {l} | {arr2}")
+
+    for l in order:
+        for l2 in map_[l]:
+            if l2 in map_:
+                next_ = map_[l2]
+                sum_ += len(next_)
+                print(f"l: {l}, l2: {l2}, sum: {sum_}")
+
+    return sum_
+
 
 if __name__ == '__main__':
     fptr = open(os.environ['OUTPUT_PATH'], 'w')
-- 
2.23.0


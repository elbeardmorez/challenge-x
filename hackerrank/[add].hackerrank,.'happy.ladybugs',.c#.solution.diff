From e24d9d62a0187639fdc762b2deb2789ca5b64be8 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 6 Jun 2018 13:26:04 +0100
Subject: [add] hackerrank, 'happy ladybugs', c# solution

---
 .../happy.ladybugs.cs                         | 68 +++++++++++++++++++
 1 file changed, 68 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.happy.ladybugs/happy.ladybugs.cs b/hackerrank/algorithms.-.implementation.-.easy.-.happy.ladybugs/happy.ladybugs.cs
index 9d7df13..ea00a88 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.happy.ladybugs/happy.ladybugs.cs
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.happy.ladybugs/happy.ladybugs.cs
@@ -16,6 +16,74 @@ class Solution {
 
     // Complete the happyLadybugs function below.
     static string happyLadybugs(string b) {
+
+        var res = "YES";
+        if (b.Replace("_","").ToCharArray().GroupBy(x => x).Where(g => g.Count() == 1).Count() != 0) {
+            // fail for any unpairable colours
+            Console.WriteLine($"short-circuit on '${b}'");
+            res = "NO";
+        } else {
+            // game
+            var unhappy = new List<Tuple<int, char>>();
+            var empty = new List<Tuple<int, char, char>>();
+            var last_char = ' ';
+            for (var idx = 0; idx < b.Length; idx++) {
+                var c = b[idx];
+                var next_char = idx == b.Length - 1 ? ' ' : b[idx + 1];
+                Console.WriteLine($"{last_char}|{c}|{next_char}");
+                if (c == '_')
+                    empty.Add(new Tuple<int, char, char>(idx, last_char, next_char));
+                else if (c != last_char &&
+                         c != next_char)
+                    unhappy.Add(new Tuple<int, char>(idx, c));
+                last_char = c;
+            }
+
+            Console.WriteLine($"unhappy length: {unhappy.Count}, empty length: {empty.Count}");
+            var unhappy_last = unhappy.Count + 1; // break condition
+            while (unhappy.Count > 0 &&
+                   unhappy.Count != unhappy_last) {
+                unhappy_last = unhappy.Count;
+                for (var idx = 0; idx < unhappy.Count; idx++) {
+                    var u = unhappy[idx];
+                    // find space..
+                    for (var idx2 = 0; idx2 < empty.Count; idx2++) {
+                        var e = empty[idx2];
+                        var matched = u.Item2 == e.Item2 || u.Item2 == e.Item3;
+                        Console.WriteLine($"[{matched}] u: {u.Item1}|{u.Item2}, e: {e.Item1}|{e.Item2}|{e.Item3}" );
+                        if (matched) {
+                            var idx_from = u.Item1;
+                            var idx_to = e.Item1;
+                            // shuffle
+                            empty.RemoveAt(idx2);
+                            // update empty set
+                            for(var idx3 = 0; idx3 < empty.Count; idx3++) {
+                                if (empty[idx3].Item1 - 1 == idx_from)
+                                    // update left, empty now!
+                                    empty[idx3] = new Tuple<int, char, char>(empty[idx3].Item1, '_', empty[idx3].Item3);
+                                if (empty[idx3].Item1 + 1 == idx_from)
+                                    // update left, empty now!
+                                    empty[idx3] = new Tuple<int, char, char>(empty[idx3].Item1, empty[idx3].Item2, '_');
+                                if (empty[idx3].Item1 - 1 == idx_to)
+                                    // update left, new ladybug now!
+                                    empty[idx3] = new Tuple<int, char, char>(empty[idx3].Item1, u.Item2, empty[idx3].Item3);
+                                if (empty[idx3].Item1 + 1 == idx_from)
+                                    // update left, new ladybug now!
+                                    empty[idx3] = new Tuple<int, char, char>(empty[idx3].Item1, empty[idx3].Item2, u.Item2);
+                            }
+                            empty.Add(new Tuple<int, char, char>(u.Item1,
+                                                u.Item1 == 0 ? ' ' : b[u.Item1 - 1],
+                                                u.Item1 == (b.Length - 1) ? ' ' : b[u.Item1 + 1]));
+
+                            unhappy.RemoveAt(idx);
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+
+        return res;
     }
 
     static void Main(string[] args) {
-- 
2.23.0


From eb4d02cf0cbaa8907c9f4b9199c44e35374d4dcb Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 23 Feb 2020 13:02:49 +0000
Subject: [add] hackerrank, 'marc's cakewalk', rust port

---
 .../marc's.cakewalk.rs                        | 53 ++++++++++++++++++-
 1 file changed, 52 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.greedy.-.easy.-.marc's.cakewalk/marc's.cakewalk.rs b/hackerrank/algorithms.-.greedy.-.easy.-.marc's.cakewalk/marc's.cakewalk.rs
index 75b9783..a9eaa22 100644
--- a/hackerrank/algorithms.-.greedy.-.easy.-.marc's.cakewalk/marc's.cakewalk.rs
+++ b/hackerrank/algorithms.-.greedy.-.easy.-.marc's.cakewalk/marc's.cakewalk.rs
@@ -1,3 +1,54 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
 
+fn marcs_cakewalk(calorie: &mut Vec<i32>) -> i64 {
+    let mut count: i64 = 0;
+    calorie.sort();
+    calorie.reverse();
+    let mut idx = 0;
+    let base: i32 = 2;
+    for cal in calorie {
+        //println!("idx: {:?} , cal: {:?}", idx, cal);
+        count += base.pow(idx) as i64 * (*cal as i64);
+        idx += 1;
+        //println!("count: '{:?}'", count);
+    }
+    return count;
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_end_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    next_line(&mut line);  // ignore size
+    while line.len() > 0 {
+        next_line(&mut line);
+        let mut data = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+        let res: i64 = marcs_cakewalk(&mut data);
+        f.write_all(res.to_string().as_bytes()).expect("file io error");
+        f.write_all(b"\n").expect("file io error");
+        next_line(&mut line);  // ignore size
+    }
+}
-- 
2.25.0


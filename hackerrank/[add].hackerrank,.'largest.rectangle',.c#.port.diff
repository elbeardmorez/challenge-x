From 5f9c39a37d4d276621425dcff9efc276b71cc377 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 3 Apr 2019 07:52:22 +0100
Subject: [add] hackerrank, 'largest rectangle', c# port

---
 .../largest.rectangle.cs                      | 49 +++++++++++++++++++
 1 file changed, 49 insertions(+)

diff --git a/hackerrank/data.structures.-.stacks.-.medium.-.largest.rectangle/largest.rectangle.cs b/hackerrank/data.structures.-.stacks.-.medium.-.largest.rectangle/largest.rectangle.cs
index 6f99ed2..e065022 100644
--- a/hackerrank/data.structures.-.stacks.-.medium.-.largest.rectangle/largest.rectangle.cs
+++ b/hackerrank/data.structures.-.stacks.-.medium.-.largest.rectangle/largest.rectangle.cs
@@ -17,7 +17,56 @@ class Solution {
     // Complete the largestRectangle function below.
     static long largestRectangle(int[] h) {
 
+        // horizontal 'run' per vertical height (hpv)
+        // current 'run' map
+        var hpv_cur = new Dictionary<int, int>();
+        // max 'run' map
+        var hpv_max = new Dictionary<int, int>();
 
+        // iterate heights
+        var last = 0;
+        foreach (var x in h) {
+            if (!(hpv_cur.ContainsKey(x))) {
+                if (x > last)
+                    hpv_cur[x] = 0;
+                else {
+                    // max of higher open runs
+                    foreach(var xx in new List<int>(hpv_cur.Keys)) {
+                        if (xx <= x)
+                            continue;
+                        if (!(hpv_cur.ContainsKey(x)) || hpv_cur[xx] > hpv_cur[x])
+                            hpv_cur[x] = hpv_cur[xx];
+                    }
+                    //Console.WriteLine($"x: {x}, hpv_cur[x]: {hpv_cur[x]}");
+                }
+            }
+            foreach (var xx in new List<int>(hpv_cur.Keys)) {
+                if (xx <= x)
+                    hpv_cur[xx] += 1;
+                else if (xx > x) {
+                    // close run
+                    if (!(hpv_max.ContainsKey(xx)) || hpv_max[xx] < hpv_cur[xx])
+                        hpv_max[xx] = hpv_cur[xx];
+                    hpv_cur.Remove(xx);
+                }
+            }
+            last = x;
+        }
+
+        // finalise all remaining runs
+        foreach (var x in hpv_cur.Keys) {
+            if (!hpv_max.ContainsKey(x) || hpv_max[x] < hpv_cur[x])
+                hpv_max[x] = hpv_cur[x];
+        }
+
+        // calc max
+        var max_ = 0;
+        foreach (var x in hpv_max.Keys) {
+            if (x * hpv_max[x] > max_)
+                max_ = x * hpv_max[x];
+        }
+
+        return max_;
     }
 
     static void Main(string[] args) {
-- 
2.23.0


From 16e502be07c88d081160df5d66ae4d427a243fd6 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 12 Feb 2020 21:17:18 +0000
Subject: [add] hackerrank, 'palindrome index', rust port

---
 .../palindrome.index.rs                       | 96 ++++++++++++++++++-
 1 file changed, 95 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.strings.-.easy.-.palindrome.index/palindrome.index.rs b/hackerrank/algorithms.-.strings.-.easy.-.palindrome.index/palindrome.index.rs
index 75b9783..38b0e0c 100644
--- a/hackerrank/algorithms.-.strings.-.easy.-.palindrome.index/palindrome.index.rs
+++ b/hackerrank/algorithms.-.strings.-.easy.-.palindrome.index/palindrome.index.rs
@@ -1,3 +1,97 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
 
+fn palindrome_index(s: &str) -> i32 {
+    // abcddcba | -1
+    // abcdedcba | -1
+    // axbccba | 1
+    // abxccbxa | -1
+
+    let chars = s.chars().collect::<Vec<char>>();
+    //println!("chars: {:?}", chars);
+    let mut idx: i32 = -1;
+    let mut l = 0;
+    let mut l2 = s.len() - 1;
+    let mut options: Vec<[usize; 3]> = vec!();
+    while l < l2 {
+        if chars[l] == chars[l2] {
+            l += 1;
+            l2 -= 1;
+        } else if idx != -1 {
+            // second non match
+            let l_options: usize = options.len();
+            if l_options > 0 {
+                //println!("second non-match, but we've got options!");
+                idx = options[l_options - 1][0] as i32;
+                l = options[l_options - 1][1];
+                l2 = options[l_options - 1][2];
+                options.pop();
+                //println!("idx: {:?}, l: {:?}, l2: {:?}", idx, l, l2);
+            } else {
+                /*
+                println!("idx: {:?}, l: {:?}, l2: {:?}", idx, l, l2);
+                println!("lss:  {:?} |{:?}| {:?} ... {:?} |{:?}| {:?}  : l2ss",
+                           &chars[(l - 4)..l], &chars[l], &chars[(l + 1)..(l + 5)],
+                           &chars[(l2 - 4)..l2], &chars[l2], &chars[(l2 + 1)..(l2 + 5)]);
+                println!("second non-match!");
+                */
+                idx = -1;
+                break;
+            }
+        } else {
+            //println!("first non-match!");
+            //println!("l: [{:?}] {:?}, l2: [{:?}] {:?}", l, chars[l], l2, chars[l2]);
+            if chars[l + 1] == chars[l2] && chars[l] == chars[l2 - 1] {
+                // both paths work! take first and add marker to second path
+                options.push([l2, l, l2 - 1]);
+                idx = l as i32;
+                l += 1;
+            } else if chars[(l + 1) as usize] == chars[l2 as usize] {
+                idx = l as i32;
+                l += 1;
+            } else if chars[l as usize] == chars[(l2 - 1) as usize] {
+                idx = l2 as i32;
+                l2 -= 1;
+            } else {
+                // multiple non-matching
+                break;
+            }
+        }
+    }
+    return idx;
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_right_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    next_line(&mut line); // ignore n
+    next_line(&mut line);
+    while line != "" {
+        let res: i32 = palindrome_index(&line);
+        let _ = f.write_all((res.to_string() + &'\n'.to_string()).as_bytes()).expect("file io error");
+        next_line(&mut line);
+    }
+}
-- 
2.25.0


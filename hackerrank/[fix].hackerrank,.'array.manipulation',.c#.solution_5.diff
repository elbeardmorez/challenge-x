From d607b255c93e8d6b450be3a00c7d84b040fd14b4 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 29 Jun 2018 14:04:18 +0100
Subject: [fix] hackerrank, 'array manipulation', c# solution

-simplify drop map
---
 .../array.manipulation.cs                     | 54 ++++++++++---------
 1 file changed, 30 insertions(+), 24 deletions(-)

diff --git a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
index 76eb4c4..281e3d1 100644
--- a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
+++ b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
@@ -19,17 +19,19 @@ class Solution {
     static long arrayManipulation(int n, int[][] queries) {
         int[][] squeries = queries.OrderBy(x => x[0]).ThenBy(x => x[1]).ToArray();
 
-        //for (var ii = 0; ii < queries.Length; ii++) {
-        //    var s = string.Join(" ", squeries[ii]);
-        //    WriteLine($"considering ordered query: {s}");
-        //}
+        for (var ii = 0; ii < queries.Length; ii++) {
+            var s = string.Join(" ", squeries[ii]);
+            WriteLine($"considering ordered query: {s}");
+        }
 
         // iterate ordered queries maintaining a dictionary of 'current'
         // queries (e.g. valid / in range of current index!)
         // also maintain a hash for quickly deducing when a query
         // in 'current' needs to drop out, and thus impact the  of the 'current'
-        var d_interest = new Dictionary<string, int>();
-        var d_drop_at_index = new SortedDictionary<int, List<string>>();
+
+        //var d_interest = new Dictionary<string, int>();
+        //var d_drop_at_index = new SortedDictionary<int, List<string>>();
+        var d_drop_at_index = new SortedDictionary<int, long>();
         long max = 0;
         long score = 0;
         int idx;
@@ -38,48 +40,52 @@ class Solution {
             idx = squeries[i][0];
 
             // add to 'current / of interest'
-            string key = string.Join(" ", squeries[i]);
+            //string key = string.Join(" ", squeries[i]);
             score += (long)squeries[i][2];
             //WriteLine($"idx: {idx}, key: {key}, score: {score} [+= {squeries[i][2]}]");
-            if (d_interest.ContainsKey(key))
-                d_interest[key] += squeries[i][2];
-            else
-                d_interest[key] = squeries[i][2];
+            //if (d_interest.ContainsKey(key))
+            //    d_interest[key] += squeries[i][2];
+            //else
+            //    d_interest[key] = squeries[i][2];
 
             // note drop index
             int drop_at_index = squeries[i][1];
             if (d_drop_at_index.ContainsKey(drop_at_index))
-                d_drop_at_index[drop_at_index].Add(key);
+                //d_drop_at_index[drop_at_index].Add(key);
+                d_drop_at_index[drop_at_index] += squeries[i][2];
             else
-                d_drop_at_index[drop_at_index] = new List<string>(new string[]{key});
+                //d_drop_at_index[drop_at_index] = new List<string>(new string[]{key});
+                d_drop_at_index[drop_at_index] = squeries[i][2];
 
             // maintain max score
             if (score > max)
                 max = score;
 
             // next range start
-            if (i == queries.Length - 1)
+            if (i == squeries.Length - 1)
                 next = n + 1;
             else
                 next = squeries[i + 1][0];
 
-            //WriteLine($"next: {next}");
+            WriteLine($"idx: {idx}, score: {score}, next: {next}");
 
             // fast forward idx accounting for removals
             var keys = d_drop_at_index.Keys.ToList(); // ordered
             foreach (var ik in keys) {
-                if (ik > next)
+                idx = ik;
+                if (ik >= next)
                     break;
                 // drop
-                foreach (var sk in d_drop_at_index[ik]) {
-                    if (d_interest.ContainsKey(sk)) {
-                        score -= d_interest[sk];
-                        //WriteLine($"idx: {idx}, dropping key: {sk}, score: {score} [-= {d_interest[sk]}]");
-                    }
-                    d_interest.Remove(sk);
-                }
+                //foreach (var sk in d_drop_at_index[ik]) {
+                //    if (d_interest.ContainsKey(sk)) {
+                //        //score -= d_interest[sk];
+                //
+                //    }
+                //    d_interest.Remove(sk);
+                //}
+                score -= d_drop_at_index[ik];
+                WriteLine($"idx: {idx}, score: {score} [-= {d_drop_at_index[ik]}]");
                 d_drop_at_index.Remove(ik);
-                idx = ik;
             }
         }
         return max;
-- 
2.23.0


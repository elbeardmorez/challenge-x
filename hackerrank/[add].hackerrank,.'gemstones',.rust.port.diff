From cf22d7b52a967de0ba7c96bd91e11c33f2efb4de Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 20 Dec 2019 22:04:32 +0000
Subject: [add] hackerrank, 'gemstones', rust port

---
 .../gemstones.rs                              | 69 +++++++++++++++++++
 1 file changed, 69 insertions(+)

diff --git a/hackerrank/algorithms.-.strings.-.easy.-.gemstones/gemstones.rs b/hackerrank/algorithms.-.strings.-.easy.-.gemstones/gemstones.rs
index 75b9783..4eb335b 100644
--- a/hackerrank/algorithms.-.strings.-.easy.-.gemstones/gemstones.rs
+++ b/hackerrank/algorithms.-.strings.-.easy.-.gemstones/gemstones.rs
@@ -1,3 +1,72 @@
 // Enter your code here 
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
+use std::collections::HashMap;
+use std::collections::HashSet;
 
+fn gemstones(arr: &mut Vec<String>) -> i32 {
+
+    let n = arr.len();
+    let mut map_: HashMap<char, HashSet<i32>> = HashMap::new();
+    let mut idx: i32 = 0;
+    for desc in arr {
+        for c in desc.chars() {
+            if !map_.contains_key(&c) {
+                map_.insert(c, HashSet::new());
+            }
+            map_.get_mut(&c).unwrap().insert(idx);
+        }
+        idx += 1;
+    }
+
+    //println!("map_: {:?}", map_);
+
+    let mut res: i32 = 0;
+    for (_, v) in map_ {
+        //println!("comparing: {} with arr length: {}", v.len(), n);
+        if v.len() == n {
+            res += 1;
+        }
+    }
+
+    return res;
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_right_matches('\n'));
+    }
+}
+
+fn main() {
+
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    let mut data: Vec<String> = vec!();
+
+    next_line(&mut line);  // ignore n
+    next_line(&mut line);
+    while line.len() > 0 {
+        data.push(line.clone());
+        next_line(&mut line);
+    }
+    let res: i32 = gemstones(&mut data);
+    let _ = f.write_all(res.to_string().as_bytes());
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.24.1


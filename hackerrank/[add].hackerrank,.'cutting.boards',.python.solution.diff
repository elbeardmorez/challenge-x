From b228f245dc8c28239214b0d69926a0b8291dc92a Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 19 Sep 2019 07:19:17 +0100
Subject: [add] hackerrank, 'cutting boards', python solution

---
 .../cutting.boards.py                         | 84 +++++++++++++++++++
 1 file changed, 84 insertions(+)

diff --git a/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.py b/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.py
index a970e9a..693b64b 100644
--- a/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.py
+++ b/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.py
@@ -8,6 +8,90 @@ import sys
 
 # Complete the boardCutting function below.
 def boardCutting(cost_y, cost_x):
+    """
+    xxxx
+    xxxx
+
+    cutting horizontally yields 3 x cuts x1,x2,x3 to get 4 2x1 pieces, then 4 y1 cuts ..7 cuts total
+    or.. 1 y1 cut and 6 x cuts 2 x1, 2 x2, 2 x3 ..7 cuts total
+
+    xxxx
+    xxxx
+    xxxx
+
+    x1,x2,x3 ..4 y1,y2 ..11 cuts
+
+    w x h - 1 cuts total
+    optimise cutting most expensive first
+
+    maintain piece count per column / row
+    e.g 3x2
+      [111]                 [1 11]                 [1 1 1]                 [2 2 2]
+    [1]xxx  -> x1 cut ->  [2]x xx  -> x2 cut ->  [3]x x x  -> y1 cut -> [3] x x x
+    [1]xxx                [2]x xx                [3]x x x
+                                                                        [3] x x x
+      [1111]                 [2222]                [222 2]
+    [1]xxxx                [1]xxxx               [2]xxx x
+    [1]xxxx  -> y1 cut ->  [1]xxxx  -> x3 cut -> [2]xxx x
+    [1]xxxx
+                           [1]xxxx               [2]xxx x
+
+    so we just have horizontal and vertical segments to track per cut
+
+    chose cut plain based on max(cost * segments)
+    """
+
+    l_x = len(cost_x)
+    l_y = len(cost_y)
+
+    x_idx_sorted = []
+    for l in range(l_x):
+        x_idx_sorted.append([cost_x[l], l])
+    x_idx_sorted.sort(key=lambda x: x[0])
+    y_idx_sorted = []
+    for l in range(l_y):
+        y_idx_sorted.append([cost_y[l], l])
+    y_idx_sorted.sort(key=lambda y: y[0])
+
+    print(f"x_idx_sorted: {x_idx_sorted}")
+    print(f"y_idx_sorted: {y_idx_sorted}")
+
+    cost = 0
+    l1 = l_x - 1
+    l2 = l_y - 1
+    x_segments = 1
+    y_segments = 1
+
+    mod_v = 10 ** 9 + 7
+
+    while l1 + l2 > -2:
+        print(f"l1: {l1}, l2: {l2}")
+        while (l2 == -1 and l1 > -1) or \
+              (l1 > -1 and x_idx_sorted[l1][0] * y_segments >= \
+                           y_idx_sorted[l2][0] * x_segments):
+            print(f"cutting along x{x_idx_sorted[l1][1]} @ cost: "
+                  f"{x_idx_sorted[l1][0]} x {y_segments}")
+            cost = (cost + x_idx_sorted[l1][0] * y_segments) % mod_v
+            x_segments += 1
+            l1 -= 1
+            if l1 == -1:
+                break
+            print(f"l1: {l1}, l2: {l2}")
+
+        while (l1 == -1 and l2 > -1) or \
+              (l2 > -1 and y_idx_sorted[l2][0] * x_segments >= \
+                           x_idx_sorted[l1][0] * y_segments):
+            print(f"cutting along y{y_idx_sorted[l2][1]} @ cost: "
+                  f"{y_idx_sorted[l2][0]} x {x_segments}")
+            cost = (cost + y_idx_sorted[l2][0] * x_segments) % mod_v
+            y_segments += 1
+            l2 -= 1
+            if l2 == -1:
+                break
+            print(f"l1: {l1}, l2: {l2}")
+
+    return cost
+
 
 if __name__ == '__main__':
     fptr = open(os.environ['OUTPUT_PATH'], 'w')
-- 
2.23.0


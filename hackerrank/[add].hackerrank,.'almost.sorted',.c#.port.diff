From 95a8aa55d0390c3cc0fa84ee9fcff7ec5a61f59a Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 19 Jul 2019 08:24:25 +0100
Subject: [add] hackerrank, 'almost sorted', c# port

---
 .../almost.sorted.cs                          | 252 ++++++++++++++++++
 1 file changed, 252 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cs b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cs
index f4e1c2f..3c28bce 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cs
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cs
@@ -12,12 +12,264 @@ using System.Text.RegularExpressions;
 using System.Text;
 using System;
 
+using static System.Console;
+
 class Solution {
 
     // Complete the almostSorted function below.
     static void almostSorted(int[] arr) {
+        /*
+        sorted | "yes"
+        sortable | "swap l r"
+        sortable | "reverse l r"
+        unsortable | "no"
+
+        // 1 2 5 4 3 13
+        1 2 5 | 4 .. but the previous (5) MUST be after, so include it in the decreasing run
+        1 2 | 5 4 3 | 13 here we look at previous increasing run, the endpoint (2) must be < 3 AND 5 < 13
+        ..then based on size of negative run, either swap (<=3) or reverse (>3)
+
+        // 1 2 55 4 6 13 1 15
+        1 2 55 | 4 .. but .. ""      ""
+        1 2 | 55 4 | 6 .. but a negative run of size 2 is actually a single swap digit
+        1 2 | 55 | 4 6 13 | 1
+
+        // 4 5 9 7 8 6 12
+        4 5 9 | 7 .. but 8 is increasing
+            either 9 is a mistake, or 7 is a mistake
+            should it be: 4 5 | 9 | 7 8 or
+                          4 5 9 | 7 | 8
+            4 5 | 9 | 7
+
+        // 4 5 9 7 11 16 18
+
+        */
+        ////WriteLine($"[debug] considering set: {String.Join(" ", arr.Select(x => x.ToString()))}");
+
+        var l_a = arr.Length;
+        var inflections = new List<int>();
+        var reversal_required = false;
+        var reversed = false;
+        var swap_required = false;
+        var swapped = false;
+        var left = -1;
+        var right = -1;
+
+        var last = 0;
+        var last_set = false;
+
+        // simplify main algorithm by removing short edge cases
+        if (l_a == 2) {
+            if (arr[0] < arr[1])
+                WriteLine($"yes");
+            else
+                WriteLine($"yes\nswap 1 2");
+            return;
+        } else if (l_a == 3) {
+            if (arr[0] < arr[1] && arr[1] < arr[2])
+                // 1 2 3
+                WriteLine($"yes");
+            else if (arr[0] > arr[1] && arr[1] > arr[2])
+                // 3 2 1
+                WriteLine($"yes\nswap 1 3");
+            else if (arr[0] < arr[2] && arr[1] > arr[2])
+                // 1 3 2
+                WriteLine($"yes\nswap 2 3");
+            else
+                // 2 3 1
+                WriteLine($"no");
+            return;
+        }
+
+        var direction = arr[1] > arr[0] ? 1 : -1;
+        if (direction == -1) {
+            reversal_required = true;
+            left = 0;
+        }
+
+        // 4 5 9 | 7 | 8 | 6 | 12
+        // 4 5 9 | 7
+        //            7 HAS to move left of 9
+        //            can i swap 7 with 9 ? no, 9 > 8
+        //            only other way is swap 9 for something else
+
+        //WriteLine($"[debug] initial direction: {direction}");
+        for (var l = 1; l < arr.Length; l++) {
+            ////WriteLine($"[debug] l: {l}, comparing {arr[l]} with previous {arr[l - 1]}");
+            if (direction > 0 && arr[l] < arr[l - 1]) {
+                // inflection
+                //WriteLine($"[debug] @ [{l}]{arr[l]}, now {(direction == 1 ? "de" : "in")}creasing, last: {last}, swap_required: {swap_required}, reversal_required: {reversal_required}");
 
+                if (swapped || reversed) {
+                    //WriteLine($"[debug] inversion @ [{l}]{arr[l]}, but already swapped / reversed");
+                    WriteLine($"no");
+                    return;
+                }
+                last_set = false;
+                if (l == l_a - 1) {
+                    // inflection on final item
+                    if (swap_required) {
+                        // validate swap
+                        if (l - left == 1 && arr[left - 1] < arr[l]) {
+                            // adjacent
+                            right = l;
+                            WriteLine($"yes\nswap {left + 1} {right + 1}");
+                        } else if (arr[left] > arr[l - 1] &&
+                                arr[left + 1] > arr[l] &&
+                                (left == 0 || arr[left - 1] < arr[l])) {
+                            right = l;
+                            WriteLine($"yes\nswap {left + 1} {right + 1}");
+                        } else {
+                            //WriteLine($"[debug] last item inversion, impossible swap");
+                            WriteLine($"no");
+                        }
+                    } else {
+                        // 1 2 4 8 7
+                        // swap with previous only possibility
+                        if (arr[l - 2] < arr[l])
+                            WriteLine($"yes\nswap {l - 1 + 1} {l + 1}");
+                        else {
+                            //WriteLine($"[debug] last item inversion, impossible swap");
+                            WriteLine($"no");
+                        }
+                    }
+                    return;
+                } else {
+                    // we can peek forward
+                    var direction2 = (arr[l + 1] - arr[l]) / Math.Abs((arr[l + 1] - arr[l]));
+                    //if (l - last == 1) {
+                    if (direction2 == direction) {
+                        // next item restores the current direction
+                        if ((arr[l - 1] < arr[l + 1]) &&
+                            (l < 2 || arr[l - 2] < arr[l])) {
+                            // adjacent swap
+                            // 4 5 9 |7| 11 16 18
+                            left = l - 1;
+                            last = l - 1;
+                            last_set = true;
+                            swap_required = true;
+                            //right = l;
+                            //swapped = true;
+                        } else if (arr[l + 1] < arr[l - 1]) {
+                             // 1 3 6 10 |7| 8
+                             // 1 3 6 10 |5| 8
+                             // next restores increasing direction but l can't be swapped out so l - 1 MUST move or else die
+                             if (l <= 1 || arr[l] > arr[l - 2]) {
+                                 if (!swap_required) {
+                                     // 1 3 6 10 |7| 8
+                                     left = l - 1;
+                                     swap_required = true;
+                                     last = left;
+                                     last_set = true;
+                                 } else {
+                                     // 1 3 5 10 7 8 12 |6| 11  left=10
+                                     //WriteLine($"[debug] single error, impossible to rectify this a second time..");
+                                     WriteLine($"no");
+                                     return;
+                                 }
+                             } else {
+                                 // 1 3 6 10 |5| 8
+                                 //WriteLine($"[debug] cannot swap [{l}]{arr[l]} or [{l - 1}]{arr[l - 1]}");
+                                 WriteLine($"no");
+                                 return;
+                             }
+                        } else {
+                            // l can swap out
+                            if (!swap_required) {
+                                left = l;
+                                swap_required = true;
+                                last = left;
+                                last_set = true;
+                            } else {
+                                // legal swap?
+                                right = l;
+                                if (((left == 0 || arr[left - 1] < arr[right]) && arr[left + 1] > arr[right]) &&
+                                    (arr[right - 1] < arr[left] && (right == l_a - 1 || arr[right + 1] > arr[left]))) {
+                                    // 4 5 9 7 8 6 |12|  left=[2]9
+                                    // 1 3 5 10 7 8 12 |6| 11  left=[3]10
+                                    swapped = true;
+                                    //WriteLine($"[debug] ignoring next inflection");
+                                    continue;
+                                } else {
+                                    //WriteLine($"[debug] illegal swap");
+                                    WriteLine($"no");
+                                    return;
+                                }
+                            }
+                        }
+                    }
+                }
+                inflections.Add(l);
+                direction *= -1;
+                if (!last_set)
+                    last = l;
+            } else if (direction < 0 && arr[l] > arr[l - 1]) {
+                // inflection
+                //WriteLine($"[debug] @ [{l}]{arr[l]}, now {(direction == 1 ? "de" : "in")}creasing, last: {last}, swap_required: {swap_required}, reversal_required: {reversal_required}");
+                if (swapped || reversed) {
+                    //WriteLine($"[debug] inversion @ [{l}]{arr[l]}, but already swapped / reversed");
+                    WriteLine($"no");
+                    return;
+                }
+                if (swap_required) {
+                    right = l - 1;
+                    if (right - left == 1) {
+                        // adjacent swap possible ?
+                        // 4 5 9 7 |11| 16 18 | yes
+                        // [11]894947 [12]125082 |[13]137123| [14]137276 left: 11  | no
+                        if (arr[left - 1] < arr[l] &&
+                            (last == 0 || arr[left] < arr[right + 1])) {
+                            swapped = true;
+                        }
+                    }
+                } else if (!swap_required && l - last > 1) {
+                    // range reversal possible?
+                    reversal_required = true;
+                    // 10 9 8 7 15 16
+                    left = last - 1;
+                    right = l - 1;
+                    if (arr[left - 1] < arr[l] &&
+                        (last == 0 || arr[left - 1] < arr[right])) {
+                        reversed = true;
+                    } else {
+                        //WriteLine($"[debug] inversion @ [{l}]{arr[l]}, but impossible reversal required");
+                        WriteLine($"no");
+                        return;
+                    }
+                }
+                inflections.Add(l);
+                direction *= -1;
+                last = l;
+            }
+        }
 
+        //WriteLine($"[debug] end");
+        if (swapped)
+            // single valid swap and made it to the end without further anomalies
+            WriteLine($"yes\nswap {left + 1} {right + 1}");
+        else if (reversed)
+            // single valid reverse and made it to the end without further anomalies
+            WriteLine($"yes\nreverse {left + 1} {right + 1}");
+        else if (inflections.Count == 0) {
+            // dependent up last idx
+            if (direction > 0)
+                // 1 2 3 4
+                WriteLine($"yes");
+            else
+                // 10 9 8 7  // full reverse
+                WriteLine($"yes\nreverse 1 {l_a}");
+        } else if (inflections.Count == 1 && direction == -1) {
+            // decreasing subset to end
+            left = last - 1;
+            right = l_a - 1;
+            if (arr[right] > arr[left - 1])
+                WriteLine($"yes\nreverse {last - 1 + 1} {l_a - 1 + 1}");
+            else {
+                //WriteLine($"[debug] impossible reversal, incompatible end-points");
+                WriteLine($"no");
+            }
+        } else
+            WriteLine($"no");
     }
 
     static void Main(string[] args) {
-- 
2.23.0


From 3cf1a83729779c01aa1330474822ca59625b88cc Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 4 Aug 2019 08:10:13 +0100
Subject: [add] hackerrank, 'organising containers of balls', c++ port

---
 .../organising.containers.of.balls.cpp        | 69 +++++++++++++++++++
 1 file changed, 69 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cpp b/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cpp
index 726beec..e1b59e8 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cpp
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cpp
@@ -4,8 +4,77 @@ using namespace std;
 
 // Complete the organizingContainers function below.
 string organizingContainers(vector<vector<int>> container) {
+    /*
+    grid x y
+    a column represents the split of balls of a single type
+    swap elements vertically, if column A requires 4 moves to push all balls into the same row (container)
+    then 4 moves must be performed from the same row (container) in other columns (types)
 
+    10^9 number = 10 digits
+    2^31 number = 10 digits
+    n x n matrix n <= 100 ..so upto 12 digits > int32
 
+    try force a lead diagonal?
+
+    1 3 1
+    2 1 2  ->  no way that row 1 can be all type 2, as 4 have to be moved in (from rows 2 and 3) and there are
+    3 3 3      only two other typed balls in there to remove ..no balance. similarly with row2. but row 3? whilst
+               4 can go in and 4 can go out, it still leaves 2 of the wrong type in there
+
+    hence we need to find all the possible (valid) 'targets' (valid target rows) for a given type to amass, and then
+    determine whether these are all compatible
+
+    so sum all rows and all columns. for each x,y the sum of Cx,y - x,y must == Rx,y - x,y to be valid
+
+    identifying an impossible container is enough?? e.g. is there a container no type can exclusively exist in?
+    */
+    auto M = container;
+    auto n = M.size();
+    /*
+    cout << "considering " << n << "x" << n << " matrix:" << endl;
+    for (auto itr_row = M.begin(); itr_row != M.end(); ++itr_row) {
+        for (auto itr_col = (*itr_row).begin(); itr_col != (*itr_row).end(); ++itr_col)
+            cout << " " << *itr_col;
+        cout << endl;
+    }
+    */
+    int x, y = 0;
+    int Ry[n];
+    int Cx[n];
+    fill(Ry, Ry + n, 0);
+    fill(Cx, Cx + n, 0);
+    for (auto y = 0; y < n; y++) {
+        for (auto x = 0; x < n; x++) {
+            Cx[y] += M[y][x];
+            Ry[x] += M[y][x];
+        }
+    }
+    //cout << "row counts: "; for (int l = 0; l < n; l++) cout << " " << Ry[l]; cout << endl;
+    //cout << "column counts: "; for (int l = 0; l < n; l++) cout << " " << Cx[l]; cout << endl;
+
+    vector<vector<int>> possible;
+    int in_, out_ = 0;
+
+    // for each container y..;
+    for (auto y = 0; y < n; y++) {
+        // is type x exclusively existing in there possible?;
+        vector<int> v;
+        possible.push_back(v);
+        for (auto x = 0; x < n; x++) {
+            auto in_ = Cx[x] - M[y][x];
+            auto out_ = Ry[y] - M[y][x];
+            //cout << "[y,x]|[" << y << "," << x << "] in_: " << in_ << ", out: '" << out_ << "'" << endl;
+            if (in_ == out_)
+                // container y can contain type x exclusively;
+                possible[y].push_back(x);
+        }
+        if (possible[y].size() == 0) {
+            //cout << "cannot exclusively collect any type in container " << y+1 << endl;
+            return "Impossible";
+        }
+    }
+
+    return "Possible";
 }
 
 int main()
-- 
2.23.0


From 85290c65a19d88f3da66a0e0550d1e5b51ec1a76 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 4 Jul 2018 10:51:23 +0100
Subject: [fix] hackerrank, 'tree top view', c++ solution

-redux, wrong solution, complete not partial traversal routine required
---
 .../tree.top.view.cpp                         | 48 +++++++++++++++++--
 1 file changed, 43 insertions(+), 5 deletions(-)

diff --git a/hackerrank/data.structures.-.trees.-.easy.-.tree.top.view/tree.top.view.cpp b/hackerrank/data.structures.-.trees.-.easy.-.tree.top.view/tree.top.view.cpp
index 479b1e5..b620c1b 100644
--- a/hackerrank/data.structures.-.trees.-.easy.-.tree.top.view/tree.top.view.cpp
+++ b/hackerrank/data.structures.-.trees.-.easy.-.tree.top.view/tree.top.view.cpp
@@ -47,23 +47,61 @@ class Node {
 };
 
 */
-    vector<int>* dump_top(Node* root, int direction) {
+    vector<int>* dump_top(Node* root, int direction, int* pos, int* max_left, int* max_right) {
         vector<int>* v = new vector<int>();
         vector<int>* v2;
-        v->push_back(root->data);
+
+        bool add = false;
+        // record tree position
+        if (direction == -1 && *pos < *max_left) {
+            *max_left = *pos;
+            add = true;
+        } else if (direction == 1 && *pos > *max_right) {
+            *max_right = *pos;
+            add = true;
+        }
+
+        // look in upper left branches first
         if (root->left && direction <= 0) {
-            v2 = dump_top(root->left, -1);
+            (*pos)--;
+            v2 = dump_top(root->left, -1, pos, max_left, max_right);
+            v->insert(v->end(), v2->begin(), v2->end());
+            (*pos)++;
+        }
+        // look in lower branches that protrude the width of those above
+        if (root->right && direction < 0) {
+            (*pos)++;
+            v2 = dump_top(root->right, -1, pos, max_left, max_right);
             v->insert(v->end(), v2->begin(), v2->end());
+            (*pos)--;
         }
+
+        // add current node?
+        if (direction == 0 || add)
+            v->push_back(root->data);
+
+        // look in upper right branches first
         if (root->right && direction >= 0) {
-            v2 = dump_top(root->right, 1);
+            (*pos)++;
+            v2 = dump_top(root->right, 1, pos, max_left, max_right);
+            v->insert(v->end(), v2->begin(), v2->end());
+            (*pos)--;
+        }
+        // look in lower branches that protrude the width of those above
+        if (root->left && direction > 0) {
+            (*pos)--;
+            v2 = dump_top(root->left, 1, pos, max_left, max_right);
             v->insert(v->end(), v2->begin(), v2->end());
+            (*pos)++;
         }
         return v;
     }
 
     void topView(Node * root) {
-        vector<int>* v = dump_top(root, 0);
+        int pos = 0;
+        int max_left = 0;
+        int max_right = 0;
+        vector<int>* v = dump_top(root, 0, &pos, &max_left, &max_right);
         int* data = v->data();
         for (int i = 0; i < v->size(); i++)
             //cout << "[" << i << "] " << data[i] << " ";
-- 
2.23.0


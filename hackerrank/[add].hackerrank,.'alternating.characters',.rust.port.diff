From d1ce1c83297e8881a23a3f8f6477290cc395223c Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 29 Dec 2019 08:50:46 +0000
Subject: [add] hackerrank, 'alternating characters', rust port

---
 .../alternating.characters.rs                 | 55 ++++++++++++++++++-
 1 file changed, 54 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.strings.-.easy.-.alternating.characters/alternating.characters.rs b/hackerrank/algorithms.-.strings.-.easy.-.alternating.characters/alternating.characters.rs
index 75b9783..786a0af 100644
--- a/hackerrank/algorithms.-.strings.-.easy.-.alternating.characters/alternating.characters.rs
+++ b/hackerrank/algorithms.-.strings.-.easy.-.alternating.characters/alternating.characters.rs
@@ -1,3 +1,56 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
 
+fn alternating_characters(s: &String) -> i32 {
+    let mut repeated: i32 = 0;
+    let chars = s.chars();
+    let mut last = ' ';
+    for c in chars {
+        //println!("comparing: {:?} with last: {:?}", c, last);
+        if c != ' ' && c == last {
+            repeated += 1;
+        } else {
+            last = c.clone();
+        }
+    }
+    return repeated;
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_right_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+
+    next_line(&mut line);  // ignore n
+    next_line(&mut line);
+    let mut data: String;
+    while line.len() > 0 {
+        data = line.clone();
+        let res: i32 = alternating_characters(&data);
+        let _ = f.write_all(res.to_string().as_bytes());
+        f.write_all(b"\n").expect("file io error");
+        next_line(&mut line);
+    }
+}
-- 
2.24.1


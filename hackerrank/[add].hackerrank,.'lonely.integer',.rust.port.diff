From 538eccd9faa5a193bccb83c9d2ebb9784bde20d6 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 17 Jan 2020 13:43:46 +0000
Subject: [add] hackerrank, 'lonely integer', rust port

---
 .../lonely.integer.rs                         | 53 ++++++++++++++++++-
 1 file changed, 52 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.bit.manipulation.-.easy.-.lonely.integer/lonely.integer.rs b/hackerrank/algorithms.-.bit.manipulation.-.easy.-.lonely.integer/lonely.integer.rs
index 75b9783..c501b4e 100644
--- a/hackerrank/algorithms.-.bit.manipulation.-.easy.-.lonely.integer/lonely.integer.rs
+++ b/hackerrank/algorithms.-.bit.manipulation.-.easy.-.lonely.integer/lonely.integer.rs
@@ -1,3 +1,54 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
+use std::collections::HashMap;
 
+fn lonely_integer(arr: &Vec<i32>) -> i32 {
+    let mut map_: HashMap<i32, i32> = HashMap::new();
+    for x in arr {
+        if map_.contains_key(x) {
+            *(map_.get_mut(x).unwrap()) += 1;
+        } else {
+            map_.insert(*x, 1);
+        }
+    }
+    for (k, x) in map_ {
+        if x == 1 {
+            return k
+        }
+    }
+    return -1 as i32;
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_right_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    next_line(&mut line);  // ignore n
+    next_line(&mut line);
+    let data = line.split(' ').map(|c| c.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    let res: i32 = lonely_integer(&data);
+    let _ = f.write_all(res.to_string().as_bytes());
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.24.1


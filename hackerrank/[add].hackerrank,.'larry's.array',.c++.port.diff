From 08beec60ca6d066b92d4e009c5d91605199dc028 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 11 Jul 2019 08:03:57 +0100
Subject: [add] hackerrank, 'larry's array', c++ port

---
 .../larry's.array.cpp                         | 93 ++++++++++++++++++-
 1 file changed, 91 insertions(+), 2 deletions(-)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.cpp b/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.cpp
index 59ce34d..f33c604 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.cpp
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.larry's.array/larry's.array.cpp
@@ -6,8 +6,97 @@ vector<string> split_string(string);
 
 // Complete the larrysArray function below.
 string larrysArray(vector<int> A) {
-
-
+    /*
+
+    boils down to length and whether the final necessary rotation is possible
+
+    0 rotations  -> c b a
+    1 rotation   c b a -> b a c
+    2 rotations  b a c -> a c b ..impossible
+
+    ..hence you're just moving the first item through the array with no affect on the other two
+    ..up until the last 3
+
+    0 rotations  -> e d c b a
+    x rotations  -> a b c e d ..impossible
+
+    what is the affect of x moving to the front?
+
+    it can jump -2 with no affect
+    if there's only one space left, jump 1, switch -1 and +1 and jump -1
+
+    implementation
+    how to pull each x out of array A_n
+
+    consider the lead 3 idxs a special 'next' subset, keep populated until only 3 remain, then deduce
+
+    */
+
+    //cout << "\n\ninit:"; for (auto itr = A.begin(); itr < A.end(); ++itr) //cout << " " << *itr; //cout << endl;
+    vector<int> As;
+    copy(A.begin(), A.end(), back_inserter(As));
+    sort(As.begin(), As.end(), [](int x, int y) { return x < y ? 1 : 0; });
+    //cout << "sort:"; for (auto itr = As.begin(); itr < As.end(); ++itr) //cout << " " << *itr; //cout << endl;
+    int n = A.size();
+    int idx = -1;
+    int idx_sparse = -1;
+    int l_tmp = -1;
+    int l = -1;
+    int target = -1;
+    for (int l_s = 0; l_s < n; l_s++) {
+        target = As[l_s];
+        // get idx in 'sparse array'
+        idx = 0;
+        idx_sparse = 0;
+        while (true) {
+            if (A[idx_sparse] == target)
+                break;
+            else if (A[idx_sparse] > 0)
+                idx++;
+            idx_sparse++;
+        }
+        //cout << "target: " << target << ", found at idx: " << idx << endl;
+        // effect of removal on special lead rotation
+        if (idx < 3) {
+            if (idx == 0) {
+                A[0] = A[1];
+                A[1] = A[2];
+            } else if (idx == 1) {
+                l_tmp = A[0];
+                A[0] = A[2];
+                A[1] = l_tmp;
+            }
+            A[2] = -1;
+            // re-populate next[2]?
+            auto set_ = false;
+            for (l = 3; l < n; l++) {
+                //cout << "searching: idx " << l << " = " << A[l] << endl;
+                if (A[l] > 0) {
+                    A[2] = A[l];
+                    A[l] = -1;
+                    set_ = true;
+                    break;
+                }
+            }
+            //cout << "step:"; for (auto itr = A.begin(); itr < A.end(); ++itr) //cout << " " << *itr; //cout << endl;
+            if (!set_) {
+                // decide!
+                auto res = A[0] < A[1] ? "YES" : "NO";
+                //cout << "res: " << res << endl;
+                return res;
+            }
+        } else {
+            if (idx % 2 == 1) {
+                // switch -1 and +1 idxs
+                l_tmp = A[0];
+                A[0] = A[1];
+                A[1] = l_tmp;
+            }
+            A[idx_sparse] = -1;
+            //cout << "step:"; for (auto itr = A.begin(); itr < A.end(); ++itr) //cout << " " << *itr; //cout << endl;
+        }
+    }
+    return "NO";
 }
 
 int main()
-- 
2.23.0


From b36b58b31cb9f032ac2f068c044bc15bba8a4dc5 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 2 Aug 2019 08:12:52 +0100
Subject: [add] hackerrank, 'organising containers of balls', go port

---
 .../organising.containers.of.balls.go         | 65 +++++++++++++++++++
 1 file changed, 65 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.go b/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.go
index bb9f4df..1f98f0b 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.go
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.go
@@ -11,8 +11,73 @@ import (
 
 // Complete the organizingContainers function below.
 func organizingContainers(container [][]int32) string {
+    /*
+    grid x y
+    a column represents the split of balls of a single type
+    swap elements vertically, if column A requires 4 moves to push all balls into the same row (container)
+    then 4 moves must be performed from the same row (container) in other columns (types)
+
+    10^9 number = 10 digits
+    2^31 number = 10 digits
+    n x n matrix n <= 100 ..so upto 12 digits > int32
+
+    try force a lead diagonal?
+
+    1 3 1
+    2 1 2  ->  no way that row 1 can be all type 2, as 4 have to be moved in (from rows 2 and 3) and there are
+    3 3 3      only two other typed balls in there to remove ..no balance. similarly with row2. but row 3? whilst
+               4 can go in and 4 can go out, it still leaves 2 of the wrong type in there
+
+    hence we need to find all the possible (valid) 'targets' (valid target rows) for a given type to amass, and then
+    determine whether these are all compatible
+
+    so sum all rows and all columns. for each x,y the sum of Cx,y - x,y must == Rx,y - x,y to be valid
+
+    identifying an impossible container is enough?? e.g. is there a container no type can exclusively exist in?
+    */
+    var M = container
+    var n = int32(len(M))
+
+    //fmt.Printf("considering %vx%v matrix:\n%v\n", n, n, M)
+
+    var x = int32(0);
+    var y = int32(0);
+    var Ry = make([]int32, n)
+    var Cx = make([]int32, n)
+    for y = 0; y < n; y++ {
+        for x = 0; x < n; x++ {
+            Cx[y] += M[y][x]
+            Ry[x] += M[y][x]
+        }
+    }
+    //fmt.Printf("row counts: %v\n", Ry)
+    //fmt.Printf("column counts: %v\n", Cx)
+
+    var possible = make([][]int32, n)
+    var in_ = int32(0)
+    var out_ = int32(0)
+
+    // for each container y.. {
+    for y = 0; y < n; y++ {
+        // is type x exclusively existing in there possible?
+        possible = append(possible, make([]int32, 1))
+        for x = 0; x < n; x++ {
+            in_ = Cx[x] - M[y][x]
+            out_ = Ry[y] - M[y][x]
+            //fmt.Printf("[y,x]|[%v,%v] in_: '%v', out: '%v'\n", y, x, in_, out_)
+            if in_ == out_ {
+                // container y can contain type x exclusively
+                possible[y] = append(possible[y], x)
+            }
+        }
 
+        if len(possible[y]) == 0 {
+            //fmt.Printf("cannot exclusively collect any type in container %v\n", y+1)
+            return "Impossible";
+        }
+    }
 
+    return "Possible";
 }
 
 func main() {
-- 
2.23.0


From ceb524d72e1b94161d4a598f854e277fc1fcccd0 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sat, 30 Jun 2018 09:19:28 +0100
Subject: [mod] hackerrank, 'array manipulation', c# solution

-revert to simple for loop, indexed access, removing 'q and next' pairs
for clarity or purpose
---
 .../array.manipulation.cs                     | 27 +++++--------------
 1 file changed, 6 insertions(+), 21 deletions(-)

diff --git a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
index f350676..6968353 100644
--- a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
+++ b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
@@ -39,15 +39,9 @@ class Solution {
             WriteLine($"considering ordered query: {s}");
         }
         */
-        foreach (var next in queries) {
-
-            if (i == 0) {
-              // set up processing pair
-              i = 1;
-              q = next;
-              continue;
-            }
 
+        for (i = 0; i < nq; i++) {
+            q = queries[i];
             idx = q[0];
 
             score += (long)q[2];
@@ -65,8 +59,10 @@ class Solution {
                 max = score;
 
             // next range start
-            idx_next = next[0];
-
+            if (i == nq - 1)
+                idx_next = q[1] + 1;
+            else
+                idx_next = queries[i + 1][0];
             //WriteLine($"idx: {idx}, score: {score}, idx_next: {idx_next}");
 
             // fast forward idx accounting for removals
@@ -78,17 +74,6 @@ class Solution {
                 score -= kvp.Value;
                 d_drop_at_index.Remove(kvp.Key);
             }
-
-            // process last
-            if (i == nq - 1) {
-                idx = next[0];
-                score += (long)next[2];
-                //WriteLine($"idx: {idx}, score: {score} [+= {q[2]}]");
-                if (score > max)
-                    max = score;
-            }
-            q = next;
-            i += 1;
         }
         return max;
     }
-- 
2.23.0


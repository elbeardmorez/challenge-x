From 7618ea5e2310d103ea2f1aab1d2990d723b5e323 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 17 Jul 2019 16:20:40 +0100
Subject: [add] hackerrank, 'almost sorted', javascript port

---
 .../almost.sorted.js                          | 250 ++++++++++++++++++
 1 file changed, 250 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.js b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.js
index 0844b8f..5b87aef 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.js
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.js
@@ -24,8 +24,258 @@ function readLine() {
 
 // Complete the almostSorted function below.
 function almostSorted(arr) {
+    /*
+    sorted | "yes"
+    sortable | "swap l r"
+    sortable | "reverse l r"
+    unsortable | "no"
 
+    // 1 2 5 4 3 13
+    1 2 5 | 4 .. but the previous (5) MUST be after, so include it in the decreasing run
+    1 2 | 5 4 3 | 13 here we look at previous increasing run, the endpoint (2) must be < 3 AND 5 < 13
+    ..then based on size of negative run, either swap (<=3) or reverse (>3)
 
+    // 1 2 55 4 6 13 1 15
+    1 2 55 | 4 .. but .. ""      ""
+    1 2 | 55 4 | 6 .. but a negative run of size 2 is actually a single swap digit
+    1 2 | 55 | 4 6 13 | 1
+
+    // 4 5 9 7 8 6 12
+    4 5 9 | 7 .. but 8 is increasing
+        either 9 is a mistake, or 7 is a mistake
+        should it be: 4 5 | 9 | 7 8 or
+                      4 5 9 | 7 | 8
+        4 5 | 9 | 7
+
+    // 4 5 9 7 11 16 18
+
+    */
+    ////console.log(`[debug] considering set: ${arr}`);
+
+    let l_a = arr.length;
+    let inflections = [];
+    let reversal_required = false;
+    let reversed = false;
+    let swap_required = false;
+    let swapped = false;
+    let left = -1;
+    let right = -1;
+
+    let last = 0;
+    let last_set;
+
+    // simplify main algorithm by removing short edge cases
+    if (l_a === 2) {
+        if (arr[0] < arr[1])
+            console.log(`yes`);
+        else
+            console.log(`yes\nswap 1 2`);
+        return;
+    } else if (l_a === 3) {
+        if (arr[0] < arr[1] && arr[1] < arr[2])
+            // 1 2 3
+            console.log(`yes`);
+        else if (arr[0] > arr[1] && arr[1] > arr[2])
+            // 3 2 1
+            console.log(`yes\nswap 1 3`);
+        else if (arr[0] < arr[2] && arr[1] > arr[2])
+            // 1 3 2
+            console.log(`yes\nswap 2 3`);
+        else
+            // 2 3 1
+            console.log(`no`);
+        return;
+    }
+
+    let direction = arr[1] > arr[0] ? 1 : -1;
+    if (direction === -1) {
+        reversal_required = true;
+        left = 0;
+    }
+
+    // 4 5 9 | 7 | 8 | 6 | 12
+    // 4 5 9 | 7
+    //            7 HAS to move left of 9
+    //            can i swap 7 with 9 ? no, 9 > 8
+    //            only other way is swap 9 for something else
+
+    ////console.log(`[debug] initial direction: ${direction}`);
+    for (let l = 1; l < arr.length; l++) {
+        ////console.log(`[debug] l: ${l}, comparing ${arr[l]} with previous ${arr[l - 1]}`);
+        if (direction > 0 && arr[l] < arr[l - 1]) {
+            // inflection
+            //console.log(`[debug] @ [${l}]${arr[l]}, now ${(direction === 1 ? "de" : "in")}creasing, last: ${last}, swap_required: ${swap_required}, reversal_required: ${reversal_required}`);
+
+            if (swapped || reversed) {
+                //console.log(`[debug] inversion @ [${l}]${arr[l]}, but already swapped / reversed`);
+                console.log(`no`);
+                return;
+            }
+            last_set = false;
+            if (l === l_a - 1) {
+                // inflection on final item
+                if (swap_required) {
+                    // validate swap
+                    if (l - left === 1 && arr[left - 1] < arr[l]) {
+                        // adjacent
+                        right = l;
+                        console.log(`yes\nswap ${left + 1} ${right + 1}`);
+                    } else if (arr[left] > arr[l - 1] &&
+                            arr[left + 1] > arr[l] &&
+                            (left === 0 || arr[left - 1] < arr[l])) {
+                        right = l;
+                        console.log(`yes\nswap ${left + 1} ${right + 1}`);
+                    } else {
+                        //console.log(`[debug] last item inversion, impossible swap`);
+                        console.log(`no`);
+                    }
+                } else {
+                    // 1 2 4 8 7
+                    // swap with previous only possibility
+                    if (arr[l - 2] < arr[l])
+                        console.log(`yes\nswap ${l - 1 + 1} ${l + 1}`);
+                    else {
+                        //console.log(`[debug] last item inversion, impossible swap`);
+                        console.log(`no`);
+                    }
+                }
+                return;
+            } else {
+                // we can peek forward
+                let direction2 = (arr[l + 1] - arr[l]) / Math.abs((arr[l + 1] - arr[l]));
+                //if (l - last === 1) {
+                if (direction2 === direction) {
+                    // next item restores the current direction
+                    if ((arr[l - 1] < arr[l + 1]) &&
+                        (l < 2 || arr[l - 2] < arr[l])) {
+                        // adjacent swap
+                        // 4 5 9 |7| 11 16 18
+                        left = l - 1;
+                        last = l - 1;
+                        last_set = true;
+                        swap_required = 1;
+                        //right = l;
+                        //swapped = true;
+                    } else if (arr[l + 1] < arr[l - 1]) {
+                         // 1 3 6 10 |7| 8
+                         // 1 3 6 10 |5| 8
+                         // next restores increasing direction but l can't be swapped out so l - 1 MUST move or else die
+                         if (l <= 1 || arr[l] > arr[l - 2]) {
+                             if (!swap_required) {
+                                 // 1 3 6 10 |7| 8
+                                 left = l - 1;
+                                 swap_required = true;
+                                 last = left;
+                                 last_set = true;
+                             } else {
+                                 // 1 3 5 10 7 8 12 |6| 11  left=10
+                                 //console.log(`[debug] single error, impossible to rectify this a second time..`);
+                                 console.log(`no`);
+                                 return;
+                             }
+                         } else {
+                             // 1 3 6 10 |5| 8
+                             //console.log(`[debug] cannot swap [${l}]${arr[l]} or [${l - 1}]${arr[l - 1]}`);
+                             console.log(`no`);
+                             return;
+                         }
+                    } else {
+                        // l can swap out
+                        if (!swap_required) {
+                            left = l;
+                            swap_required = true;
+                            last = left;
+                            last_set = true;
+                        } else {
+                            // legal swap?
+                            right = l;
+                            if (((left === 0 || arr[left - 1] < arr[right]) && arr[left + 1] > arr[right]) &&
+                                (arr[right - 1] < arr[left] && (right === l_a - 1 || arr[right + 1] > arr[left]))) {
+                                // 4 5 9 7 8 6 |12|  left=[2]9
+                                // 1 3 5 10 7 8 12 |6| 11  left=[3]10
+                                swapped = true;
+                                //console.log(`[debug] ignoring next inflection`);
+                                continue;
+                            } else {
+                                //console.log(`[debug] illegal swap`);
+                                console.log(`no`);
+                                return;
+                            }
+                        }
+                    }
+                }
+            }
+            inflections.push(l);
+            direction *= -1;
+            if (!last_set)
+                last = l;
+        } else if (direction < 0 && arr[l] > arr[l - 1]) {
+            // inflection
+            //console.log(`[debug] @ [${l}]${arr[l]}, now ${(direction === 1 ? "de" : "in")}creasing, last: ${last}, swap_required: ${swap_required}, reversal_required: ${reversal_required}`);
+            if (swapped || reversed) {
+                //console.log(`[debug] inversion @ [${l}]${arr[l]}, but already swapped / reversed`);
+                console.log(`no`);
+                return;
+            }
+            if (swap_required) {
+                right = l - 1;
+                if (right - left === 1) {
+                    // adjacent swap possible ?
+                    // 4 5 9 7 |11| 16 18 | yes
+                    // [11]894947 [12]125082 |[13]137123| [14]137276 left: 11  | no
+                    if (arr[left - 1] < arr[l] &&
+                        (last === 0 || arr[left] < arr[right + 1])) {
+                        swapped = true;
+                    }
+                }
+            } else if (!swap_required && l - last > 1) {
+                // range reversal possible?
+                reversal_required = true;
+                // 10 9 8 7 15 16
+                left = last - 1;
+                right = l - 1;
+                if (arr[left - 1] < arr[l] &&
+                    (last === 0 || arr[left - 1] < arr[right])) {
+                    reversed = true;
+                } else {
+                    //console.log(`[debug] inversion @ [${l}]${arr[l]}, but impossible reversal required`);
+                    console.log(`no`);
+                    return;
+                }
+            }
+            inflections.push(l);
+            direction *= -1;
+            last = l;
+        }
+    }
+
+    //console.log(`[debug] end`);
+    if (swapped)
+        // single valid swap and made it to the end without further anomalies
+        console.log(`yes\nswap ${left + 1} ${right + 1}`);
+    else if (reversed)
+        // single valid reverse and made it to the end without further anomalies
+        console.log(`yes\nreverse ${left + 1} ${right + 1}`);
+    else if (inflections.length === 0) {
+        // dependent up last idx
+        if (direction > 0)
+            // 1 2 3 4
+            console.log(`yes`);
+        else
+            // 10 9 8 7  // full reverse
+            console.log(`yes\nreverse 1 ${l_a}`);
+    } else if (inflections.length === 1 && direction === -1) {
+        // decreasing subset to end
+        left = last - 1;
+        right = l_a - 1;
+        if (arr[right] > arr[left - 1])
+            console.log(`yes\nreverse ${last - 1 + 1} ${l_a - 1 + 1}`);
+        else {
+            //console.log(`[debug] impossible reversal, incompatible end-points`);
+            console.log(`no`);
+        }
+    } else
+        console.log(`no`);
 }
 
 function main() {
-- 
2.23.0


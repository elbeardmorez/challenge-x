From c64950558e7ba1b7113367d47257e542fa0595fc Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 20 Sep 2019 07:37:34 +0100
Subject: [add] hackerrank, 'cutting boards', go port

---
 .../cutting.boards.go                         | 89 +++++++++++++++++++
 1 file changed, 89 insertions(+)

diff --git a/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.go b/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.go
index a5e27b2..d1bb60d 100644
--- a/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.go
+++ b/hackerrank/algorithms.-.greedy.-.hard.-.cutting.boards/cutting.boards.go
@@ -13,7 +13,96 @@ import (
 
 // Complete the boardCutting function below.
 func boardCutting(cost_y []int32, cost_x []int32) int32 {
+    /*
+    xxxx
+    xxxx
 
+    cutting horizontally yields 3 x cuts x1,x2,x3 to get 4 2x1 pieces, then 4 y1 cuts ..7 cuts total
+    or.. 1 y1 cut and 6 x cuts 2 x1, 2 x2, 2 x3 ..7 cuts total
+
+    xxxx
+    xxxx
+    xxxx
+
+    x1,x2,x3 ..4 y1,y2 ..11 cuts
+
+    w x h - 1 cuts total
+    optimise cutting most expensive first
+
+    maintain piece count per column / row
+    e.g 3x2
+      [111]                 [1 11]                 [1 1 1]                 [2 2 2]
+    [1]xxx  -> x1 cut ->  [2]x xx  -> x2 cut ->  [3]x x x  -> y1 cut -> [3] x x x
+    [1]xxx                [2]x xx                [3]x x x
+                                                                        [3] x x x
+      [1111]                 [2222]                [222 2]
+    [1]xxxx                [1]xxxx               [2]xxx x
+    [1]xxxx  -> y1 cut ->  [1]xxxx  -> x3 cut -> [2]xxx x
+    [1]xxxx
+                           [1]xxxx               [2]xxx x
+
+    so we just have horizontal and vertical segments to track per cut
+
+    chose cut plain based on max(cost_x_i, cost_y_i)
+    */
+
+    l_x := int32(len(cost_x))
+    l_y := int32(len(cost_y))
+
+    x_idx_sorted := make([][]int32, l_x)
+    for l := int32(0); l < l_x; l++ {
+        x_idx_sorted[l] = []int32 {cost_x[l], l}
+    }
+    sort.Slice(x_idx_sorted, func(i1, i2 int) bool { return x_idx_sorted[i1][0] < x_idx_sorted[i2][0]})
+    y_idx_sorted := make([][]int32, l_y)
+    for l := int32(0); l < l_y; l++ {
+        y_idx_sorted[l] = []int32 {cost_y[l], l}
+    }
+    sort.Slice(y_idx_sorted, func(i1, i2 int) bool { return y_idx_sorted[i1][0] < y_idx_sorted[i2][0]})
+
+    //fmt.Printf("x_idx_sorted: %v\n", x_idx_sorted)
+    //fmt.Printf("y_idx_sorted: %v\n", y_idx_sorted)
+
+    cost := int64(0)
+    l1 := l_x - 1
+    l2 := l_y - 1
+    x_segments := int64(1)
+    y_segments := int64(1)
+
+    mod_v := int64(math.Pow(10, 9) + 7)
+
+    for l1 + l2 > -2 {
+        //fmt.Printf("l1: %v, l2: %v\n", l1, l2)
+        for l2 == -1 && l1 > -1 ||
+              (l1 > -1 && x_idx_sorted[l1][0] >=
+                           y_idx_sorted[l2][0]) {
+            //fmt.Printf("cutting along x%v @ cost: %v x %v\n",
+            //           x_idx_sorted[l1][1], x_idx_sorted[l1][0], y_segments)
+            cost = (cost + int64(x_idx_sorted[l1][0]) * y_segments) % mod_v
+            x_segments += 1
+            l1 -= 1
+            if l1 == -1 {
+                break
+            }
+            //fmt.Printf("l1: %v, l2: %v\n", l1, l2)
+        }
+
+        for l1 == -1 && l2 > -1 ||
+              (l2 > -1 && y_idx_sorted[l2][0] >=
+                           x_idx_sorted[l1][0]) {
+            //fmt.Printf("cutting along y%v @ cost: %v x %v\n",
+            //           y_idx_sorted[l2][1], y_idx_sorted[l2][0], x_segments)
+            cost = (cost + int64(y_idx_sorted[l2][0]) * x_segments) % mod_v
+            y_segments += 1
+            l2 -= 1
+            if l2 == -1 {
+                break
+            }
+            //fmt.Printf("l1: %v, l2: %v\n", l1, l2)
+        }
+    }
+
+    return int32(cost)
 }
 
 func main() {
-- 
2.23.0


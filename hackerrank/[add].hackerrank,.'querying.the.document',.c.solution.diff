From 6e4046051d348af76d65a24de092d271019e85b5 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 27 Jun 2018 14:21:03 +0100
Subject: [add] hackerrank, 'querying the document', c solution

---
 .../querying.the.document.c                   | 92 ++++++++++++++++++-
 1 file changed, 88 insertions(+), 4 deletions(-)

diff --git a/hackerrank/c.-.functions.-.hard.-.querying.the.document/querying.the.document.c b/hackerrank/c.-.functions.-.hard.-.querying.the.document/querying.the.document.c
index 075d71f..e276e17 100644
--- a/hackerrank/c.-.functions.-.hard.-.querying.the.document/querying.the.document.c
+++ b/hackerrank/c.-.functions.-.hard.-.querying.the.document/querying.the.document.c
@@ -4,21 +4,105 @@
 #include<assert.h>
 #define MAX_CHARACTERS 1005
 #define MAX_PARAGRAPHS 5
+#define MAX_ITEMS 10
 
 char* kth_word_in_mth_sentence_of_nth_paragraph(char**** document, int k, int m, int n) {
-
+    return document[n-1][m-1][k-1];
 }
 
-char** kth_sentence_in_mth_paragraph(char**** document, int k, int m) { 
-
+char** kth_sentence_in_mth_paragraph(char**** document, int k, int m) {
+    return document[m-1][k-1];
 }
 
 char*** kth_paragraph(char**** document, int k) {
+    return document[k-1];
+}
 
+char* array_grow(char** array, int size) {
+    char** array_new = (char**)malloc((size + MAX_ITEMS) * sizeof(char*));
+    for (int i = 0; i < size; i++)
+        array_new[i] = array[i];
+    free(array);
+    return array_new;
 }
 
-char**** get_document(char* text) {
+void push_word(char* structure, int *iw_start, int i, char*** words, int* cw ) {
+    structure[i] = '\0';
+    if (((*cw) + 1)  % MAX_ITEMS == 0)
+        *words = (char**)array_grow((char**)(*words), *cw);
+    (*words)[*cw] = &structure[*iw_start];
+    (*cw)++;
+    *iw_start = i + 1;
+}
 
+char**** get_document(char* text) {
+    // allocate copy
+    // scan through chars, each space/full stop/new line delimiter, set as \0
+    // terminated word, push word to array of ..similarly push words to sentence,
+    // sentences to paragraph where appropriate
+    int len = strlen(text);
+    char* structure = malloc((len + 1) * sizeof(char*));
+    strcpy(structure, text);
+    structure[len] = '\0';
+
+    char** words = (char**)malloc(MAX_ITEMS * sizeof(char*));
+    char*** sentences = (char***)malloc(MAX_ITEMS * sizeof(char*));
+    char**** paragraphs = (char****)malloc(MAX_ITEMS * sizeof(char*));
+
+    int cw = 0;
+    int cs = 0;
+    int cp = 0;
+
+    int i = 0;
+    int iw_start = 0;
+
+    int process = 1;
+    while (process == 1) {
+        if (text[i] == '\0') {
+            process = 0;
+            structure[i] = '\n'; // force last paragraph processing
+        }
+        switch (structure[i]) {
+            case '\n':
+                // push paragraph
+                structure[i] = '\0';
+                iw_start++;
+                if ((cp + 1) % MAX_ITEMS == 0)
+                    paragraphs = (char****)array_grow((char**)paragraphs, cp);
+                char*** _sentences = malloc(cs * sizeof(char*));
+                memcpy(_sentences, sentences, cs * sizeof(char*));
+                paragraphs[cp] = _sentences;
+                cp++;
+                // reset sentence count
+                cs = 0;
+                break;
+            case '.':
+                // push last word
+                push_word(structure, &iw_start, i, &words, &cw);
+                // push sentence
+                if ((cs + 1) % MAX_ITEMS == 0)
+                    sentences = (char***)array_grow((char**)sentences, cs);
+                char** _words = malloc(cw * sizeof(char*));
+                memcpy(_words, words, cw * sizeof(char*));
+                sentences[cs] = _words;
+                cs++;
+                // reset word count
+                cw = 0;
+                break;
+            case ' ':
+                // push word
+                push_word(structure, &iw_start, i, &words, &cw);
+                break;
+            default:
+                break;
+        }
+        i++;
+    }
+    // free unused
+    realloc(paragraphs, cp * sizeof(char*));
+    free(sentences);
+    free(words);
+    return paragraphs;
 }
 
 char* get_input_text() {	
-- 
2.23.0


From a67d4a7889d4d5d41495b1809bba9d8b9d60bae9 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 11 Oct 2019 08:47:57 +0100
Subject: [add] hackerrank, 'absolute permutation', javascript port

---
 .../absolute.permutation.js                   | 65 ++++++++++++++++++-
 1 file changed, 62 insertions(+), 3 deletions(-)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.absolute.permutation/absolute.permutation.js b/hackerrank/algorithms.-.implementation.-.medium.-.absolute.permutation/absolute.permutation.js
index 273fc76..056f74e 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.absolute.permutation/absolute.permutation.js
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.absolute.permutation/absolute.permutation.js
@@ -26,8 +26,68 @@ function readLine() {
 
 // Complete the absolutePermutation function below.
 function absolutePermutation(n, k) {
-
-
+    /*
+    no constraint on permutation type
+    absolute difference must be k
+    smallest lexographical.. 10 > 2
+    if k > n / 2, impossible
+
+    n=15 k=8 | invalid
+    1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
+    9 10 11 12 13 14 15  1  2  3  4  5  6  7  8  // shift left
+    8  9 10 11 12  3 14 15  1  2  3  4  5  6  7  // shift right
+
+    n=6 k=4 | invalid
+    1 2 3 4 5 6
+    5 6 1 2 3 4
+
+    for k <= n / 2, use 'groups of x' switches..
+
+    n=15 k=3 | invalid
+    1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
+    4  5  6  1  2  3 10 11 12  7  8  9  ?  ?  ?
+
+    so only n % k = 0 and (n / k) % 2 = 0 cases valid
+
+    n=6 k=3
+    1 2 3 4 5 6
+    4 5 6 1 2 3  // no diff left / right shift
+
+    if k = 0 then 0-rotation valid
+    valid lexographic dependent permutation order example?
+
+    n=3 k=1
+    1 2 3
+
+    n=4 k=3
+    1 2 3 4
+
+     n  k
+    92 14 | 92/14 = 6.? .. -1
+    96  2 | 96/2 = 48 .. which is divisible by 2
+    98  7 | 98/7 = 14 .. which is divisible by 2
+
+    */
+
+    let range = (n1, n2, x) => { let res = []; for (let l = n1; l < n2; l += x) { res.push(l); }; return res; };
+
+    //console.log(`n = ${n}, k = ${k}`);
+    if (k === 0)
+        return range(1, n + 1, 1);
+    else if (n % k === 0 && (n / k) % 2 === 0) {
+        let switched_groups = [];
+        for (let x = 0; x < parseInt(parseInt(n / k) / 2); x++) {
+            let x1 = x * 2 * k + 1;
+            let x2 = x * (2 * k) + k + 1;
+            //console.log(`subsets starting: ${x1} | ${x2}`);
+            switched_groups.push(range(x2, x2 + k, 1));
+            switched_groups.push(range(x1, x1 + k, 1));
+        }
+        //console.log(`${switched_groups}`);
+        return switched_groups.reduce((a, x) => { return a.concat(x); } );
+    } else
+        return [-1];
+    
 }
 
 function main() {
@@ -43,7 +103,6 @@ function main() {
         const k = parseInt(nk[1], 10);
 
         let result = absolutePermutation(n, k);
-
         ws.write(result.join(" ") + "\n");
     }
 
-- 
2.23.0


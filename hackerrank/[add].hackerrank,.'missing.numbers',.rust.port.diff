From 7b3963f0d09ec6b9c3760c02670dca690ad8c555 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sat, 7 Mar 2020 12:57:11 +0000
Subject: [add] hackerrank, 'missing numbers', rust port

---
 .../missing.numbers.rs                        | 88 ++++++++++++++++++-
 1 file changed, 87 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.search.-.easy.-.missing.numbers/missing.numbers.rs b/hackerrank/algorithms.-.search.-.easy.-.missing.numbers/missing.numbers.rs
index 75b9783..99f7253 100644
--- a/hackerrank/algorithms.-.search.-.easy.-.missing.numbers/missing.numbers.rs
+++ b/hackerrank/algorithms.-.search.-.easy.-.missing.numbers/missing.numbers.rs
@@ -1,3 +1,89 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
+use std::collections::HashMap;
+use std::cmp::Ordering;
 
+fn missing_numbers(arr: &mut Vec<i32>, brr: &mut Vec<i32>, res: &mut Vec<i32>) {
+
+    fn key_identity(x: i32) -> i32 {
+        return x;
+    }
+
+    fn groupby<'x>(input: &[i32], groups: &'x mut HashMap<i32, Box<Vec<i32>>>, f_key: &dyn Fn(i32) -> i32) {
+        let mut k: i32;
+        for x in input {
+            k = f_key(*x);
+            if !groups.contains_key(&k) {
+                groups.insert(k, Box::new(vec!()));
+            }
+            (*groups).get_mut(&k).unwrap().push(*x);
+        }
+    }
+
+    fn balanced_sort_predicate (x1: &i32, x2: &i32) -> Ordering {
+        if *x1 > *x2 {
+            return Ordering::Greater;
+        } else if *x1 < *x2 {
+            return Ordering::Less;
+        }
+        return Ordering::Equal;
+    };
+    //println!("arr: {:?}", arr);
+    arr.sort_by(balanced_sort_predicate);
+    //println!("sorted arr: {:?}", arr);
+    //println!("brr: {:?}", brr);
+    brr.sort_by(balanced_sort_predicate);
+    //println!("sorted brr: {:?}", brr);
+    let mut groups_a: HashMap<i32, Box<Vec<i32>>> = HashMap::new();
+    groupby(arr, &mut groups_a, &key_identity);
+    let mut groups_b = HashMap::new();
+    groupby(brr, &mut groups_b, &key_identity);
+    let missing = res;
+    let mut count: usize;
+    for (k, items) in groups_b {
+        count = items.len();
+        //println!("k: {:?}, count: {:?}", k, count);
+        if !groups_a.contains_key(&k) || groups_a[&k].len() < count {
+            (*missing).push(k);
+        }
+    }
+    missing.sort_by(balanced_sort_predicate);
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_end_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    next_line(&mut line);  // ignore count
+    next_line(&mut line);
+    let mut data = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    next_line(&mut line);  // ignore count
+    next_line(&mut line);
+    let mut data2 = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    let mut res: Vec<i32> = vec!();
+    missing_numbers(&mut data, &mut data2, &mut res);
+    f.write_all(res.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(" ").as_bytes()).expect("file io error");
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.26.0


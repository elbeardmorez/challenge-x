From a0ab0c1565bfb12c10580af185a7b0924ce1d70a Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Tue, 23 Jul 2019 10:18:21 +0100
Subject: [add] hackerrank, 'beautiful triplets', c# port

---
 .../beautiful.triplets.cs                     | 57 +++++++++++++++++++
 1 file changed, 57 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cs b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cs
index 888ffff..f147393 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cs
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cs
@@ -16,8 +16,65 @@ class Solution {
 
     // Complete the beautifulTriplets function below.
     static int beautifulTriplets(int d, int[] arr) {
+        /*
+        map containing pairs of valid jump pairs starting at that idx
+        (1, 2, 3, 4)  d=1
+        [1] 1|2 1|3 1|4
+        [2] 2|3 2|4
+        [3] 3|4
 
+        for any number in map
+          for each pair in that set
+        add the number of entries in the second idx of the pair's map entry set
+        1|2 -> 1 + each [2] = len([2])
+        1|3 -> 1 + each [3] = len([3])
+        1|4 -> 1 + each [4] = len([4])
+        2|3 -> 2 + each [3] = len([3])
+        ..
+        sum total
 
+        map of array of jump targets is cheaper
+        */
+
+        var l_a = arr.Length;
+        //Console.WriteLine($"considering [{l_a}] {String.Join(" ", arr.Select(x => x.ToString()))}");
+        if (l_a < 3)
+            return 0;
+        var sum_ = 0;
+        var map_ = new Dictionary<int, List<int>>();
+        var order = new List<int>();
+        int l2, v, diff;
+        for (var l = 0; l < l_a; l++) {
+            v = arr[l];
+            var arr2 = new List<int>();
+            l2 = 1;
+            while (true) {
+                if (l + l2 >= l_a)
+                    break;
+                diff = arr[l + l2] - v;
+                if (diff > d)
+                    break;
+                else if (diff == d)
+                    arr2.Add(l + l2);
+                l2 += 1;
+            }
+            if (arr2.Count > 0) {
+                order.Add(l);
+                map_[l] = arr2;
+                //Console.WriteLine($"adding idx: {l} | {String.Join(" ", arr2.Select(x => x.ToString()))}");
+            }
+        }
+
+        foreach (var l_ in order) {
+            foreach (var l2_ in map_[l_]) {
+                if (map_.ContainsKey(l2_)) {
+                    sum_ += map_[l2_].Count;
+                    //Console.WriteLine($"l: {l_}, l2: {l2_}, sum: {sum_}");
+                }
+            }
+        }
+        Console.WriteLine($"sum: {sum_}");
+        return sum_;
     }
 
     static void Main(string[] args) {
-- 
2.23.0


From 1a17f88316a611582295123d44ada8cf780f4d1a Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Mon, 16 Mar 2020 07:35:55 +0000
Subject: [add] hackerrank, 'gridland challenge', rust port

---
 .../grid.challenge.rs                         | 68 ++++++++++++++++++-
 1 file changed, 67 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.greedy.-.easy.-.grid.challenge/grid.challenge.rs b/hackerrank/algorithms.-.greedy.-.easy.-.grid.challenge/grid.challenge.rs
index 75b9783..97aa52e 100644
--- a/hackerrank/algorithms.-.greedy.-.easy.-.grid.challenge/grid.challenge.rs
+++ b/hackerrank/algorithms.-.greedy.-.easy.-.grid.challenge/grid.challenge.rs
@@ -1,3 +1,69 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
 
+fn grid_challenge(grid: &Vec<String>) -> &str {
+    //println!("grid: {:?}", grid);
+    let n1 = grid[0].len(); // width
+    let n2 = grid.len(); // height
+    let mut grid_: Vec<Vec<char>> = vec!();
+    let mut idx = 0;
+    for s in grid {
+        grid_.push(s.chars().collect::<Vec<char>>());
+        grid_[idx].sort();
+        //println!("idx: {:?}, chars: {:?}", idx, grid_[idx]);
+        idx += 1;
+    }
+    let mut last: char;
+    for l1 in 0..n1 {
+        last = grid_[0][l1];
+        for l2 in 1..n2 {
+            if grid_[l2][l1] < last {
+                return "NO";
+            }
+            last = grid_[l2][l1];
+        }
+    }
+    return "YES";
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_end_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    next_line(&mut line);  // ignore count
+    next_line(&mut line);  // case count
+    while line != "" {
+        let k = line.parse::<i32>().unwrap();
+        let mut data: Vec<String> = vec!();
+        next_line(&mut line);
+        for _ in 0..k {
+            data.push(line.clone());
+            next_line(&mut line);
+        }
+        let res = grid_challenge(&data);
+        f.write_all(res.as_bytes()).expect("file io error");
+        f.write_all(b"\n").expect("file io error");
+    }
+}
-- 
2.26.0


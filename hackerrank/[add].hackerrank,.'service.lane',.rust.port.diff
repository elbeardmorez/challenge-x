From 854478730050ed7742f3d177b157b4eda31c157b Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 8 Dec 2019 23:16:49 +0000
Subject: [add] hackerrank, 'service lane', rust port

---
 .../service.lane.rs                           | 61 +++++++++++++++++++
 1 file changed, 61 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.service.lane/service.lane.rs b/hackerrank/algorithms.-.implementation.-.easy.-.service.lane/service.lane.rs
index 75b9783..4269b13 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.service.lane/service.lane.rs
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.service.lane/service.lane.rs
@@ -1,3 +1,64 @@
 // Enter your code here 
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
 
+fn min_(a: &[i32]) -> i32 {
+    let mut res: i32 = a[0];
+    for l in 1..a.len() {
+        if a[l] < res {
+            res = a[l];
+        }
+    }
+    return res;
+}
+
+fn service_lane(widths: Vec<i32>, cases: Vec<Vec<i32>>, res: &mut Vec<i32>) {
+    //println!("widths: {:?}, cases: {:?}", widths, cases);
+    for case_ in cases {
+        res.push(min_(&widths[(case_[0] as usize)..((case_[1] + 1) as usize)]));
+    }
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_right_matches('\n'));
+    }
+}
+
+fn main() {
+
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::from("-");
+    let data: Vec<i32>;
+
+    next_line(&mut line);
+    next_line(&mut line);
+    data = line.split(' ').map(|s| s.parse::<i32>().unwrap()).collect();
+    let mut data2: Vec<Vec<i32>> = Vec::new();
+    next_line(&mut line);
+    while line.len() > 0 {
+        data2.push(line.split(' ').map(|s| s.parse::<i32>().unwrap()).collect::<Vec<i32>>());
+        next_line(&mut line);
+    }
+    let mut res: Vec<i32> = Vec::new();
+    service_lane(data, data2, &mut res);
+    let res_: String = res.iter().map(|i| i.to_string()).collect::<Vec<String>>().join("\n");
+    let _ = f.write_all(res_.as_bytes());
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.23.0


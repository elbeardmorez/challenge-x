From 43470a0b0b1caa6d45926de2e19d02ec74575dff Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 17 Jun 2018 18:34:35 +0100
Subject: [add] hackerrank, 'functions and fractals recursive trees', shell
 solution

---
 .../functions.and.fractals.recursive.trees.sh | 117 ++++++++++++++++++
 1 file changed, 117 insertions(+)
 create mode 100644 hackerrank/linux.shell.-.bash.-.hard.-.functions.and.fractals.recursive.trees/functions.and.fractals.recursive.trees.sh

diff --git a/hackerrank/linux.shell.-.bash.-.hard.-.functions.and.fractals.recursive.trees/functions.and.fractals.recursive.trees.sh b/hackerrank/linux.shell.-.bash.-.hard.-.functions.and.fractals.recursive.trees/functions.and.fractals.recursive.trees.sh
new file mode 100644
index 0000000..532206c
--- /dev/null
+++ b/hackerrank/linux.shell.-.bash.-.hard.-.functions.and.fractals.recursive.trees/functions.and.fractals.recursive.trees.sh
@@ -0,0 +1,117 @@
+rows=63
+columns=100
+read -n1 iteration
+
+# ranges
+## i1 = 1-32  | 32
+## i2 = 33-48 | 16
+## i3 = 49-56 | 8
+## i4 = 57-60 | 4
+## i5 = 61-62 | 2
+initial_branch_size=16
+tree_forks=(0 $[$initial_branch_size + 1])
+tree_limits=(0 $[2 * initial_branch_size])
+branch_size=initial_branch_size
+# generate limits
+while [ 1 -eq 1 ]; do
+  tree_limit=$[${tree_limits[${#tree_limits[@]} - 1]} + $branch_size]
+  branch_size=$[branch_size / 2]
+  tree_fork=$[${tree_limits[${#tree_limits[@]} - 1]} + 1 + $branch_size]
+  tree_forks[${#tree_forks[@]}]=$tree_fork
+  tree_limits[${#tree_limits[@]}]=$tree_limit
+  [ $branch_size -eq 1 ] && break
+done
+#echo "tree_forks: ${tree_forks[@]}" # tree_forks: 0 17 41 53 59 62
+#echo "tree_limits: ${tree_limits[@]}" # tree_limits: 0 32 48 56 60 62
+
+blank_line=$(printf "_%.0s" `seq 1 1 100`)
+last_line=$blank_line
+next_line=""
+
+function build_line {
+  # set next to 1 or _ for a given position (and interation!)
+  y=$1
+
+  next_char="_"
+  limit=${tree_limits[$iteration]}
+  [ $y -gt $limit ] && next_line=$blank_line && return # blank line!
+  if [ $y -eq 1 ]; then
+    # root
+    next_line="${last_line:0:49}1${last_line:50:99}"
+    #echo "1| $next_line"
+    return
+  fi
+
+  # deduce row type, iteration # and stem vs branch
+  iter=0
+  limit=0
+  fork=0
+  local idx=0
+  for idx in `seq 1 1 ${#tree_limits[@]}`; do
+    limit=${tree_limits[$idx]}
+    if [ $limit -ge $y ]; then
+      iter=$idx
+      limit=${tree_limits[$iter]}
+      fork=${tree_forks[$iter]}
+      break
+    fi
+    idx=$[$idx + 1]
+  done
+  #echo "row: '$y', iter: '$iter', fork: '$fork', limit: '$limit'"
+
+  [ $y -lt $fork ] && return  # repeat line
+
+  # branching logic
+  #echo "row: '$y' branching"
+
+  line=""
+  branch_dir=0
+  next_chars=""
+  x=0
+  while [ $x -lt $columns ]; do
+    x_prev=${last_line:x:1}
+    if [ "x$x_prev" == "x1" ]; then
+      #echo "col: $x, logic!"
+      if [ $y -eq $fork ]; then
+        # split
+        line="${line:0:$[${#line[@]} - 2]}"
+        next_chars="1_1"
+        x=$[$x + 1]
+      elif [ $branch_dir -eq 0 ]; then
+        # left branch
+        line="${line:0:$[${#line[@]} - 2]}"
+        next_chars="1_"
+        branch_dir=1
+      else
+        # left branch
+        next_chars="_1"
+        x=$[$x + 1]
+        branch_dir=0
+      fi
+    else
+      next_chars="_"
+    fi
+    line="${line}${next_chars}"
+    x=$[$x + 1]
+  done
+  next_line=$line
+  #echo "$y| $next_line"
+}
+
+declare -a lines=()
+idx=0
+while [ $idx -lt $rows ]; do
+  # no subshells!
+  build_line $[$idx + 1]
+  #echo "$idx| $next_line"
+  lines[$idx]=$next_line
+  last_line=$next_line
+  idx=$[$idx + 1]
+done
+
+# output reverse
+idx=$[$rows - 1]
+while [ $idx -ge 0 ]; do
+  echo ${lines[$idx]}
+  idx=$[$idx - 1]
+done
-- 
2.23.0


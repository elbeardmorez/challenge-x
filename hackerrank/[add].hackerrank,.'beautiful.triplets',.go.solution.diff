From 155af45a3a76d902033f6d5a05c1ccdff9ef92b4 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 21 Jul 2019 23:31:10 +0100
Subject: [add] hackerrank, 'beautiful triplets', go solution

---
 .../beautiful.triplets.go                     | 59 +++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.go b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.go
index 3f8b3e3..09e6fe6 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.go
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.go
@@ -11,7 +11,66 @@ import (
 
 // Complete the beautifulTriplets function below.
 func beautifulTriplets(d int32, arr []int32) int32 {
+    /*
+    map containing pairs of valid jump pairs starting at that idx
+    (1, 2, 3, 4)  d=1
+    [1] 1|2 1|3 1|4
+    [2] 2|3 2|4
+    [3] 3|4
+
+    for any number in map
+      for each pair in that set
+    add the number of entries in the second idx of the pair's map entry set
+    1|2 -> 1 + each [2] = len([2])
+    1|3 -> 1 + each [3] = len([3])
+    1|4 -> 1 + each [4] = len([4])
+    2|3 -> 2 + each [3] = len([3])
+    ..
+    sum total
+
+    map of array of jump targets is cheaper
+    */
+
+    l_a := len(arr)
+    //fmt.Printf("considering [%v] %v\n", l_a, arr)
+    if l_a < 3 {
+        return int32(0)
+    }
+    sum_ := 0
+
+    map_ := make(map[int][]int, l_a / 2)
+    order := []int{}
+    for l := 0; l < l_a; l++ {
+        v := arr[l]
+        arr2 := []int{}
+        l2 := 1
+        for {
+            if l+l2 >= l_a {
+                break;
+            }
+            diff := arr[l+l2] - v
+            if diff > d {
+                break
+            } else if diff == d {
+                arr2 = append(arr2, l+l2)
+            }
+            l2 += 1
+        }
+        if len(arr2) > 0 {
+            order = append(order, l)
+            map_[l] = arr2
+        }
+    }
 
+    for _, l := range(order) {
+        for _, l2 := range(map_[l]) {
+            next_, ok := map_[l2]
+            if ok {
+                sum_ += len(next_)
+            }
+        }
+    }
+    return int32(sum_)
 }
 
 func main() {
-- 
2.23.0


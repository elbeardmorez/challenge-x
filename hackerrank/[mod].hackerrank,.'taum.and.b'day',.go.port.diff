From 7ad9dc5584a2fe77b8440c48bb4353a6ed875862 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 28 Jul 2019 10:06:35 +0100
Subject: [mod] hackerrank, 'taum and b'day', go port

-'math/big' implementation
---
 .../taum.and.b'day.go                         | 31 +++++++++++++------
 1 file changed, 21 insertions(+), 10 deletions(-)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.taum.and.b'day/taum.and.b'day.go b/hackerrank/algorithms.-.implementation.-.easy.-.taum.and.b'day/taum.and.b'day.go
index c0c6892..5b7e8b1 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.taum.and.b'day/taum.and.b'day.go
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.taum.and.b'day/taum.and.b'day.go
@@ -7,7 +7,7 @@ import (
     "os"
     "strconv"
     "strings"
-    "math"
+    "math/big"
 )
 
 /*
@@ -21,25 +21,36 @@ import (
  *  4. INTEGER wc
  *  5. INTEGER z
  */
-func taumBday(b int32, w int32, bc int32, wc int32, z int32) int64 {
+func taumBday(b_ int32, w_ int32, bc_ int32, wc_ int32, z_ int32) int64 {
     // Write your code here
-
-    cost := func (convert int32) int64 {
-        return int64(w + convert) * int64(wc) + int64(math.Abs(float64(convert))) * int64(z) + int64((b - convert)) * int64(bc)
+    b := big.NewInt(int64(b_))
+    w := big.NewInt(int64(w_))
+    bc := big.NewInt(int64(bc_))
+    wc := big.NewInt(int64(wc_))
+    z := big.NewInt(int64(z_))
+
+    //return (w + convert) * wc + abs(convert) * z + (b - convert) * bc
+    cost := func (convert *big.Int) *big.Int {
+        __ := new(big.Int)
+        sum_ := new(big.Int)
+        sum_.Add(sum_, __.Mul(__.Add(w, convert), wc))
+        sum_.Add(sum_, __.Mul(__.Abs(convert), z))
+        sum_.Add(sum_, __.Mul(__.Sub(b, convert), bc))
+        return sum_
     }
 
     //fmt.Printf("considering black: %v@%v vs white: %v@%v with conversion cost: %v\n", b, bc, w, wc, z)
 
-    conv := int32(0)
+    conv := new(big.Int)
     min_cost := cost(conv)
 
-    if cost(-1) < min_cost {
-        min_cost = cost(-1 * w)
-    } else if cost(1) < min_cost {
+    if cost(big.NewInt(-1)).Cmp(min_cost) < 0 {
+        min_cost = cost(new(big.Int).Neg(w))
+    } else if cost(big.NewInt(1)).Cmp(min_cost) < 0 {
         min_cost = cost(b)
     }
 
-    return min_cost
+    return min_cost.Int64()
 }
 
 func main() {
-- 
2.23.0


From 1a9236a3bf892d4d1f007f596439c599534ba92a Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 25 Jul 2019 17:24:12 +0100
Subject: [add] hackerrank, 'beautiful triplets', c++ port

---
 .../beautiful.triplets.cpp                    | 56 +++++++++++++++++++
 1 file changed, 56 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cpp b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cpp
index feaa53a..d2b086d 100644
--- a/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cpp
+++ b/hackerrank/algorithms.-.implementation.-.easy.-.beautiful.triplets/beautiful.triplets.cpp
@@ -6,6 +6,62 @@ vector<string> split_string(string);
 
 // Complete the beautifulTriplets function below.
 int beautifulTriplets(int d, vector<int> arr) {
+    /*
+    map containing pairs of valid jump pairs starting at that idx
+    (1, 2, 3, 4)  d=1
+    [1] 1|2 1|3 1|4
+    [2] 2|3 2|4
+    [3] 3|4
+
+    for any number in map
+      for each pair in that set
+    add the number of entries in the second idx of the pair's map entry set
+    1|2 -> 1 + each [2] = len([2])
+    1|3 -> 1 + each [3] = len([3])
+    1|4 -> 1 + each [4] = len([4])
+    2|3 -> 2 + each [3] = len([3])
+    ..
+    sum total
+
+    map of array of jump targets is cheaper
+    */
+    int l_a = arr.size();
+    //cout << "considering [" << l_a << "] " << arr << endl)
+    if (l_a < 3) {
+        return 0;
+    }
+    int sum_ = 0;
+
+    map<int, vector<int>> map_;
+    vector<int> order;
+    for (int l = 0; l < l_a; l++) {
+        int v = arr[l];
+        vector<int> arr2;
+        int l2 = 1;
+        while (true) {
+            if (l + l2 >= l_a)
+                break;
+            int diff = arr[l + l2] - v;
+            if (diff > d)
+                break;
+            else if (diff == d)
+                arr2.push_back(l+l2);
+            l2 += 1;
+        }
+        if (arr2.size() > 0) {
+            order.push_back(l);
+            map_[l] = arr2;
+        }
+    }
+
+    for (auto itr = order.begin(); itr != order.end(); ++itr) {
+        for (auto itr2 = map_[*itr].begin(); itr2 != map_[*itr].end(); ++itr2) {
+            if ((map_.find(*itr2) != map_.end()))
+                sum_ += map_[*itr2].size();
+        }
+    }
+
+    return sum_;
 }
 
 int main()
-- 
2.23.0


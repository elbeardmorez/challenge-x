From bcaa0731d0f403dde6b397123db1ed3b34cf7109 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 29 Sep 2019 09:03:54 +0100
Subject: [add] hackerrank, 'reverse shuffle merge', python port

---
 .../reverse.shuffle.merge.py                  | 190 ++++++++++++++++++
 1 file changed, 190 insertions(+)

diff --git a/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.py b/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.py
index d30a74c..fd35b65 100644
--- a/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.py
+++ b/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.py
@@ -6,9 +6,199 @@ import random
 import re
 import sys
 
+
+"""
+merge(reverse(A), shuffle(A))
+solution is always half the length of s
+
+iterate from the best case (lexicographically smallest) string and
+deduce valid or not
+
+shuffled(A), coupled with the merge gives carte blanche, shuffled(A)
+is ANY order of chars, the reversed chunk is the fixed chunk, where
+order matters so so long as a 'sparse substring' can be found then
+the intermediate chars are guaranteed
+
+s = 'abcddacb'
+grouped 'abcd'
+
+'abcd' | reverse 'dcba' ..not a 'sparse substring' | FAIL
+'abdc' | reverse 'cdba' ..not a 'sparse substring' | FAIL
+'acbd' | reverse 'dbca' ..not a 'sparse substring' | FAIL
+'acdb' | reverse 'bdca' ..not a 'sparse substring' | FAIL
+'adbc' | reverse 'cbda' ..not a 'sparse substring' | FAIL
+'adcb' | reverse 'bcda' ..is a 'sparse substring' | SUCCESS
+..
+'bacd' | reverse 'dcab' ..not a 'sparse substring' | FAIL
+'bcad' | reverse 'dacb' ..is a 'sparse substring'  | ..
+
+lowest lexicographical A is 'adcb'
+
+..easier to work backwards, i.e. look for lowest in reversed s
+
+s_ = 'bcaddcba' <- sparse substring 'adcb' exists
+
+algorithm more about creation of correct / efficient lexicographical
+permutation
+
+# speed-up?!
+-'jump logic' ..if we know the pushing 'a' along will never result
+in valid sparse substring, then skip?
+
+# redux, too many permutations for naive test all approach
+
+test #2
+reversed string: adigiibbgegjeiagjjiidhfdgdgijaaijfihbjjabchadcigaicgjaihidafigfhhecjgfacijgidgbhhehgfhjgiibggjddcjjd
+test string: aaaaabbbcccdddddeefffgggggggghhhhhiiiiiiiiijjjjjjj
+target:      aaaaabccigicgjihidfiejfijgidgbhhehgfhjgiibggjddjjd
+
+---
+
+look at number of characters available, e.g. ideal test string has 5 As,
+but supposee that that can be satisfied, what idx is the last A at? if
+it's idx 50 of 55 say, clearly having all As contiguous isn't feasible
+
+test string: aaaaabbbcccdddddeefffgggggggghhhhhiiiiiiiiijjjjjjj
+
+required:  a [5]
+           b [3]
+           c [3]
+           d [4]
+
+available:
+
+       idx1:  0  1  2 ...     ...14
+
+              a 10  9  9             9  8
+              b  6  6  6
+              c  6  6  6
+              d 10 10  9
+                                     a              aa        a
+reversed string: a  d  i  giibbgegjeia  gjjiidhfdgdgijaaijfihbjjabchadcigaicgjaihidafigfhhecjgfacijgidgbhhehgfhjgiibggjddcjjd
+
+so, count number 'x' chars left at each position (i.e. [l_s][26] 2d array)
+then sort this by first index ..when first index is the same, look at the
+second index etc. like a multi-column sort. after sort, iterate,
+and the first idx1 entry which satisfies the test string char counts, should
+be the optimal solution ..as if there are enough characters left in each
+char catergory, it's valid, and given the sort order, it's optimal
+         j  i  h  g  f  e  d  c  b  a
+  test   7  9  5  8  3  2  5  3  3  5
+
+[39|a]:  7  9  8 10  4  2  6  6  3  6  | aaaaa ..still valid, next pick = 'b'
+..
+[40|b]:  7  9  8 10  4  2  6  6  3  5  | aaaaab ..still valid, next pick = 'b'
+..
+[78|b]:  4  2  4  4  1  1  3  1  2  0  | aaaaabb ..not valid, next best pick = 'c'
+..
+[41|c]:  7  9  8 10  4  2  6  6  2  5  | aaaaabc ..valid! ..etc. etc.
+
+         j  i  h  g  f  e  d  c  b  a
+
+"""
+
 # Complete the reverseShuffleMerge function below.
 def reverseShuffleMerge(s):
 
+    def valid_jump(table, test, l_size):
+        # ensure all table values >= test values
+        for l in range(0, l_size):
+            if table[l] < test[l]:
+                return False
+        return True
+
+    reverse_string = lambda s: ''.join(reversed(list(s)))
+
+    # construct s_test
+    l_s = len(s)
+    s_test = ""
+    l_test = int(l_s / 2)
+    s = reverse_string(s)
+    #print(f"reversed string: {s}")
+
+    map_ = {}
+    for c in list(s):
+        if c in map_:
+            map_[c] += 1
+        else:
+            map_[c] = 1
+
+    l_groups = len(map_)
+    #print(f"map_ len: {l_groups}")
+    group_sorted = sorted([[k, v] for k, v in map_.items()], key=lambda o: o[0])
+    #print(f"group_sorted: {group_sorted}")
+
+    chars = []
+    test_char_counts = [0] * l_groups
+    map_char_idx = {}
+
+    # populate table of 'chars remaining at each idx of s
+    last = ' '
+    for l in range(0, len(s)):
+        chars.append([0] * l_groups)
+        itr_s = s[l]
+        #print(f"chars [{l}]{itr_s}, last: {last}")
+        if l == 0:
+            # zero idx / full sets
+            for l2 in range(0, len(group_sorted)):
+                itr = group_sorted[l2]
+                chars[0][l2] = itr[1]
+                test_char_counts[l2] = int(itr[1] / 2)
+                map_char_idx[itr[0]] = l2
+
+            #print(f"map_char_idx: {map_char_idx}")
+        else:
+            for l2 in range(0, l_groups):
+                chars[l][l2] = chars[l - 1][l2]
+            chars[l][map_char_idx[last]] -= 1
+
+        last = itr_s
+
+    """
+    # dump
+    header = "        "
+    for v in group_sorted:
+        header += "{:3s}".format(v[0])
+    print(f"{header}")
+    for l in range(0, l_s):
+        s_a = ""
+        for l2 in range(0, l_groups):
+            s_a += "{:3d}".format(chars[l][l2])
+        print("[" + "{:2d}".format(l) + f"|{s[l]}]: {s_a}")
+    """
+
+    idx_search = 0
+    idx_last_jump = -1
+    idx_table = 0
+    c_jump = ''
+    s__ = s
+    for l in range(0, l_test):
+        for l2 in range(0, len(group_sorted)):
+            itr = group_sorted[l2]
+            c_jump = itr[0]
+            if test_char_counts[map_char_idx[c_jump]] == 0:
+                continue
+
+            idx_search = s__.index(c_jump)
+            #print(f"searched for '{c_jump}', match idx '{idx_search}'")
+            idx_table = idx_last_jump + 1 + idx_search
+            #print(f"testing table[{idx_table}] vs test chars:\n{chars[idx_table]}\n{test_char_counts}'")
+            if valid_jump(chars[idx_table], test_char_counts, l_groups):
+                idx_last_jump = idx_table
+                #print(f"valid jump, next char: {c_jump}")
+                test_char_counts[map_char_idx[c_jump]] -= 1
+                #print(f"test_char_counts: {test_char_counts}")
+                s_test += c_jump
+                if idx_search + 1 >= len(s__):
+                    s__ = ""
+                else:
+                    s__ = s__[idx_search + 1:]
+                #print(f"s__: [{len(s__)}] {s__}")
+                break
+
+    return s_test
+
+
 if __name__ == '__main__':
     fptr = open(os.environ['OUTPUT_PATH'], 'w')
 
-- 
2.23.0


From a5d3ecc617fece85e953898956a5dac65a9a1576 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 1 Aug 2019 09:24:29 +0100
Subject: [add] hackerrank, 'organising containers of balls', c# port

---
 .../organising.containers.of.balls.cs         | 65 +++++++++++++++++++
 1 file changed, 65 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cs b/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cs
index c7d666f..4788f64 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cs
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.organising.containers.of.balls/organising.containers.of.balls.cs
@@ -18,7 +18,72 @@ class Solution {
 
     // Complete the organizingContainers function below.
     static string organizingContainers(int[][] container) {
+        /*
+        grid x y
+        a column represents the split of balls of a single type
+        swap elements vertically, if column A requires 4 moves to push all balls into the same row (container)
+        then 4 moves must be performed from the same row (container) in other columns (types)
 
+        10^9 number = 10 digits
+        2^31 number = 10 digits
+        n x n matrix n <= 100 ..so upto 12 digits > int32
+
+        try force a lead diagonal?
+
+        1 3 1
+        2 1 2  ->  no way that row 1 can be all type 2, as 4 have to be moved in (from rows 2 and 3) and there are
+        3 3 3      only two other typed balls in there to remove ..no balance. similarly with row2. but row 3? whilst
+                   4 can go in and 4 can go out, it still leaves 2 of the wrong type in there
+
+        hence we need to find all the possible (valid) 'targets' (valid target rows) for a given type to amass, and then
+        determine whether these are all compatible
+
+        so sum all rows and all columns. for each x,y the sum of Cx,y - x,y must == Rx,y - x,y to be valid
+
+        identifying an impossible container is enough?? e.g. is there a container no type can exclusively exist in?
+        */
+
+        var M = container;
+        var n = M.Length;
+
+        //WriteLine($"considering {n}x{n} matrix:\n{String.Join("\n", M.Select(r => "[" + String.Join(" ", r.Select(x_ => x_.ToString())) + "]"))}");
+
+        var x = 0;
+        var y = 0;
+        var Ry = Enumerable.Repeat<int>(0, n).ToArray();
+        var Cx = Enumerable.Repeat<int>(0, n).ToArray();
+        for (y = 0; y < n; y++) {
+            for (x = 0; x < n; x++) {
+                Cx[y] += M[y][x];
+                Ry[x] += M[y][x];
+            }
+        }
+        //WriteLine($"row counts: {Ry}");
+        //WriteLine($"column counts: {Cx}");
+
+        var possible = new List<List<int>>();
+        var in_ = 0;
+        var out_ = 0;
+
+        // for each container y..;
+        for (y = 0; y < n; y++) {
+            // is type x exclusively existing in there possible?;
+            possible.Add(new List<int>());
+            for (x = 0; x < n; x++) {
+                in_ = Cx[x] - M[y][x];
+                out_ = Ry[y] - M[y][x];
+                //WriteLine($"[y,x]|[{y},{x}] in_: {in_}, out: '{out_}'");
+                if (in_ == out_)
+                    // container y can contain type x exclusively;
+                    possible[y].Add(x);
+            }
+
+            if (possible[y].Count == 0) {
+                //WriteLine($"cannot exclusively collect any type in container {y+1}");
+                return "Impossible";
+            }
+        }
+        return "Possible";
     }
 
     static void Main(string[] args) {
-- 
2.23.0


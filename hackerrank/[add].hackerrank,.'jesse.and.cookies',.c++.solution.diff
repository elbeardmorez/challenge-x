From 766bdfa34daad9a0a3ed773a78f81dc8d9844745 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 11 Apr 2019 22:06:05 +0100
Subject: [add] hackerrank, 'jesse and cookies', c++ solution

---
 .../jesse.and.cookies.cpp                     | 99 ++++++++++++++++++-
 1 file changed, 98 insertions(+), 1 deletion(-)

diff --git a/hackerrank/data.structures.-.heap.-.easy.-.jesse.and.cookies/jesse.and.cookies.cpp b/hackerrank/data.structures.-.heap.-.easy.-.jesse.and.cookies/jesse.and.cookies.cpp
index 1e774cc..97a4019 100644
--- a/hackerrank/data.structures.-.heap.-.easy.-.jesse.and.cookies/jesse.and.cookies.cpp
+++ b/hackerrank/data.structures.-.heap.-.easy.-.jesse.and.cookies/jesse.and.cookies.cpp
@@ -4,6 +4,11 @@ using namespace std;
 
 vector<string> split_string(string);
 
+int cmp(int x, int y) {
+//  return x < y ? 1 : ( x == y ? 0 : -1 );
+  return x < y; // no stable :|
+}
+
 /*
  * Complete the cookies function below.
  */
@@ -11,7 +16,99 @@ int cookies(int k, vector<int> A) {
     /*
      * Write your code here.
      */
-
+    //cout << "A len: " << A.size() << endl;
+    //cout << "[ "; for (auto itr = A.begin(); itr < A.begin() + min(static_cast<int>(A.size()), 20); ++itr) cout << *itr << " "; cout << "]" << endl;
+    std::sort(A.begin(), A.end(), &cmp);
+    //cout << "[ "; for (auto itr = A.begin(); itr < A.begin() + min(static_cast<int>(A.size()), 20); ++itr) cout << *itr << " "; cout << "]" << endl;
+    int ops = 0;
+    int idx = 0;
+    int idx2;
+    vector<int> added;
+    int combined;
+    int zeros = 0;
+    int pairs;
+    int j = 0;
+    while (A.size() >= idx + 2 && A[idx] < k) {
+        // skip zeros
+        while (idx + zeros < A.size() && A[idx + zeros] == 0)
+            zeros += 1;
+        if (zeros > 0) {
+            while (zeros > 1) {
+                pairs = zeros / 2;
+                ops += pairs;
+                idx += pairs;
+                zeros -= pairs;
+            }
+        }
+        combined = A[idx] + A[idx+1] * 2;
+        added.push_back(combined);
+        idx += 2;
+        ops += 1;
+        if (A.size() < idx + 2 || added[0] <= A[idx + 1]) {
+            // merge, reset
+            //cout << "# merging and resetting" << endl;
+            // find idx2, the end index of the subset of L which needs combining with the added set in order to sort and form the new L set
+            idx2 = idx;
+            int bounce = 1000;
+            //cout << "added len: " << added.size() << "A len: " << A.size() << "idx: " << idx << endl;
+
+            if (idx2 + bounce < A.size() && A[idx2 + bounce] < combined) {
+                //cout << "# bisecting" << endl;
+                // bisect search for correct insertion position
+                //cout << "# target: " << combined << ", start: [" << idx2 << "]: " << A[idx2] << ", bounce: " << bounce << endl;
+                while (bounce >= 1) {
+                    while (idx2 + bounce > A.size())
+                        bounce /= 2;
+                    if (A[idx2] < combined) {
+                        while (idx2 + bounce < A.size() && A[idx2] < combined)
+                            idx2 += bounce;
+                    } else {
+                        while (idx2 - bounce > idx && A[idx2] > combined)
+                            idx2 -= bounce;
+                    }
+                    bounce /= 2;
+                    //cout << "# target: " << combined << ", current: [" << idx2 << "]: " << A[idx2] << ", bounce: " << bounce << endl;
+                }
+                if (idx2 == A.size() - 1 && A[idx2] < combined)
+                    idx2 = A.size();
+                //j += 1;
+            } else if (idx2 + bounce < A.size()) {
+                // take the hit
+                //cout << "# adding" << endl;
+                idx2 += bounce;
+            } else {
+                // remainder
+                //cout << "# remainder" << endl;
+                idx2 = A.size();
+            }
+            //cout << "added[0]: " << added[0] << ", added len: " << added.size() << ", A[0]: " << A[0] << ", A len: " << A.size() << ", combined: " << combined << ", idx: " << idx << ", A[idx]: " << A[idx] << ", idx2: " << idx2 << ", A[idx2]: " << (idx2 == A.size() ? "-" : std::to_string(A[idx2])) << ", bounce: " << bounce << endl;
+            vector<int> mixed;
+            for (auto itr = added.begin(); itr < added.end(); ++itr)
+                mixed.push_back(*itr);
+            for (auto itr = A.begin() + idx; itr < A.begin() + idx2; ++itr)
+                mixed.push_back(*itr);
+            std::sort(mixed.begin(), mixed.end(), &cmp);
+            for (auto itr = A.begin() + idx2; itr < A.end(); ++itr)
+                mixed.push_back(*itr);
+            A = mixed;
+            added.clear();
+            idx = 0;
+        }
+//        if (j > 20)
+//            break;
+    }
+/*
+    cout << "# A len: " << A.size() << endl;
+    cout << "# added len: " << added.size() << endl;
+    cout << "# target: " << k << endl;
+    cout << "# idx: " << idx << endl;
+    cout << "# ops: " << ops << endl;
+    cout << "[ "; for (auto itr = A.begin() + idx; itr < A.begin() + min(static_cast<int>(A.size()), idx + 20); ++itr) cout << *itr << " "; cout << "]" << endl;
+*/
+    if (A[idx] < k)
+        ops = -1;
+
+    return ops;
 }
 
 int main()
-- 
2.23.0


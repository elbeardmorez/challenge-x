From 5bf5ccc76d3273c8d35455d116b1e9583502100b Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 6 Sep 2019 22:25:51 +0100
Subject: [add] hackerrank, 'game of thrones - i', c++ port

---
 .../game.of.thrones...i.cpp                   | 22 ++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.strings.-.easy.-.game.of.thrones...i/game.of.thrones...i.cpp b/hackerrank/algorithms.-.strings.-.easy.-.game.of.thrones...i/game.of.thrones...i.cpp
index 59e4959..9d78fcd 100644
--- a/hackerrank/algorithms.-.strings.-.easy.-.game.of.thrones...i/game.of.thrones...i.cpp
+++ b/hackerrank/algorithms.-.strings.-.easy.-.game.of.thrones...i/game.of.thrones...i.cpp
@@ -5,7 +5,27 @@ using namespace std;
 // Complete the gameOfThrones function below.
 string gameOfThrones(string s) {
 
-
+    sort(s.begin(), s.end());
+    //for (auto itr = s.begin(); itr < s.end(); ++itr) cout << *itr << '\n'; cout << endl;
+
+    map<const char, int> map_;
+    const char* last = &(s.front());
+    map_[*last] = 0;
+    const char* next_;
+    for (auto itr = s.begin(); itr < s.end(); ++itr) {
+        next_ = &(*itr);
+        if (*next_ != *last)
+            map_[*next_] = 1;
+        else
+            map_[*last]++;
+        last = next_;
+    }
+
+    vector<pair<const char, int>> odd_groups;
+    copy_if(map_.begin(), map_.end(), back_inserter(odd_groups), [&](pair<const char, int> kvp) { return kvp.second % 2 == 1; });
+    //for (auto itr = odd_groups.begin(); itr < odd_groups.end(); ++itr) cout << "k: " << itr->first << ", v: " << itr->second << endl;
+
+    return odd_groups.size() <= 1 ? "YES" : "NO";
 }
 
 int main()
-- 
2.23.0


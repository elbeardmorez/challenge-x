From 95b0f2058a66476fd651bce02e4d6a0a60d520f1 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sat, 30 Jun 2018 09:13:46 +0100
Subject: [mod] hackerrank, 'array manipulation', c# solution

-speed-up, use queries.Length temp var, save repeated object access
-fix bug in commented code
---
 .../array.manipulation.cs                                | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
index c0580bf..f350676 100644
--- a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
+++ b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.cs
@@ -28,13 +28,14 @@ class Solution {
         long score = 0;
         int idx = 0;
         int idx_next = 0;
-        int[] q = new int[]{};
         int i = 0;
+        int[] q;
+        int nq = queries.Length;
 
         Array.Sort(queries, (a, b) => a[0] - b[0]);
         /*
-        for (var ii = 0; ii < queries.Length; ii++) {
-            var s = string.Join(" ", squeries[ii]);
+        for (var k = 0; k < nq; k++) {
+            var s = string.Join(" ", queries[k]);
             WriteLine($"considering ordered query: {s}");
         }
         */
@@ -79,7 +80,7 @@ class Solution {
             }
 
             // process last
-            if (i == queries.Length - 1) {
+            if (i == nq - 1) {
                 idx = next[0];
                 score += (long)next[2];
                 //WriteLine($"idx: {idx}, score: {score} [+= {q[2]}]");
-- 
2.23.0


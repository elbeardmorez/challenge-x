From 0c317d6204e62e8dbccf39ee87a1f80e6be03365 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 22 May 2019 18:07:34 +0100
Subject: [mod] hackerrank, 'climbing the leaderboard', c# solution

-speed-up, redux algorithm based on a score-to-position map
---
 .../climbing.the.leaderboard.cs               | 35 ++++++++++---------
 1 file changed, 18 insertions(+), 17 deletions(-)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.climbing.the.leaderboard/climbing.the.leaderboard.cs b/hackerrank/algorithms.-.implementation.-.medium.-.climbing.the.leaderboard/climbing.the.leaderboard.cs
index a2827d6..f42da35 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.climbing.the.leaderboard/climbing.the.leaderboard.cs
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.climbing.the.leaderboard/climbing.the.leaderboard.cs
@@ -16,26 +16,27 @@ class Solution {
 
     // Complete the climbingLeaderboard function below.
     static int[] climbingLeaderboard(int[] scores, int[] alice) {
-        var grouped = scores.AsEnumerable().OrderByDescending(x => x).GroupBy(x => x).Select(g => new int[]{g.Key, g.Count(), 0}).ToList();
-        var a = 0;
-        grouped.ForEach(t => { a += t[1]; t[2] = a; });
-        int da = alice.Count();
+        var grouped = scores.AsEnumerable().OrderBy(x => x).GroupBy(x => x).Select(g => g.Key).ToList();
         int dg = grouped.Count();
-        int[] res = Enumerable.Repeat(0, da).ToArray();
-        for(var idx = 0; idx < da; idx++) {
-            int score = alice[idx];
-            for(var idx2 = 0; idx2 < dg; idx2++) {
-                var g = grouped[idx2];
-                //Console.WriteLine($"score: {score}, g: {String.Join(' ', g.Select(x => x.ToString()))}");
-                if (score >= g[0]) {
-                    res[idx] = idx2 + 1;
-                    break;
-                }
+        int score_max = grouped[dg - 1];
+        //Console.WriteLine($"score_max: {score_max}");
+        int[] scores_nearest = new int[score_max + 1];
+        int idx = 0;
+        int pos = dg + 1;
+        //Console.WriteLine($"setting idx: {idx}, pos: {pos}");
+        scores_nearest[0] = pos;
+        idx = 1;
+        foreach(var score in grouped) {
+            while (idx < score) {
+                //Console.WriteLine($"score: {score}, setting idx: {idx}, pos: {pos}");
+                scores_nearest[idx] = pos;
+                idx++;
             }
-            if (res[idx] == 0)
-                res[idx] = grouped.Count + 1;
+            pos -= 1;
         }
-        //Console.WriteLine(String.Join(' ', res.Select(x => x.ToString())));
+        scores_nearest[score_max - 1] = 1;
+        int[] res = alice.AsEnumerable().Select(s => s >= score_max ? 1 : scores_nearest[s]).ToArray();
+        //Console.WriteLine($"res: {String.Join(' ', res.Select(x => x.ToString()))}");
         return res;
     }
 
-- 
2.23.0


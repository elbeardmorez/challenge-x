From 0eff39d211fdb0341fc399e18e47f12741dc6f46 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 8 Sep 2019 07:35:01 +0100
Subject: [add] hackerrank, 'sherlock and anagrams', c++ port

---
 .../sherlock.and.anagrams.cpp                 | 683 ++++++++++++++++++
 1 file changed, 683 insertions(+)

diff --git a/hackerrank/algorithms.-.strings.-.medium.-.sherlock.and.anagrams/sherlock.and.anagrams.cpp b/hackerrank/algorithms.-.strings.-.medium.-.sherlock.and.anagrams/sherlock.and.anagrams.cpp
index a849ab4..58d2efe 100644
--- a/hackerrank/algorithms.-.strings.-.medium.-.sherlock.and.anagrams/sherlock.and.anagrams.cpp
+++ b/hackerrank/algorithms.-.strings.-.medium.-.sherlock.and.anagrams/sherlock.and.anagrams.cpp
@@ -1,11 +1,694 @@
 #include <bits/stdc++.h>
+#include <cmath>
+#include <vector>
+#include <map>
+#include <functional>
+#include <sstream>
 
 using namespace std;
 
+void clean_(string &);
+string round_(string &, int = 10);
+int cmp_(string, string);
+
+static int debug = 0;
+
+string add_(string s1, string s2) {
+
+    // subtraction is not commutitive
+    string res;
+
+    clean_(s1);
+    clean_(s2);
+
+    string s1_orig = string(s1);
+    string s2_orig = string(s2);
+
+    int l_s1 = s1.length();
+    int l_s2 = s2.length();
+
+    // operator
+    std::function<int(int, int)> op;
+    int n1 = 0;
+    int n2 = 0;
+    if (s1.substr(0, 1) == "-") {
+        n1 = 1;
+        s1 = s1.substr(1);
+        l_s1--;
+    }
+    if (s2.substr(0, 1) == "-") {
+        n2 = 1;
+        s2 = s2.substr(1);
+        l_s2--;
+    }
+    if (n1 + n2 == 1) {
+        op = std::minus<int>();
+    } else {
+        op = std::plus<int>();
+    }
+    // equalise mantissa
+    int dot1 = s1.find(".");
+    int dot2 = s2.find(".");
+    if (dot1 == -1) {
+        s1.push_back('.');
+        s1.push_back('0');
+        l_s1 += 2;
+        dot1 = l_s1 - 2;
+    }
+    if (dot2 == -1) {
+        s2.push_back('.');
+        s2.push_back('0');
+        l_s2 += 2;
+        dot2 = l_s2 - 2;
+    }
+    string *x;
+    int append = 0;
+    if (l_s1 - dot1 < l_s2 - dot2) {
+        x = &s1;
+        append = (l_s2 - dot2) - (l_s1 - dot1);
+        l_s1 += append;
+    } else if (l_s1 - dot1 > l_s2 - dot2) {
+        x = &s2;
+        append = (l_s1 - dot1) - (l_s2 - dot2);
+        l_s2 += append;
+    }
+    for (int l = 0; l < append; l++) x->push_back('0');
+
+    // note magnitudes
+    int switch_ = cmp_(s2, s1) > 0 ? 1 : 0;
+
+    // ultimate sign
+    string sign = "";
+    int xover = 0;
+    if (n1 == 1 && n2 == 1)
+        sign = "-";
+    else if (n1 == 0 && n2 == 1 && switch_) {
+        // s1 is positive, but s2 is negative and is bigger in magnitude
+        sign = "-";
+        xover = 1;
+    } else if (n1 == 1 && n2 == 0 && switch_) {
+        // s1 is negative, but s2 is positive and is bigger in magnitude
+        xover = 1;
+    } else if (n1 == 1 && n2 == 0 && !switch_) {
+        // s1 is negative, s2 is positive but is smaller in magnitude
+        sign = "-";
+    }
+
+    int l;
+    int carry = 0;
+    int idx = 0;
+    int i1 = 0;
+    int i2 = 0;
+    int sum;
+    string sum_;
+    string ss1;
+    string ss2;
+    while (idx < max(l_s1, l_s2)) {
+        i1 = 0;
+        if (idx < l_s1) {
+            ss1 = s1.substr(l_s1 - idx - 1, 1);
+            if (ss1 == ".") {
+                res = "." + res;
+                idx++;
+                continue;
+            }
+            i1 = stoi(ss1);
+        }
+        i2 = 0;
+        if (idx < l_s2) {
+            ss2 = s2.substr(l_s2 - idx - 1, 1);
+            if (ss2 == ".") {
+                res = "." + res;
+                idx++;
+                continue;
+            }
+            i2 = stoi(ss2);
+        }
+        sum = op(i1, i2) + carry;
+        sum_ = to_string(sum);
+        carry = 0;
+        if (sum == 0) {
+            sum_ = to_string(sum);
+            res = sum_ + res;
+        } else if (sum > 9) {
+            carry = 1;
+            sum_ = to_string(sum);
+            res = sum_.substr(sum_.length() - 1) + res;
+        } else if (sum < -9) {
+            carry = -1;
+            sum_ = to_string(sum);
+            res = sum_.substr(sum_.length() - 1) + res;
+        } else if (sum < 0) {
+            carry = 0;
+            if (xover && n1 != n2) {
+                sum = sum - 10;
+                sum_ = to_string(sum);
+                res = sum_.substr(sum_.length() - 1) + res;
+            } else if (!xover && n1 != n2) {
+                sum = sum + 10;
+                carry = -1;
+                sum_ = to_string(sum);
+                res = sum_ + res;
+            } else {
+                sum_ = to_string(sum);
+                res = sum_.substr(1) + res;
+            }
+        } else if (sum > 0) {
+            carry = 0;
+            if (xover && n1 != n2) {
+                carry = 1;
+                sum = sum - 10;
+                sum_ = to_string(sum);
+                res = sum_.substr(sum_.length() - 1) + res;
+            } else {
+                sum_ = to_string(sum);
+                res = sum_ + res;
+            }
+        }
+        idx++;
+    }
+
+    clean_(res);
+
+    // replace any sign
+    if (res != "0")
+        res = sign + res;
+
+    return res;
+}
+
+string subtract_(string s1, string s2) {
+
+    string res;
+
+    string s1_orig = string(s1);
+    string s2_orig = string(s2);
+
+    if (s2.substr(0, 1) == "-")
+        s2 = s2.substr(1);
+    else
+        s2 = "-" + s2;
+    res = add_(s1, s2);
+
+    return res;
+}
+
+string multiply_(string s1, string s2) {
+
+    int debug_ = debug;
+    string res = "";
+
+    clean_(s1);
+    clean_(s2);
+
+    string s1_orig = string(s1);
+    string s2_orig = string(s2);
+
+    int l_s1 = s1.length();
+    int l_s2 = s2.length();
+
+    // trim signs
+    int n1 = 0;
+    int n2 = 0;
+    if (s1.substr(0, 1) == "-") {
+        n1 = 1;
+        s1 = s1.substr(1);
+        l_s1--;
+    }
+    if (s2.substr(0, 1) == "-") {
+        n2 = 1;
+        s2 = s2.substr(1);
+        l_s2--;
+    }
+    // ultimate sign
+    string sign = n1 + n2 == 1 ? "-" : "";
+
+    int dot1 = s1.find(".");
+    int dot2 = s2.find(".");
+    if (dot1 > -1) {
+        s1.erase(dot1, 1);
+        l_s1--;
+    } else
+        dot1 = l_s1;
+
+    if (dot2 > -1) {
+        s2.erase(dot2, 1);
+        l_s2--;
+    } else
+        dot2 = l_s2;
+
+    int idx = 0;
+    int v;
+
+    int digits = (l_s1 - 1) + (l_s2 - 1) + 1;
+    vector<int> res_(digits, 0);
+    int l_s = res_.size();
+
+    int i1;
+    int i2;
+    for (int l = l_s1 - 1; l >= 0; l--) {
+        i1 = stoi(s1.substr(l, 1));
+        if (i1 == 0) continue;
+        for (int l2 = l_s2 - 1; l2 >= 0; l2--) {
+            i2 = stoi(s2.substr(l2, 1));
+            if (i2 == 0) continue;
+            idx = l_s - (l_s1 - l + l_s2 - l2) + 1;
+            v = i1 * i2;
+            res_[idx] += v;
+        }
+    }
+    for (int l = l_s - 1; l >= 0; l--) {
+        if (res_[l] > 9 && l > 0) {
+            res_[l - 1] += (res_[l] / 10);
+            res_[l] = res_[l] % 10;
+        }
+    }
+    stringstream ss;
+    for (auto itr = res_.begin(); itr != res_.end(); itr++)
+        ss << *itr;
+    res = ss.str();
+
+    int dot = dot1 - 1 + dot2 - 1 + 1;
+    if (dot < l_s)
+        res = res.substr(0, dot) + "." + res.substr(dot);
+
+    res = round_(res);
+
+    return sign + res;
+}
+
+string divide_(string s1, string s2) {
+
+    int debug_ = debug;
+    string res;
+
+    string s1_orig = string(s1);
+    string s2_orig = string(s2);
+
+    clean_(s1);
+    clean_(s2);
+
+    int l_s1 = s1.length();
+    int l_s2 = s2.length();
+
+    // trim signs
+    int n1 = 0;
+    int n2 = 0;
+    if (s1.substr(0, 1) == "-") {
+        n1 = 1;
+        s1 = s1.substr(1);
+        l_s1--;
+    }
+    if (s2.substr(0, 1) == "-") {
+        n2 = 1;
+        s2 = s2.substr(1);
+        l_s2--;
+    }
+
+    // equalise mantissa
+    int dot1 = s1.find(".");
+    int dot2 = s2.find(".");
+    if (dot1 == -1) {
+        s1.push_back('.');
+        s1.push_back('0');
+        l_s1 += 2;
+        dot1 = l_s1 - 2;
+    }
+    if (dot2 == -1) {
+        s2.push_back('.');
+        s2.push_back('0');
+        l_s2 += 2;
+        dot2 = l_s2 - 2;
+    }
+    string *x;
+    int append;
+    if (l_s1 - dot1 < l_s2 - dot2) {
+        x = &s1;
+        append = (l_s2 - dot2) - (l_s1 - dot1);
+        l_s1 += append;
+    } else if (l_s1 - dot1 > l_s2 - dot2) {
+        x = &s2;
+        append = (l_s1 - dot1) - (l_s2 - dot2);
+        l_s2 += append;
+    }
+
+    // ultimate sign
+    string sign = n1 == 1 || n2 == 1 ? "-" : "";
+
+    // find reciprocal
+    string s2_ = string(s2);
+
+    clean_(s2_);
+
+    /*
+    shift most significant to 1x10^0 digit
+    e.g. 0.05 -> 5.0 shift 2
+       . 100 -> 1 shift -2
+    */
+    int shift = 0;
+    int dot = s2_.find(".");
+    if (dot == -1)
+        shift = -(s2_.length() - 1);
+    else {
+        if (s2_.substr(0, 1) == "0") {
+            shift = 1;
+            s2_ = s2_.substr(2);
+            while (s2_.substr(0, 1) == "0") {
+                s2_ = s2_.substr(1);
+                shift++;
+            }
+        } else {
+            shift = -(dot - 1);
+            s2_ = s2_.substr(0, dot) + s2_.substr(dot + 1);
+        }
+    }
+
+    string one = "1";
+    string reciprocal = "";
+    string divisor = s2_;
+    int l_divisor = s2_.length();
+    string divisor_ = "";
+    int l_divisor_;
+    string dividend = one;
+    int l_dividend = dividend.length();
+    while (l_dividend < l_divisor) {
+        dividend += "0";
+        l_dividend++;
+    }
+    string remainder = dividend;
+    int l_remainder = remainder.length();
+    string remainder_ = "";
+    int l_remainder_;
+    int idx = 0; //remainder.length() - 1;
+    int idx2 = 0; // divisor / remainder substrings
+    int ip;
+    string buf;
+    string buf2;
+    int max_significant_digits = 50;
+
+    // idx is fixed to the dividend!
+    while (idx <= l_dividend) {
+
+        if (reciprocal.length() >= max_significant_digits)
+            break;
+
+        // work on next digit
+        if (l_remainder < l_dividend) {
+            // extend dividend for further precision
+            dividend += "0";
+            l_dividend++;
+            // bring down next dividend digit to exend remainder
+            remainder += dividend.substr(idx, 1);
+            l_remainder++;
+        }
+
+        // get head estimate
+        while (l_divisor > l_remainder || \
+            (l_divisor == l_remainder && cmp_(divisor, remainder) > 0)) {
+
+            reciprocal += "0";
+            remainder += "0";
+            l_remainder++;
+            dividend += "0";
+            l_dividend++;
+            idx++;
+            continue;
+        }
+
+        idx++;
+        idx2 = 0;
+        remainder_ = "";
+        l_remainder_ = 0;
+        divisor_ = "";
+        l_divisor_ = 0;
+        while (idx2 < min(5, l_remainder)) {
+            // add to remainder 'head' until valid for estimate
+            remainder_ += remainder.substr(idx2, 1);
+            l_remainder_++;
+            if (idx2 < l_divisor) {
+                divisor_ += divisor.substr(idx2, 1);
+                l_divisor_++;
+            }
+            idx2++;
+        }
+        if (cmp_(divisor_, remainder_) > 0) {
+            remainder_ += remainder.substr(idx2, 1);
+            l_remainder_++;
+        }
+        if (divisor_ == "0") {
+            continue;
+            idx2++;
+        }
+        ip = stoi(remainder_) / stoi(divisor_);  // estimate
+        debug = 0;
+        buf = subtract_(remainder, multiply_(to_string(ip), divisor));  // estimate result, full length
+        debug = debug_;
+        if (buf.substr(0, 1) != "-") {
+            while (buf.substr(0, 1) != "-") {
+                ip++;
+                debug = 0;
+                buf = subtract_(buf, divisor);
+                debug = debug_;
+            }
+            if (ip > 0) {
+                debug = 0;
+                buf = add_(buf, divisor);
+                debug = debug_;
+                ip--;
+            }
+        } else if (buf.substr(0, 1) == "-") {
+            while (buf.substr(0, 1) == "-") {
+                ip--;
+                debug = 0;
+                buf = add_(buf, divisor);
+                debug = debug_;
+            }
+        }
+        reciprocal += to_string(ip);
+        if (ip > 9) shift++;
+
+        remainder = string(buf);
+        l_remainder = remainder.length();
+        if (remainder == "0")
+            break;
+
+    }
+    if (shift == 0)
+        reciprocal = reciprocal.substr(0, 1) + "." + reciprocal.substr(1);
+    else {
+        int l_reciprocal = reciprocal.length();
+        int shift_ = abs(shift);
+        for (int l = 0; l < shift_; l++) {
+            if (shift > 0)
+                reciprocal += "0";
+            else
+                reciprocal = "0" + reciprocal;
+        }
+        if (shift < 0) {
+            reciprocal = reciprocal.substr(0, 1) + "." + reciprocal.substr(1);
+        } else {
+            clean_(reciprocal);
+            reciprocal = reciprocal.substr(0, shift) + "." + reciprocal.substr(shift);
+        }
+    }
+
+    debug = 0;
+    res = multiply_(s1, reciprocal);
+    debug = debug_;
+
+    // replace any sign
+    if (res != "0")
+        res = sign + res;
+
+    res = round_(res);
+
+    return res;
+}
+
+string round_(string &s, int sfh) {
+    // significant figures beyond integer part hybrid
+    string rounded = "";
+    bool round = false;
+
+    clean_(s);
+    string sign = "";
+    if (s.substr(0, 1) == "-") {
+        sign = "-";
+        s = s.substr(1);
+    }
+    int dot = s.find(".");
+    if (dot == -1)
+        return sign + s;
+    if (s.length() < sfh)
+        return sign + s;
+    int l = dot;
+    string ss;
+    while (true) {
+        ss = s.substr(l, 1);
+        if (ss != "0")
+            break;
+        l++;
+    }
+    if (s.length() < sfh)
+        return sign + s;
+    s = s.substr(0, min(l + sfh, (int)(s.length())));
+
+    for (auto itr = s.rbegin(); itr < s.rend(); itr++) {
+        string c(1, *itr);
+        if (&(*itr) == &(s.back())) {
+            if (stoi(c) >= 5)
+                round = true;
+            rounded = "0";
+        } else if (*itr == '.' || *itr == '-' || !round)
+            rounded = c + rounded;
+        else if (stoi(c) == 9)
+            rounded = "0" + rounded;
+        else {
+            rounded = to_string(stoi(c) + 1) + rounded;
+            round = false;
+        }
+    }
+    if (round) rounded = "1" + rounded;
+    clean_(rounded);
+    return sign + rounded;
+}
+
+void clean_(string &s) {
+    // strip leading / trailing 0s
+    int l = 0;
+    string sign = "";
+    if (s.substr(0, 1) == "-") {
+        sign = "-";
+        s = s.substr(1);
+    }
+
+    while (l < s.length() - 1 && s.substr(l, 1) == "0")
+        l++;
+    s = s.substr(l);
+    if (s.substr(0, 1) == ".") s = "0" + s;
+    int dot = s.find(".");
+    if (dot > -1) {
+        l = s.length() - 1;
+        string ss;
+        while (l > 0) {
+            ss = s.substr(l, 1);
+            if (ss == ".") {
+                l--;
+                break;
+            } else if (ss != "0")
+                break;
+            l--;
+        }
+        s = s.substr(0, l + 1);
+    }
+    s = sign + s;
+}
+
+int cmp_(string s1, string s2) {
+    if (s1 == s2)
+        return 0;
+    else {
+        int l_s1 = s1.length();
+        int l_s2 = s2.length();
+        if (l_s1 < l_s2)
+            return -1;
+        else if (l_s1 > l_s2)
+            return 1;
+        else {
+            int i1;
+            int i2;
+            for (int l = 0; l < l_s1; l++) {
+                if (s1.substr(l, 1) == ".") continue;
+                i1 = stoi(s1.substr(l, 1));
+                i2 = stoi(s2.substr(l, 1));
+                if (i1 < i2)
+                    return -1;
+                else if (i1 > i2)
+                    return 1;
+            }
+            return 0;
+        }
+    }
+}
+
+string factorial_(string n) {
+    return n == "0" || n == "1" ? "1" : multiply_(n, factorial_(add_(n, "-1")));
+}
+
+string nCr_(long n, long r) {
+    string res = divide_(factorial_(to_string(n)), multiply_(factorial_(to_string(r)), factorial_(to_string(n - r))));
+    return res;
+}
+
 // Complete the sherlockAndAnagrams function below.
 int sherlockAndAnagrams(string s) {
+    /*
+    # inbetween substrings, at least one unless the chars are adjacent
+    acbdefgcbaaa  ..nCr n > 2 instances per dupe char e.g. a 4!/2!(4-2)!
+
+    a|a 4!/2!2!=6
+    aa|aa acb|cba acbdefg|defgcba acbdefgcb|cbdefgcba acbdefgcba|cbdefgcbaa acbdefgcbaa|cbdefgcbaaa 6
+
+    c|c 1
+    cbdefg|bdefgc 1
+    cbdefg|defgcb 1
+    cb|cb 1
+
+    b|b 1
+    bdefgc|defgcb 1
+
+    18
+    */
+
+    //cout << "\n" << s << endl;
+
+    auto ls = s.length();
+    long long anagrams = 0;
+    vector<string> sss;
+    int left, right;
+    string ss, ss_;
+    for (auto l = 0; l < ls; l++) {
+        for (auto l2 = 1; l2 < ls - l + 1; l2++) {
+            left = l;
+            right = l + l2;
+            ss = s.substr(left, right - left);
+            ss_ = string(ss);
+            sort(ss_.begin(), ss_.end());
+            //cout << "added: " << left << "_" << right << ": " << ss << " -> " << ss_ << endl;
+            sss.push_back(ss_);
+        }
+    }
+
+    sort(sss.begin(), sss.end());
+    //for (auto itr = sss.begin(); itr < sss.end(); ++itr) cout << *itr << '\n'; cout << endl;
+
+    map<string, int> grouped;
+    string last = sss[0];
+    grouped[last] = 0;
+    string next_;
+    for (auto itr = sss.begin(); itr < sss.end(); ++itr) {
+        next_ = *itr;
+        if (next_ != last)
+            grouped[next_] = 1;
+        else
+            grouped[last]++;
+        last = next_;
+    }
+
+    int l;
+    for (auto itr = grouped.begin(); itr != grouped.end(); ++itr) {
+        //cout << "group: " << itr->first << " | " << itr->second << endl;
+        l = itr->second;
+        if (l > 2)
+            anagrams += stol(nCr_(l, 2));
+      
+        else if (l == 2)
+            anagrams += 1;
+    }
 
+    //cout << "anagrams: " << anagrams << endl;
 
+    return anagrams;
 }
 
 int main()
-- 
2.23.0


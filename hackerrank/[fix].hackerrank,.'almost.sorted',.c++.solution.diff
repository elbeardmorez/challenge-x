From 2d86d07f593e287b9b89c9e132de88e5d1e071fb Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Mon, 15 Jul 2019 19:09:55 +0100
Subject: [fix] hackerrank, 'almost sorted', c++ solution

-cover many more edge cases
-more logging with explanation on code paths / results
-deduce result on-the-fly and short-circuit where possible
---
 .../almost.sorted.cpp                         | 295 ++++++++++++++----
 1 file changed, 232 insertions(+), 63 deletions(-)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cpp b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cpp
index 0542bd7..711baba 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cpp
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.cpp
@@ -11,81 +11,250 @@ void almostSorted(vector<int> arr) {
     sortable | "swap l r"
     sortable | "reverse l r"
     unsortable | "no"
+
+    // 1 2 5 4 3 13
+    1 2 5 | 4 .. but the previous (5) MUST be after, so include it in the decreasing run
+    1 2 | 5 4 3 | 13 here we look at previous increasing run, the endpoint (2) must be < 3 AND 5 < 13
+    ..then based on size of negative run, either swap (<=3) or reverse (>3)
+
+    // 1 2 55 4 6 13 1 15
+    1 2 55 | 4 .. but .. ""      ""
+    1 2 | 55 4 | 6 .. but a negative run of size 2 is actually a single swap digit
+    1 2 | 55 | 4 6 13 | 1
+
+    // 4 5 9 7 8 6 12
+    4 5 9 | 7 .. but 8 is increasing
+        either 9 is a mistake, or 7 is a mistake
+        should it be: 4 5 | 9 | 7 8 or
+                      4 5 9 | 7 | 8
+        4 5 | 9 | 7
+
+    // 4 5 9 7 11 16 18
+
     */
 
-    cout << "considering set:"; for (auto itr = arr.begin(); itr != arr.end(); ++itr) cout << " " << *itr; cout << endl;
+    //cout << "[debug] considering set:"; for (auto itr = arr.begin(); itr != arr.end(); ++itr) cout << " " << *itr; cout << endl;
 
     int l_a = arr.size();
-    int direction = 1;
-    vector<int> non_monotonic;
+    vector<int> inflections;
+    bool reversal_required = false;
+    bool reversed = false;
+    bool swap_required = false;
+    bool swapped = false;
+    int left = -1;
+    int right = -1;
+
+    int last = 0;
+    bool last_set;
+
+    // simplify main algorithm by removing short edge cases
+    if (l_a == 2) {
+        if (arr[0] < arr[1])
+            cout << "yes" << endl;
+        else
+            cout << "yes\nswap 1 2" << endl;
+        return;
+    } else if (l_a == 3) {
+        if (arr[0] < arr[1] && arr[1] < arr[2])
+            // 1 2 3
+            cout << "yes" << endl;
+        else if (arr[0] > arr[1] && arr[1] > arr[2])
+            // 3 2 1
+            cout << "yes\nswap 1 3" << endl;
+        else if (arr[0] < arr[2] && arr[1] > arr[2])
+            // 1 3 2
+            cout << "yes\nswap 2 3" << endl;
+        else
+            // 2 3 1
+            cout << "no" << endl;
+        return;
+    }
+
+    int direction = arr[1] > arr[0] ? 1 : -1;
+    if (direction == -1) {
+        reversal_required = true;
+        left = 0;
+    }
+
+    // 4 5 9 | 7 | 8 | 6 | 12
+    // 4 5 9 | 7
+    //            7 HAS to move left of 9
+    //            can i swap 7 with 9 ? no, 9 > 8
+    //            only other way is swap 9 for something else
+
+    ////cout << "[debug] initial direction: " << direction << endl;
     for (int l = 1; l < arr.size(); l++) {
+        ////cout << "[debug] l: " << l << ", comparing " << arr[l] << " with previous " << arr[l - 1] << endl;
         if (direction > 0 && arr[l] < arr[l - 1]) {
-            cout << "non-monotonic @ idx: " << l << endl;
-            non_monotonic.push_back(l);
-            direction = -1;
-            if (non_monotonic.size() > 2)
-                break;
-        } else if (direction < 0 && arr[l] > arr[l - 1]) {
-            cout << "non-monotonic @ idx: " << l << endl;
-            non_monotonic.push_back(l);
-            direction = 1;
-            if (non_monotonic.size() > 2)
-                break;
-        }
-    }
+            // inflection
+            //cout << "[debug] @ [" << l << "]" << arr[l] << ", now " << (direction == 1 ? "de" : "in") << "creasing, last: " << last << ", swap_required: " << swap_required << ", reversal_required: " << reversal_required << endl;
 
-    if (non_monotonic.size() == 0)
-        cout << "yes" << endl;
-    else if (non_monotonic.size() == 1) {
-        if (l_a == 2) {
-            cout << "yes\nswap " << 0 + 1 << " " << 1 + 1 << endl;
-        } else if (l_a == 3) {
-            if (non_monotonic[0] == 1) {
-                if (arr[0] > arr[1] && arr[2] < arr[1])
-                    cout << "yes\nswap " << 0 + 1 << " " << 2 + 1 << endl;
-                else
-                    cout << "no" << endl;
-            } else { //  idx = 2
-               if (arr[2] > arr[0])
-                    cout << "yes\nswap " << 1 + 1 << " " << 2 + 1 << endl;
-                else
-                    cout << "no" << endl;
-            }
-        } else if (l_a > 3) {
-            // reverse required
-            if (non_monotonic[0] == 1 ||
-                arr[non_monotonic[0] - 2] < arr[l_a - 1])
-                cout << "yes\nreverse " << non_monotonic[0] - 1 + 1 << " " << l_a - 1 + 1 << endl;
-            else
+            if (swapped || reversed) {
+                //cout << "[debug] inversion @ [" << l << "]" << arr[l] << ", but already swapped / reversed" << endl;
                 cout << "no" << endl;
-        }
-    } else if (non_monotonic.size() == 2) {
-        // swap or reverse
-        if (non_monotonic[1] - non_monotonic[0] == 1) {
-            if (arr[non_monotonic[0] - 1] < arr[non_monotonic[1]] &&
-                (non_monotonic[1] == l_a - 1 || arr[non_monotonic[0]] < arr[non_monotonic[1] + 1]))
-                cout << "yes\nswap " << non_monotonic[0] - 1 + 1 << " " << non_monotonic[1] - 1 + 1 << endl;
-            else
-                cout << "no" << endl;
-        } else {
-            if (arr[non_monotonic[0] - 1] > arr[non_monotonic[0]] &&
-                arr[non_monotonic[0]] > arr[non_monotonic[0] + 1]) {
-                // reverse
-                if (arr[non_monotonic[0] - 1] < arr[non_monotonic[1]] &&
-                    (non_monotonic[1] == l_a - 1 || arr[non_monotonic[0]] < arr[non_monotonic[1] + 1]))
-                    cout << "yes\nreverse " << non_monotonic[0] - 1 + 1 << " " << non_monotonic[1] - 1 + 1 << endl;
-                else
-                    cout << "no" << endl;
+                return;
+            }
+            last_set = false;
+            if (l == l_a - 1) {
+                // inflection on final item
+                if (swap_required) {
+                    // validate swap
+                    if (l - left == 1 && arr[left - 1] < arr[l]) {
+                        // adjacent
+                        right = l;
+                        cout << "yes\nswap " << left + 1 << " " << right + 1 << endl;
+                    } else if (arr[left] > arr[l - 1] &&
+                            arr[left + 1] > arr[l] &&
+                            (left == 0 || arr[left - 1] < arr[l])) {
+                        right = l;
+                        cout << "yes\nswap " << left + 1 << " " << right + 1 << endl;
+                    } else {
+                        //cout << "[debug] last item inversion, impossible swap";
+                        cout << "no" << endl;
+                    }
+                } else {
+                    // 1 2 4 8 7
+                    // swap with previous only possibility
+                    if (arr[l - 2] < arr[l])
+                        cout << "yes\nswap " << l - 1 + 1 << " " << l + 1 << endl;
+                    else {
+                        //cout << "[debug] last item inversion, impossible swap";
+                        cout << "no" << endl;
+                    }
+                }
+                return;
             } else {
-                // swap
-                if (arr[non_monotonic[0] - 1] < arr[non_monotonic[1]] &&
-                    (non_monotonic[1] == l_a - 1 || arr[non_monotonic[0]] < arr[non_monotonic[1] + 1]))
-                    cout << "yes\nswap " << non_monotonic[0] - 1 + 1 << " " << non_monotonic[1] - 1 + 1 << endl;
-                else
+                // we can peek forward
+                int direction2 = (arr[l + 1] - arr[l]) / abs((arr[l + 1] - arr[l]));
+                //if (l - last == 1) {
+                if (direction2 == direction) {
+                    // next item restores the current direction
+                    if ((arr[l - 1] < arr[l + 1]) &&
+                        (l < 2 || arr[l - 2] < arr[l])) {
+                        // adjacent swap
+                        // 4 5 9 |7| 11 16 18
+                        left = l - 1;
+                        last = l - 1;
+                        last_set = true;
+                        swap_required = 1;
+                        //right = l;
+                        //swapped = true;
+                    } else if (arr[l + 1] < arr[l - 1]) {
+                         // 1 3 6 10 |7| 8
+                         // 1 3 6 10 |5| 8
+                         // next restores increasing direction but l can't be swapped out so l - 1 MUST move or else die
+                         if (l <= 1 || arr[l] > arr[l - 2]) {
+                             if (!swap_required) {
+                                 // 1 3 6 10 |7| 8
+                                 left = l - 1;
+                                 swap_required = true;
+                                 last = left;
+                                 last_set = true;
+                             } else {
+                                 // 1 3 5 10 7 8 12 |6| 11  left=10
+                                 //cout << "[debug] single error, impossible to rectify this a second time.." << endl;
+                                 cout << "no" << endl;
+                                 return;
+                             }
+                         } else {
+                             // 1 3 6 10 |5| 8
+                             //cout << "[debug] cannot swap [" << l << "]" << arr[l] << " or [" << l - 1 << "]" << arr[l - 1] << endl;
+                             cout << "no" << endl;
+                             return;
+                         }
+                    } else {
+                        // l can swap out
+                        if (!swap_required) {
+                            left = l;
+                            swap_required = true;
+                            last = left;
+                            last_set = true;
+                        } else {
+                            // legal swap?
+                            right = l;
+                            if (((left == 0 || arr[left - 1] < arr[right]) && arr[left + 1] > arr[right]) &&
+                                (arr[right - 1] < arr[left] && (right == l_a - 1 || arr[right + 1] > arr[left]))) {
+                                // 1 3 5 10 7 8 12 |6| 11  left=10
+                                cout << "yes\nswap " << left + 1 << " " << right + 1 << endl;
+                            } else {
+                                //cout << "[debug] illegal swap";
+                                cout << "no" << endl;
+                            }
+                            return;
+                        }
+                    }
+                }
+            }
+            inflections.push_back(l);
+            direction *= -1;
+            if (!last_set)
+                last = l;
+        } else if (direction < 0 && arr[l] > arr[l - 1]) {
+            // inflection
+            //cout << "[debug] @ [" << l << "]" << arr[l] << ", now " << (direction == 1 ? "de" : "in") << "creasing, last: " << last << ", swap_required: " << swap_required << ", reversal_required: " << reversal_required << endl;
+            if (swapped || reversed) {
+                //cout << "[debug] inversion @ [" << l << "]" << arr[l] << ", but already swapped / reversed" << endl;
+                cout << "no" << endl;
+                return;
+            }
+            if (swap_required) {
+                right = l - 1;
+                if (right - left == 1) {
+                    // adjacent swap possible ?
+                    // 4 5 9 7 |11| 16 18 | yes
+                    // [11]894947 [12]125082 |[13]137123| [14]137276 left: 11  | no
+                    if (arr[left - 1] < arr[l] &&
+                        (last == 0 || arr[left] < arr[right + 1])) {
+                        swapped = true;
+                    }
+                }
+            } else if (!swap_required && l - last > 1) {
+                // range reversal possible?
+                reversal_required = true;
+                // 10 9 8 7 15 16
+                left = last - 1;
+                right = l - 1;
+                if (arr[left - 1] < arr[l] &&
+                    (last == 0 || arr[left - 1] < arr[right])) {
+                    reversed = true;
+                } else {
+                    //cout << "[debug] inversion @ [" << l << "]" << arr[l] << ", but impossible reversal required" << endl;
                     cout << "no" << endl;
+                    return;
+                }
             }
+            inflections.push_back(l);
+            direction *= -1;
+            last = l;
+        }
+    }
+
+    //cout << "[debug] end" << endl;
+    if (swapped)
+        // single valid swap and made it to the end without further anomalies
+        cout << "yes\nswap " << left + 1 << " " << right + 1 << endl;
+    else if (reversed)
+        // single valid reverse and made it to the end without further anomalies
+        cout << "yes\nreverse " << left + 1 << " " << right + 1 << endl;
+    else if (inflections.size() == 0) {
+        // dependent up last idx
+        if (direction > 0)
+            // 1 2 3 4
+            cout << "yes" << endl;
+        else
+            // 10 9 8 7  // full reverse
+            cout << "yes\nreverse 1 " << l_a << endl;
+    } else if (inflections.size() == 1 && direction == -1) {
+        // decreasing subset to end
+        left = last - 1;
+        right = l_a - 1;
+        if (arr[right] > arr[left - 1])
+            cout << "yes\nreverse " << last - 1 + 1 << " " << l_a - 1 + 1 << endl;
+        else {
+            //cout << "[debug] impossible reversal, incompatible end-points" << endl;
+            cout << "no" << endl;
         }
-    } else if (non_monotonic.size() > 2)
+    } else
         cout << "no" << endl;
 }
 
-- 
2.23.0


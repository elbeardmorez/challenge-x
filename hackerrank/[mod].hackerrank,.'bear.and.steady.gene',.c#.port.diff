From 2ccd8b27655736763047feb76d37bf988d8d43f1 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 25 Oct 2019 09:19:41 +0100
Subject: [mod] hackerrank, 'bear and steady gene', c# port

-replace named tuple (c# v7.0+) usage with old 'ItemX' addressing
---
 .../bear.and.steady.gene.cs                   | 40 +++++++++----------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/hackerrank/algorithms.-.strings.-.medium.-.bear.and.steady.gene/bear.and.steady.gene.cs b/hackerrank/algorithms.-.strings.-.medium.-.bear.and.steady.gene/bear.and.steady.gene.cs
index cbce42f..5be22c9 100644
--- a/hackerrank/algorithms.-.strings.-.medium.-.bear.and.steady.gene/bear.and.steady.gene.cs
+++ b/hackerrank/algorithms.-.strings.-.medium.-.bear.and.steady.gene/bear.and.steady.gene.cs
@@ -57,8 +57,8 @@ class Solution {
         foreach (var k_v in grouped)
             WriteLine($"k: {k_v.Key}, [v]: {k_v.Value}");
         */
-        var remove = new List<(char c, int count)>();
-        var add = new List<(char c, int count)>();
+        var remove = new List<Tuple<char, int>>();
+        var add = new List<Tuple<char, int>>();
 
         int count, idx, idx2, last;
         char chr, c;
@@ -69,11 +69,11 @@ class Solution {
             if (grouped.ContainsKey(c_)) {
                 count = grouped[c_] - target;
                 if (count > 0)
-                    remove.Add((c_, count));
+                    remove.Add(new Tuple<char, int>(c_, count));
                 else if (count < 0)
-                    add.Add((c_, target - grouped[c_]));
+                    add.Add(new Tuple<char, int>(c_, target - grouped[c_]));
             } else
-                add.Add((c_, count));
+                add.Add(new Tuple<char, int>(c_, count));
         }
         /*
         WriteLine("remove: " + String.Join(", ", remove.Select(x => "[" + x.c + "," + x.count.ToString() + "]")));
@@ -90,16 +90,16 @@ class Solution {
             return 0;
         }
 
-        var balance = remove.Select(x => x.count).Sum();
+        var balance = remove.Select(x => x.Item2).Sum();
 
         int idx_left = l_chars;
         int idx_right = 0;
-        var char_visited_idxs = new List<(char c, List<int> visited, int[] last)>();
+        var char_visited_idxs = new List<Tuple<char, List<int>, int[]>>();
 
         // zero case
         foreach (var c_count in remove) {
-            idx = gene.IndexOf(c_count.c);
-            char_visited_idxs.Add((c_count.c, new List<int>(new int[]{idx}), new int[]{0}));
+            idx = gene.IndexOf(c_count.Item1);
+            char_visited_idxs.Add(new Tuple<char, List<int>, int[]>(c_count.Item1, new List<int>(new int[]{idx}), new int[]{0}));
             idx_left = Math.Min(idx_left, idx);
             idx_right = Math.Max(idx_right, idx);
         }
@@ -111,30 +111,30 @@ class Solution {
             chr = gene[idx];
             idx2 = 0;
             while (idx2 < l_remove) {
-                c = char_visited_idxs[idx2].c;
-                q = char_visited_idxs[idx2].visited;
-                last = char_visited_idxs[idx2].last[0];
+                c = char_visited_idxs[idx2].Item1;
+                q = char_visited_idxs[idx2].Item2;
+                last = char_visited_idxs[idx2].Item3[0];
                 //WriteLine($"idx: {idx}, chr: {chr}, idx2: {idx2}, c: {c}, balance: {balance}, [q]: {q.Count}, last: {last}");
                 if (chr == c) {
-                    if (q.Count - last < remove[idx2].count) {
+                    if (q.Count - last < remove[idx2].Item2) {
                         balance--;
                         //WriteLine($"char: {chr}, reduced balance: {balance}");
                     }
                     q.Add(idx);
                     //WriteLine($"comparing char: {chr}'s length - last: {q.Count - last} to remove count: {target}");
-                    if (q.Count - last > remove[idx2].count) {
+                    if (q.Count - last > remove[idx2].Item2) {
                         // fake pop
                         if (q[last] == idx_left) {
                             // set next min
-                            char_visited_idxs[idx2].last[0]++;
+                            char_visited_idxs[idx2].Item3[0]++;
                             last++;
                             idx_left = q[last];
                             foreach (var c_visited_last in char_visited_idxs) {
-                                if (c_visited_last.visited[c_visited_last.last[0]] < idx_left)
-                                    idx_left = c_visited_last.visited[c_visited_last.last[0]];
+                                if (c_visited_last.Item2[c_visited_last.Item3[0]] < idx_left)
+                                    idx_left = c_visited_last.Item2[c_visited_last.Item3[0]];
                             }
                         } else
-                            char_visited_idxs[idx2].last[0]++;
+                            char_visited_idxs[idx2].Item3[0]++;
                     }
                     if (balance == 0) {
                         // possible set
@@ -153,8 +153,8 @@ class Solution {
             if (idx % 50000 == 0) {
                 WriteLine($"idx: {idx}, balance: {balance}, idx_left: {idx_left}, global_min: {global_min}");
                 foreach (var p in char_visited_idxs) {
-                    WriteLine($"[{p.c}] {p.visited.Count - p.last[0]}");
-                    //WriteLine($"[{p.c}] {String.Join(" ", p.visited.Skip(p.last[0]).Select(x => x.ToString()))}");
+                    WriteLine($"[{p.Item1}] {p.Item2.Count - p.Item3[0]}");
+                    //WriteLine($"[{p.Item1}] {String.Join(" ", p.Item2.Skip(p.Item3[0]).Select(x => x.ToString()))}");
                 }
             }
             */
-- 
2.23.0


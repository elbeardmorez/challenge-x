From be8095c2a8933eaffa7a74011364de3f4481321b Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 27 Mar 2020 06:22:02 +0000
Subject: [add] hackerrank, 'beautiful pairs', rust port

---
 .../beautiful.pairs.rs                        | 75 ++++++++++++++++++-
 1 file changed, 74 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.greedy.-.easy.-.beautiful.pairs/beautiful.pairs.rs b/hackerrank/algorithms.-.greedy.-.easy.-.beautiful.pairs/beautiful.pairs.rs
index 75b9783..598fef2 100644
--- a/hackerrank/algorithms.-.greedy.-.easy.-.beautiful.pairs/beautiful.pairs.rs
+++ b/hackerrank/algorithms.-.greedy.-.easy.-.beautiful.pairs/beautiful.pairs.rs
@@ -1,3 +1,76 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
 
+fn beautiful_pairs(a: &mut Vec<i32>, b: &mut Vec<i32>) -> i32 {
+    /*
+    A|                  3 5  7 11 5 8
+    B| 5 7 11 10 5 8 -> 5 7 11  3 5 8
+    beautiful pair indices -> (0,3),(1,0),(2,1),(3,2),(4,4),(5,5)
+    beautiful set is the maximal 6 pairs as no l[i] or r[i] is duplicated above
+
+    search for common pairs
+    return #common (+1 if #common isn't maximal as one can always modify an unmatched B[i] -> some unmatched A[i]
+                       else (common == n) - 1 if maximal, as 1 element in B MUST be changed as per the problem constraints)
+    thus return n - 1 if #common == n else #common + 1
+    */
+    let mut common = 0;
+    a.sort();
+    b.sort();
+    let n = a.len();
+    let mut idx1 = 0;
+    let mut idx2 = 0;
+    while idx1 < n && idx2 < n {
+        if a[idx1] == b[idx2] {
+            common += 1;
+            idx1 += 1;
+            idx2 += 1;
+        } else if a[idx1] < b[idx2] {
+            idx1 += 1;
+        } else if b[idx2] < a[idx1] {
+            idx2 += 1;
+        }
+    }
+    if common == n {
+        return (n as i32) - 1;
+    } else {
+        return (common as i32) + 1;
+    }
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_end_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    let mut data: Vec<i32>;
+    let mut data2: Vec<i32>;
+    next_line(&mut line);  // ignore count
+    next_line(&mut line);
+    data = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    next_line(&mut line);
+    data2 = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    let res = beautiful_pairs(&mut data, &mut data2);
+    f.write_all(res.to_string().as_bytes()).expect("file io error");
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.26.0


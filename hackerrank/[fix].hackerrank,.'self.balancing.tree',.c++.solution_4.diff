From d1443ad26e2ac8d9165a46933f5a06afaf8210d9 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sat, 14 Jul 2018 15:14:14 +0100
Subject: [fix] hackerrank, 'self balancing tree', c++ solution

-iterate back up tree updating parent node heights on each sub-node
addition
---
 .../self.balancing.tree.cpp                   | 131 +++++++++++-------
 1 file changed, 83 insertions(+), 48 deletions(-)

diff --git a/hackerrank/data.structures.-.balanced.trees.-.medium.-.self.balancing.tree/self.balancing.tree.cpp b/hackerrank/data.structures.-.balanced.trees.-.medium.-.self.balancing.tree/self.balancing.tree.cpp
index 93afea4..14b70f8 100644
--- a/hackerrank/data.structures.-.balanced.trees.-.medium.-.self.balancing.tree/self.balancing.tree.cpp
+++ b/hackerrank/data.structures.-.balanced.trees.-.medium.-.self.balancing.tree/self.balancing.tree.cpp
@@ -10,9 +10,11 @@ typedef struct node
 int balance_factor(node* n) {
     int left = n->left == NULL ? -1 : n->left->ht;
     int right = n->right == NULL ? -1 : n->right->ht;
-    //if (n->val == 4)
-    //    cout << "balance factor for node: " << n->val
-    //        << ", left-ht: " << left << ", right-ht: " << right << endl;
+    /*
+    if (n->val == 51)
+        cout << "balance factor for node: " << n->val
+            << ", left-ht: " << left << ", right-ht: " << right << endl;
+    */
     return left - right;
 }
 
@@ -61,6 +63,7 @@ bool find_parents(node* n, node* target, vector<node*>* parents) {
             res = find_parents(n->right, target, parents);
     }
     if (res)
+        // closest parent will be at the front, root will be at the back!
         parents->push_back(n);
     return res;
 }
@@ -97,13 +100,45 @@ void output(vector<string>* tree) {
     cout << endl;
 }
 
-
 int node_height(node* n) {
     int left = n->left == NULL ? -1 : n->left->ht;
     int right = n->right == NULL ? -1 : n->right->ht;
     return max(left, right) + 1;
 }
 
+void update_parent_node_heights(node* root, node* n) {
+    auto* parents = new vector<node*>();
+    find_parents(root, n, parents);
+    /*
+    cout << "node " << n->val << " parents:";
+    for (auto iter = parents->begin(); iter != parents->end(); ++iter)
+        cout << " " << (*iter)->val;
+    cout << endl;
+    */
+
+    for (auto iter = parents->begin(); iter != parents->end(); ++iter) {
+        node *p = *iter;
+        //cout << "updating height for parent: " << p->val << endl;
+        p->ht = node_height(p);
+    }
+}
+
+void tree_reset(node* root) {
+    auto* path = new vector<node *>();
+    traverse(root, path);
+    auto* leaves = new vector<node *>();
+    // get all leaves and set heights 0
+    for (auto iter = path->begin(); iter != path->end(); ++iter) {
+        node* n = *iter;
+        n->ht = 0;
+        leaves->push_back(n);
+    }
+    // rebuild heights
+    auto* parents = new vector<node *>();
+    for (auto iter = path->begin(); iter != path->end(); ++iter)
+        update_parent_node_heights(root, *iter);
+}
+
 node* balance_tree(node* root) {
     node* un = NULL;
     int it = 0;
@@ -117,23 +152,12 @@ node* balance_tree(node* root) {
         tweaked = false;
         path->clear();
         traverse(root, path);
-        //path_info->clear();
-        //traverse_info(root, path_info);
-        //output(path_info);
         for (auto iter = path->begin(); iter != path->end(); ++iter) {
             bf = balance_factor(*iter);
             if (abs(bf) != 2)
                 continue;
+            //cout << "node: " << un->val << " unbalanced" << endl;
             un = *iter;
-            auto* parents = new vector<node*>();
-            find_parents(root, un, parents);
-            /*
-            cout << "node: " << un->val << " unbalanced" << endl;
-            cout << "parents:";
-            for (auto iter = parents->begin(); iter != parents->end(); ++iter)
-                cout << " " << *iter;
-            cout << endl;
-            */
             if (bf == 2 && un->left != NULL && balance_factor(un->left) == -1) {
                 // left right case
                 //cout << "left right case" << endl;
@@ -177,7 +201,7 @@ node* balance_tree(node* root) {
                 //cout << "left left case" << endl;
                 tweaked = true;
 
-                node* parent = parents->size() == 0 ? NULL : parents->front();
+                node* parent = find_parent(path, un);
                 node* n1 = un->left;
                 node* n2 = un->left->left;
                 if (parent != NULL) {
@@ -203,7 +227,7 @@ node* balance_tree(node* root) {
                 //cout << "right right case" << endl;
                 tweaked = true;
 
-                node* parent = parents->size() == 0 ? NULL : parents->front();
+                node* parent = find_parent(path, un);
                 node* n1 = un->right;
                 node* n2 = un->right->right;
                 if (parent != NULL) {
@@ -225,18 +249,26 @@ node* balance_tree(node* root) {
                     root = base;
             }
             if (tweaked) {
-                // reset heights of parent nodes
-                for (auto iter = parents->begin(); iter != parents->end(); ++iter) {
-                    node *p = *iter;
-                    p->ht = node_height(p);
-                    //cout << "updating height for parent: " << p->val << endl;
-                }
+                update_parent_node_heights(root, un);
+                /*
+                cout << "# tree tweaked!" << endl;
+                cout << "## pre reset!" << endl;
+                path_info->clear();
+                traverse_info(root, path_info);
+                output(path_info);
+                //tree_reset(root);
+                cout << "## post reset!" << endl;
+                path_info->clear();
+                traverse_info(root, path_info);
+                output(path_info);
+                */
             }
             it++;
             if (it >= 100) {
                 cout << "find_unbalanced loop hit limit!" << endl; // big big tree or bug if hit!
                 break;
             }
+
         } // for
         if (!tweaked)
             search = false;
@@ -255,55 +287,58 @@ node* node_new(int val) {
 }
 
 bool descend(node* n, int val) {
-    bool deeper = false;
+    bool res = false;
     if (val < n->val) {
         if (n->left == NULL) {
             n->left = node_new(val);
-            if (n->right == NULL)
-                deeper = true;
+            res = true;
         }
         else
-            deeper = descend(n->left, val);
+            res = descend(n->left, val);
     }
     else {
         if (n->right == NULL) {
             n->right = node_new(val);
-            if (n->left == NULL)
-                deeper = true;
-            deeper = true;
+            res = true;
         }
         else
-            deeper = descend(n->right, val);
+            res = descend(n->right, val);
     }
-    if (deeper)
-        n->ht++;
-    return deeper;
+    if (res)
+        n->ht = node_height(n);
+    return res;
 }
 
 node * insert(node * root,int val)
 {
     auto tree = new vector<string>();;
 
-    //cout << "# tree initially" << endl;
-    //traverse_info(root, tree);
-    //output(tree);
+    /*
+    cout << "# tree initially" << endl;
+    traverse_info(root, tree);
+    output(tree);
+    */
 
     if (root == NULL)
         root = node_new(val);
     else {
         descend(root, val);
-        //cout << "# tree post insert" << endl;
-        //tree->clear();
-        //traverse_info(root, tree);
-        //output(tree);
+
+        /*
+        cout << "# tree post insert" << endl;
+        tree->clear();
+        traverse_info(root, tree);
+        output(tree);
+        */
+
         root = balance_tree(root);
     }
-
-    //cout << "# tree post rebalance" << endl;
-    //tree->clear();
-    //traverse_info(root, tree);
-    //output(tree);
+    /*
+    cout << "# tree post rebalance" << endl;
+    tree->clear();
+    traverse_info(root, tree);
+    output(tree);
+    */
 
     return root;
 }
-
-- 
2.23.0


From 18bee765f811b448de3f5e0661143d9122b791a6 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sat, 19 Oct 2019 06:46:54 +0100
Subject: [add] hackerrank, 'matrix layer rotation', c# port

---
 .../matrix.layer.rotation.cs                  | 79 +++++++++++++++++++
 1 file changed, 79 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.hard.-.matrix.layer.rotation/matrix.layer.rotation.cs b/hackerrank/algorithms.-.implementation.-.hard.-.matrix.layer.rotation/matrix.layer.rotation.cs
index 15f9b2d..d4fa61a 100644
--- a/hackerrank/algorithms.-.implementation.-.hard.-.matrix.layer.rotation/matrix.layer.rotation.cs
+++ b/hackerrank/algorithms.-.implementation.-.hard.-.matrix.layer.rotation/matrix.layer.rotation.cs
@@ -12,12 +12,91 @@ using System.Text.RegularExpressions;
 using System.Text;
 using System;
 
+using static System.Console;
+
 class Solution {
 
     // Complete the matrixRotation function below.
     static void matrixRotation(List<List<int>> matrix, int r) {
+        /*
+        concentric circles of rotation
+
+        from outside to in, iterate circles collecting values to forms
+        flattened subsets of the matrix
+        then starting from r offset, replace numbers and wrap back to the
+        start (i.e. cycle r times)
+        */
+
+        var d1 = matrix[0].Count;
+        var d2 = matrix.Count;
+
+        /*;
+        WriteLine($"matrix: {d2}x{d1} rotated {r} times");
+        for (var l = 0; l < d2; l++) {
+            //WriteLine($"[${l}] {String.Join(" ", matrix[l].Select(x => x.ToString()))}");
+            WriteLine($"{String.Join(" ", matrix[l].Select(x => x.ToString()))}");
+        }
+        WriteLine($"");
+        */;
 
+        var h1 = 0;
+        var h2 = d1 - 1;
+        var v1 = 0;
+        var v2 = d2 - 1;
+        var ring = 1;
+        int l_numbers;
+        List<int> numbers;
+        int idx;
+        while (h2 - h1 > 0 && v2 - v1 > 0) {
+            numbers = new List<int>();
 
+            // iterate ring;
+            for (var l = h1; l <= h2; l++) {
+                numbers.Add(matrix[v1][l]);
+            }
+            for (var l = v1 + 1; l < v2; l++) {
+                numbers.Add(matrix[l][h2]);
+            }
+            for (var l = h2; l >= h1; l--) {
+                numbers.Add(matrix[v2][l]);
+            }
+            for (var l = v2 - 1; l > v1; l--) {
+                numbers.Add(matrix[l][h1]);
+            }
+
+            l_numbers = numbers.Count;
+            idx = r % l_numbers;  // rotated / cycled start offset;
+            //WriteLine("[ring:" + ring.ToString("00") + "|rotate:" + idx.ToString("00") + "] " + String.Join(" ", numbers.Select(x => x.ToString())));
+
+            for (var l = h1; l <= h2; l++) {
+                matrix[v1][l] = numbers[idx % l_numbers];
+                idx += 1;
+            }
+            for (var l = v1 + 1; l < v2; l++) {
+                matrix[l][h2] = numbers[idx % l_numbers];
+                idx += 1;
+            }
+            for (var l = h2; l >= h1; l--) {
+                matrix[v2][l] = numbers[idx % l_numbers];
+                idx += 1;
+            }
+            for (var l = v2 - 1; l > v1; l--) {
+                matrix[l][h1] = numbers[idx % l_numbers];
+                idx += 1;
+            }
+            // contract;
+            h1 += 1;
+            h2 -= 1;
+            v1 += 1;
+            v2 -= 1;
+            ring += 1;
+        }
+
+        //WriteLine($"");
+        for (var l = 0; l < d2; l++) {
+            //WriteLine($"[${l}] {String.Join(" ", matrix[l].Select(x => x.ToString()))}");
+            WriteLine($"{String.Join(" ", matrix[l].Select(x => x.ToString()))}");
+        }
     }
 
     static void Main(string[] args) {
-- 
2.23.0


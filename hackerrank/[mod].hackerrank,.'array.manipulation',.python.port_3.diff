From 516240c4cdad3c8cb26416f496019077bc90d74b Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 1 Jul 2018 09:11:40 +0100
Subject: [mod] hackerrank, 'array manipulation', python port

-speed-up, unpack all query parts
---
 .../array.manipulation.py                     | 24 +++++++++----------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.py b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.py
index db16d1b..0ebb0da 100644
--- a/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.py
+++ b/hackerrank/data.structures.-.arrays.-.hard.-.array.manipulation/array.manipulation.py
@@ -49,35 +49,35 @@ def arrayManipulation(n, queries):
 
     for i in range(nq):
         q = queries[i]
+        q0, q1, q2 = q
 
-        score += q[2]
+        score += q2
         # maintain max score
         if score > max:
             max = score
-        #print("i: {}, idx: {}, score: {} [+= {}]".format(i, q[0], score, q[2]))
+        #print("i: {}, idx: {}, score: {} [+= {}]".format(i, q0, score, q2))
 
         # note drop index
-        drop_at_index = q[1]
-        if drop_at_index in d_drop_at_index:
-            d_drop_at_index[drop_at_index] += q[2]
+        if q1 in d_drop_at_index:
+            d_drop_at_index[q1] += q2
         else:
-            d_drop_at_index[drop_at_index] = q[2]
+            d_drop_at_index[q1] = q2
             if n_drop_at_index_root == None:
-                n_drop_at_index_root = Node(drop_at_index)
+                n_drop_at_index_root = Node(q1)
                 n_drop_at_index_last = n_drop_at_index_root
             else:
                 # ensure ordered insert
                 n_insert = n_drop_at_index_last
                 while n_insert != None and \
-                      n_insert.value > drop_at_index:
+                      n_insert.value > q1:
                     n_insert = n_insert._prev
                 if n_insert == None:
-                    n = Node(drop_at_index, _next=n_drop_at_index_root)
+                    n = Node(q1, _next=n_drop_at_index_root)
                     n_drop_at_index_root._prev = n
                     n_drop_at_index_root = n
                 else:
                     _next = n_insert._next
-                    n = Node(drop_at_index, n_insert, _next)
+                    n = Node(q1, n_insert, _next)
                     n_insert._next = n
                     if _next != None:
                         _next._prev = n
@@ -90,11 +90,11 @@ def arrayManipulation(n, queries):
 
         # next range start
         if i == nq - 1:
-            idx_next = q[1] + 1
+            idx_next = q1 + 1
         else:
             idx_next = queries[i + 1][0]
 
-        #print("i: {}, idx: {}, score: {}, idx_next: {}".format(i, q[0], score, idx_next))
+        #print("i: {}, idx: {}, score: {}, idx_next: {}".format(i, q0, score, idx_next))
 
         # fast forward idx accounting for removals
         while n_drop_at_index_root != None and \
-- 
2.23.0


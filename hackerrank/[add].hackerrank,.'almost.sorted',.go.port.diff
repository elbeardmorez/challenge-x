From 59b303ac4274b43bc8217be8fd9994968587eb92 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sat, 20 Jul 2019 21:45:02 +0100
Subject: [add] hackerrank, 'almost sorted', go port

---
 .../almost.sorted.go                          | 258 ++++++++++++++++++
 1 file changed, 258 insertions(+)

diff --git a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.go b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.go
index 3c3ba4b..f13c47e 100644
--- a/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.go
+++ b/hackerrank/algorithms.-.implementation.-.medium.-.almost.sorted/almost.sorted.go
@@ -7,12 +7,270 @@ import (
     "os"
     "strconv"
     "strings"
+    "math"
 )
 
 // Complete the almostSorted function below.
 func almostSorted(arr []int32) {
+    /*
+    sorted | "yes"
+    sortable | "swap l r"
+    sortable | "reverse l r"
+    unsortable | "no"
 
+    // 1 2 5 4 3 13
+    1 2 5 | 4 .. but the previous (5) MUST be after, so include it in the decreasing run
+    1 2 | 5 4 3 | 13 here we look at previous increasing run, the endpoint (2) must be < 3 AND 5 < 13
+    ..then based on size of negative run, either swap (<=3) or reverse (>3)
 
+    // 1 2 55 4 6 13 1 15
+    1 2 55 | 4 .. but .. ""      ""
+    1 2 | 55 4 | 6 .. but a negative run of size 2 is actually a single swap digit
+    1 2 | 55 | 4 6 13 | 1
+
+    // 4 5 9 7 8 6 12
+    4 5 9 | 7 .. but 8 is increasing
+        either 9 is a mistake, or 7 is a mistake
+        should it be: 4 5 | 9 | 7 8 or
+                      4 5 9 | 7 | 8
+        4 5 | 9 | 7
+
+    // 4 5 9 7 11 16 18
+
+    */
+    //fmt.Printf("[debug] considering set: %v\n", arr)
+
+    var l_a = int32(len(arr))
+    var inflections []int32
+    var reversal_required = false
+    _ = reversal_required
+    var reversed = false
+    var swap_required = false
+    var swapped = false
+    var left int32 = -1
+    var right int32 = -1
+
+    var last int32 = 0
+    var last_set = false
+
+    // simplify main algorithm by removing short edge cases {
+    if l_a == 2 {
+        if arr[0] < arr[1] {
+            fmt.Printf("yes\n")
+        } else {
+            fmt.Printf("yes\nswap 1 2\n")
+        }
+        return
+    } else if l_a == 3 {
+        if arr[0] < arr[1] && arr[1] < arr[2] {
+            // 1 2 3
+            fmt.Printf("yes\n")
+        } else if arr[0] > arr[1] && arr[1] > arr[2] {
+            // 3 2 1
+            fmt.Printf("yes\nswap 1 3\n")
+        } else if arr[0] < arr[2] && arr[1] > arr[2] {
+            // 1 3 2
+            fmt.Printf("yes\nswap 2 3\n")
+        } else {
+            // 2 3 1
+            fmt.Printf("no\n")
+        }
+        return
+    }
+
+    var direction int32
+    if arr[1] > arr[0] {
+      direction = 1
+    } else {
+      direction = -1
+      reversal_required = true
+      left = 0
+    }
+
+    // 4 5 9 | 7 | 8 | 6 | 12
+    // 4 5 9 | 7
+    //            7 HAS to move left of 9
+    //            can i swap 7 with 9 ? no, 9 > 8
+    //            only other way is swap 9 for something else
+
+    //fmt.Printf("[debug] initial direction: %v\n", direction)
+    for l_ := 1; l_ < len(arr); l_++ {
+        l := int32(l_)
+        //fmt.Printf("[debug] l: %v, comparing %v with previous %v\n", l, arr[l], arr[l - 1])
+        if direction > 0 && arr[l] < arr[l - 1] {
+            // inflection
+            //fmt.Printf("[debug] @ [%v]%v, now %vcreasing, last: %v, swap_required: %v, reversal_required: %v\n", l, arr[l], func() string { if direction == 1 { return "de" } else { return "in" }}(), last, swap_required, reversal_required)
+
+            if swapped || reversed {
+                //fmt.Printf("[debug] inversion @ [%v]%v, but already swapped / reversed\n", l, arr[l])
+                fmt.Printf("no\n")
+                return
+            }
+            last_set = false
+            if l == l_a - 1 {
+                // inflection on final item
+                if swap_required {
+                    // validate swap
+                    if l - left == 1 && arr[left - 1] < arr[l] {
+                        // adjacent
+                        right = l
+                        fmt.Printf("yes\nswap %v %v\n", left + 1, right + 1)
+                    } else if (arr[left] > arr[l - 1] &&
+                            arr[left + 1] > arr[l] &&
+                            (left == 0 || arr[left - 1] < arr[l])) {
+                        right = l
+                        fmt.Printf("yes\nswap %v %v\n", left + 1, right + 1)
+                    } else {
+                        //fmt.Printf("[debug] last item inversion, impossible swap\n")
+                        fmt.Printf("no\n")
+                    }
+                } else {
+                    // 1 2 4 8 7
+                    // swap with previous only possibility
+                    if arr[l - 2] < arr[l] {
+                        fmt.Printf("yes\nswap %v %v\n", l - 1 + 1, l + 1)
+                    } else {
+                        //fmt.Printf("[debug] last item inversion, impossible swap\n")
+                        fmt.Printf("no\n")
+                    }
+                }
+                return
+            } else {
+                // we can peek forward
+                var direction2 = int32((arr[l + 1] - arr[l]) / int32(math.Abs(float64((arr[l + 1] - arr[l])))))
+                if direction2 == direction {
+                    // next item restores the current direction
+                    if (arr[l - 1] < arr[l + 1] &&
+                        (l < 2 || arr[l - 2] < arr[l])) {
+                        // adjacent swap
+                        // 4 5 9 |7| 11 16 18
+                        left = l - 1
+                        last = l - 1
+                        last_set = true
+                        swap_required = true
+                    } else if arr[l + 1] < arr[l - 1] {
+                         // 1 3 6 10 |7| 8
+                         // 1 3 6 10 |5| 8
+                         // next restores increasing direction but l can't be swapped out so l - 1 MUST move or else die
+                         if l <= 1 || arr[l] > arr[l - 2] {
+                             if !swap_required {
+                                 // 1 3 6 10 |7| 8
+                                 left = l - 1
+                                 swap_required = true
+                                 last = left
+                                 last_set = true
+                             } else {
+                                 // 1 3 5 10 7 8 12 |6| 11  left=10
+                                 //fmt.Printf("[debug] single error, impossible to rectify this a second time..\n")
+                                 fmt.Printf("no\n")
+                                 return
+                             }
+                         } else {
+                             // 1 3 6 10 |5| 8
+                             //fmt.Printf("[debug] cannot swap [%v]%v or [%v]%v\n", l, arr[l], l - 1, arr[l - 1])
+                             fmt.Printf("no\n")
+                             return
+                         }
+                    } else {
+                        // l can swap out
+                        if !swap_required {
+                            left = l
+                            swap_required = true
+                            last = left
+                            last_set = true
+                        } else {
+                            // legal swap?
+                            right = l
+                            if ((left == 0 || arr[left - 1] < arr[right]) && arr[left + 1] > arr[right] &&
+                                (arr[right - 1] < arr[left] && (right == l_a - 1 || arr[right + 1] > arr[left]))) {
+                                // 4 5 9 7 8 6 |12|  left=[2]9
+                                // 1 3 5 10 7 8 12 |6| 11  left=[3]10
+                                swapped = true
+                                //fmt.Printf("[debug] ignoring next inflection\n")
+                                continue
+                            } else {
+                                //fmt.Printf("[debug] illegal swap\n")
+                                fmt.Printf("no\n")
+                                return
+                            }
+                        }
+                    }
+                }
+            }
+            inflections = append(inflections, l)
+            direction *= -1
+            if !last_set {
+                last = l
+            }
+        } else if direction < 0 && arr[l] > arr[l - 1] {
+            // inflection
+            //fmt.Printf("[debug] @ [%v]%v, now %vcreasing, last: %v, swap_required: %v, reversal_required: %v\n", l, arr[l], func() string { if direction == 1 { return "de" } else { return "in" }}(), last, swap_required, reversal_required)
+            if swapped || reversed {
+                //fmt.Printf("[debug] inversion @ [%v]%v, but already swapped / reversed\n", l, arr[l])
+                fmt.Printf("no\n")
+                return
+            }
+            if swap_required {
+                right = l - 1
+                if right - left == 1 {
+                    // adjacent swap possible ?
+                    // 4 5 9 7 |11| 16 18 | yes
+                    // [11]894947 [12]125082 |[13]137123| [14]137276 left: 11  | no
+                    if (arr[left - 1] < arr[l] &&
+                        (last == 0 || arr[left] < arr[right + 1])) {
+                        swapped = true
+                    }
+                }
+            } else if !swap_required && l - last > 1 {
+                // range reversal possible?
+                reversal_required = true
+                // 10 9 8 7 15 16
+                left = last - 1
+                right = l - 1
+                if (arr[left - 1] < arr[l] &&
+                    (last == 0 || arr[left - 1] < arr[right])) {
+                    reversed = true
+                } else {
+                    //fmt.Printf("[debug] inversion @ [%v]%v, but impossible reversal required\n", l, arr[l])
+                    fmt.Printf("no\n")
+                    return
+                }
+            }
+            inflections = append(inflections, l)
+            direction *= -1
+            last = l
+        }
+    }
+
+    //fmt.Printf("[debug] end\n")
+    if swapped {
+        // single valid swap and made it to the end without further anomalies
+        fmt.Printf("yes\nswap %v %v\n", left + 1, right + 1)
+    } else if reversed {
+        // single valid reverse and made it to the end without further anomalies
+        fmt.Printf("yes\nreverse %v %v\n", left + 1, right + 1)
+    } else if len(inflections) == 0 {
+        // dependent up last idx
+        if direction > 0 {
+            // 1 2 3 4
+            fmt.Printf("yes\n")
+        } else {
+            // 10 9 8 7  // full reverse
+            fmt.Printf("yes\nreverse 1 %v\n", l_a)
+        }
+    } else if len(inflections) == 1 && direction == -1 {
+        // decreasing subset to end
+        left = last - 1
+        right = l_a - 1
+        if arr[right] > arr[left - 1] {
+            fmt.Printf("yes\nreverse %v %v\n", last - 1 + 1, l_a - 1 + 1)
+        } else {
+            //fmt.Printf("[debug] impossible reversal, incompatible end-points\n")
+            fmt.Printf("no\n")
+        }
+    } else {
+        fmt.Printf("no\n")
+    }
 }
 
 func main() {
-- 
2.23.0


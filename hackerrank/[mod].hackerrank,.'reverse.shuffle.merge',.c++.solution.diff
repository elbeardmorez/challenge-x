From 59e05a61dca0f3d0e0aacca162b8c0e6c39dcf89 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 25 Sep 2019 06:34:33 +0100
Subject: [mod] hackerrank, 'reverse shuffle merge', c++ solution

-redux, too many permutations to test by exhaustion
-tabulate available chars remaining given a position in the reversed
string
---
 .../reverse.shuffle.merge.cpp                 | 210 +++++++++++++-----
 1 file changed, 160 insertions(+), 50 deletions(-)

diff --git a/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.cpp b/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.cpp
index 300562a..bbc848f 100644
--- a/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.cpp
+++ b/hackerrank/algorithms.-.greedy.-.advanced.-.reverse.shuffle.merge/reverse.shuffle.merge.cpp
@@ -18,80 +18,190 @@ void groupby(I input, map<K, vector<V>, Mx...> &groups, K (*f)(V&) = [](V& x) ->
     }
 }
 
-bool is_sparse_substring(string& s, string& s_test) {
-    //cout << "testing: " << s_test << endl;
-    int last = -1;
-    for (auto itr_test = s_test.begin(); itr_test != s_test.end(); ++itr_test) {
-        if ((last = s.find(*itr_test, ++last)) == -1) return false;
-    }
-    return true;
-}
+/*
+merge(reverse(A), shuffle(A))
+solution is always half the length of s
 
-// Complete the reverseShuffleMerge function below.
-string reverseShuffleMerge(string s) {
-    /*
-    merge(reverse(A), shuffle(A))
-    solution is alway half the length of s
+iterate from the best case (lexicographically smallest) string and
+deduce valid or not
 
-    iterate from the best case (lexicographically smallest) string and
-    deduce valid or not
+shuffled(A), coupled with the merge gives carte blanche, shuffled(A)
+is ANY order of chars, the reversed chunk is the fixed chunk, where
+order matters so so long as a 'sparse substring' can be found then
+the intermediate chars are guaranteed
 
-    shuffled(A), coupled with the merge gives carte blanche, shuffled(A)
-    is ANY order of chars, the reversed chunk is the fixed chunk, where
-    order matters so so long as a 'sparse substring' can be found then
-    the intermediate chars are guaranteed
+s = 'abcddacb'
+grouped 'abcd'
 
-    s = 'abcddacb'
-    grouped 'abcd'
+'abcd' | reverse 'dcba' ..not a 'sparse substring' | FAIL
+'abdc' | reverse 'cdba' ..not a 'sparse substring' | FAIL
+'acbd' | reverse 'dbca' ..not a 'sparse substring' | FAIL
+'acdb' | reverse 'bdca' ..not a 'sparse substring' | FAIL
+'adbc' | reverse 'cbda' ..not a 'sparse substring' | FAIL
+'adcb' | reverse 'bcda' ..is a 'sparse substring' | SUCCESS
+..
+'bacd' | reverse 'dcab' ..not a 'sparse substring' | FAIL
+'bcad' | reverse 'dacb' ..is a 'sparse substring'  | ..
 
-    'abcd' | reverse 'dcba' ..not a 'sparse substring' | FAIL
-    'abdc' | reverse 'cdba' ..not a 'sparse substring' | FAIL
-    'acbd' | reverse 'dbca' ..not a 'sparse substring' | FAIL
-    'acdb' | reverse 'bdca' ..not a 'sparse substring' | FAIL
-    'adbc' | reverse 'cbda' ..not a 'sparse substring' | FAIL
-    'adcb' | reverse 'bcda' ..is a 'sparse substring' | SUCCESS
-    ..
-    'bacd' | reverse 'dcab' ..not a 'sparse substring' | FAIL
-    'bcad' | reverse 'dacb' ..is a 'sparse substring'  | ..
+lowest lexicographical A is 'adcb'
 
-    lowest lexicographical A is 'adcb'
+..easier to work backwards, i.e. look for lowest in reversed s
 
-    ..easier to work backwards, i.e. look for lowest in reversed s
-  
-    s_ = 'bcaddcba' <- sparse substring 'adcb' exists
+s_ = 'bcaddcba' <- sparse substring 'adcb' exists
 
-    algorithm more about creation of correct / efficient lexicographical
-    permutation
+algorithm more about creation of correct / efficient lexicographical
+permutation
 
-    # speed-up?!
-    -'jump logic' ..if we know the pushing 'a' along will never result
-    in valid sparse substring, then skip?
+# speed-up?!
+-'jump logic' ..if we know the pushing 'a' along will never result
+in valid sparse substring, then skip?
 
-    */
+# redux, too many permutations for naive test all approach
+
+test #2
+reversed string: adigiibbgegjeiagjjiidhfdgdgijaaijfihbjjabchadcigaicgjaihidafigfhhecjgfacijgidgbhhehgfhjgiibggjddcjjd
+test string: aaaaabbbcccdddddeefffgggggggghhhhhiiiiiiiiijjjjjjj
+target:      aaaaabccigicgjihidfiejfijgidgbhhehgfhjgiibggjddjjd
+
+---
+
+look at number of characters available, e.g. ideal test string has 5 As,
+but supposee that that can be satisfied, what idx is the last A at? if
+it's idx 50 of 55 say, clearly having all As contiguous isn't feasible
+
+test string: aaaaabbbcccdddddeefffgggggggghhhhhiiiiiiiiijjjjjjj
+
+required:  a [5]
+           b [3]
+           c [3]
+           d [4]
+
+available:
+
+       idx1:  0  1  2 ...     ...14
+
+              a 10  9  9             9  8
+              b  6  6  6
+              c  6  6  6
+              d 10 10  9
+                                     a              aa        a
+reversed string: a  d  i  giibbgegjeia  gjjiidhfdgdgijaaijfihbjjabchadcigaicgjaihidafigfhhecjgfacijgidgbhhehgfhjgiibggjddcjjd
+
+so, count number 'x' chars left at each position (i.e. [l_s][26] 2d array)
+then sort this by first index ..when first index is the same, look at the
+second index etc. like a multi-column sort. after sort, iterate,
+and the first idx1 entry which satisfies the test string char counts, should
+be the optimal solution ..as if there are enough characters left in each
+char catergory, it's valid, and given the sort order, it's optimal
+         j  i  h  g  f  e  d  c  b  a
+  test   7  9  5  8  3  2  5  3  3  5
+
+[39|a]:  7  9  8 10  4  2  6  6  3  6  | aaaaa ..still valid, next pick = 'b'
+..
+[40|b]:  7  9  8 10  4  2  6  6  3  5  | aaaaab ..still valid, next pick = 'b'
+..
+[78|b]:  4  2  4  4  1  1  3  1  2  0  | aaaaabb ..not valid, next best pick = 'c'
+..
+[41|c]:  7  9  8 10  4  2  6  6  2  5  | aaaaabc ..valid! ..etc. etc.
+
+         j  i  h  g  f  e  d  c  b  a
+
+*/
+
+bool valid_jump(array<int, 26> table, int* test, int l_size) {
+    // ensure all table values >= test values
+    for (int l = 0; l < l_size; l++) {
+        //cout << "testing table[" << l << "] '" << table[l] << "' vs test[" << l << "] '" << test[l] << "'" << endl;
+        if (table[l] < test[l]) return false;
+    }
+    return true;
+}
+
+// Complete the reverseShuffleMerge function below.
+string reverseShuffleMerge(string s) {
 
     // construct s_test
+    int l_s = s.length();
     string s_test("");
-
+    int l_test = int(l_s / 2);
     map<char, vector<char>> map_;
     groupby(s, map_);
-
-    for (auto itr = map_.begin(); itr != map_.end(); ++itr)
-        s_test += string((int)(itr->second.size() / 2), itr->first);
-    sort(s_test.begin(), s_test.end());
+    int l_groups = map_.size();
 
     reverse(s.begin(), s.end());
-
     //cout << "reversed string: " << s << endl;
-    //cout << "test string: " << s_test << endl;
 
-    if (!is_sparse_substring(s, s_test)) {
-        while (next_permutation(s_test.begin(), s_test.end()))
-            if (is_sparse_substring(s, s_test)) break;
+    vector<pair<char, int>> group_sorted;
+    group_sorted.reserve(map_.size());
+
+    for (auto itr = map_.begin(); itr != map_.end(); ++itr)
+        group_sorted.push_back(pair<char, int>(itr->first, itr->second.size()));
+
+    sort(group_sorted.begin(), group_sorted.end(), [](pair<char, int> p1, pair<char, int> p2) -> bool { return p1.first < p2.first; });
+
+    vector<array<int, 26>> chars(l_s);
+    int test_char_counts[l_groups];
+    map<char, int> map_char_idx;
+
+    // populate table of 'chars remaining at each idx of s
+    int l, l2;
+    char last;
+    l = 0;
+    for (auto itr_s = s.begin(); itr_s != s.end(); ++itr_s) {
+        if (l == 0) {
+            // zero idx / full sets
+            l2 = 0;
+            for (auto itr = group_sorted.begin(); itr != group_sorted.end(); ++itr) {
+                chars[0][l2] = itr->second;
+                test_char_counts[l2] = (int)(itr->second / 2);
+                map_char_idx[itr->first] = l2;
+                l2++;
+            }
+        } else {
+            for (l2 = 0; l2 < l_groups; l2++)
+                chars[l][l2] = chars[l - 1][l2];
+            chars[l][map_char_idx[last]]--;
+        }
+        last = *itr_s;
+        l++;
+    }
+
+    /*
+    // dump
+    l = 0;
+    cout << "       ";
+    for (auto itr = group_sorted.begin(); itr != group_sorted.end(); ++itr) cout << setw(3) << itr->first; cout << endl;
+    for (auto itr_s = s.begin(); itr_s != s.end(); ++itr_s) {
+        cout << "[" << setw(2) << l << "|" << *itr_s << "]:"; for (l2 = 0; l2 < l_groups; l2++) cout << setw(3) << chars[l][l2]; cout << endl;
+        l++;
+    }
+    */
+
+    int idx_last_valid_jump = -1;
+    int idx_search;
+    char c_jump;
+    for (l = 0; l < l_test; l++) {
+        for (auto itr = group_sorted.begin(); itr != group_sorted.end(); ++itr) {
+            c_jump = itr->first;
+            if (test_char_counts[map_char_idx[c_jump]] == 0) continue;
+            idx_search = s.find(c_jump, idx_last_valid_jump + 1);
+            if (valid_jump(chars[idx_search], test_char_counts, l_groups)) {
+                //cout << "valid jump, next char: " << c_jump << endl;
+                test_char_counts[map_char_idx[c_jump]]--;
+                //cout << "test_char_counts:"; for (int l_ = 0; l_ < l_groups; l_++) cout << " " << test_char_counts[l_]; cout << endl;
+                idx_last_valid_jump = idx_search;
+                s_test += string(1, c_jump);
+                break;
+            }
+        }
     }
 
     return s_test;
 }
 
+// debug
+template class std::map<char, int>;
+
 int main()
 {
     ofstream fout(getenv("OUTPUT_PATH"));
-- 
2.23.0


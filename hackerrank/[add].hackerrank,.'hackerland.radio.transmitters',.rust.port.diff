From d053d86d6fa64c87f2e123a8aa95e9c0b7ce74ed Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 27 Feb 2020 19:22:02 +0000
Subject: [add] hackerrank, 'hackerland radio transmitters', rust port

---
 .../hackerland.radio.transmitters.rs          | 98 ++++++++++++++++++-
 1 file changed, 97 insertions(+), 1 deletion(-)

diff --git a/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.rs b/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.rs
index 75b9783..d8e5b8d 100644
--- a/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.rs
+++ b/hackerrank/algorithms.-.search.-.medium.-.hackerland.radio.transmitters/hackerland.radio.transmitters.rs
@@ -1,3 +1,99 @@
-// Enter your code here 
+// Enter your code here
 
+use std::io;
+use std::env;
+use std::fs::File;
+use std::io::Write;
+use std::collections::HashSet;
 
+fn hackerland_radio_transmitters(data: &mut Vec<i32>, k: i32) -> i32 {
+
+    /*
+    x       x x                 x
+    ?       O c
+
+    account for non-contiguous ranges
+    */
+
+    data.sort();
+
+    let mut count: i32 = 0;
+    let mut left_house: i32 = -1;
+    let mut last_house: i32 = -1;
+    let mut last_antenna: i32 = -1;
+
+    let mut set_ = HashSet::new();
+    for v_ in data {
+        let v = *v_;
+        if set_.contains(&v) {
+            continue;
+        }
+        set_.insert(v);
+        //println!("house @: {:?}, left_house @: {:?}, last antenna @: {:?}, range: {:?}, count: {:?}", v, left_house, last_antenna, k, count);
+        if left_house == -1 {
+            // first house in next antenna range
+            left_house = v;
+        } else {
+            if last_antenna == -1 {
+                // we've gone out of range of the last antenna
+                if v - left_house > k {
+                    //println!("setting transmitter on last house: {:?}", last_house);
+                    last_antenna = last_house;
+                    count += 1;
+                } else if v - left_house == k {
+                    //println!("setting transmitter on current house: {:?}", v);
+                    last_antenna = v;
+                    count += 1;
+               }
+            }
+            if last_antenna != -1 {
+                // antenna set, are we still in range?
+                if v - last_antenna > k {
+                    left_house = v;
+                    last_antenna = -1;
+                } else if v - last_antenna == k {
+                    // edge of antenna range
+                    left_house = -1;
+                    last_antenna = -1;
+                }
+            }
+        }
+        last_house = v;
+    }
+    if last_antenna == -1 {
+        count += 1;
+    }
+    return count;
+}
+
+fn next_line(s: &mut String) {
+    s.clear();
+    let mut buf = String::new();
+    let res = io::stdin().read_line(&mut buf);
+    if res.is_ok() && res.unwrap() != 0 {
+        s.push_str(buf.trim_end_matches('\n'));
+    }
+}
+
+fn main() {
+    let key = "OUTPUT_PATH";
+    let mut target = String::new();
+    match env::var_os(key) {
+        Some(val) => target.push_str(val.to_str().unwrap()),
+        None => panic!("{} is not defined in the environment.", key),
+    }
+    let mut f = match File::create(target) {
+        Ok(f) => f,
+        Err(e) => panic!("file io error: {}", e),
+    };
+
+    let mut line = String::new();
+    next_line(&mut line);  // n k
+    let data = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    let k = data[1];
+    next_line(&mut line);
+    let mut data = line.split_whitespace().map(|x| x.parse::<i32>().unwrap()).collect::<Vec<i32>>();
+    let res: i32 = hackerland_radio_transmitters(&mut data, k);
+    f.write_all(res.to_string().as_bytes()).expect("file io error");
+    f.write_all(b"\n").expect("file io error");
+}
-- 
2.25.0


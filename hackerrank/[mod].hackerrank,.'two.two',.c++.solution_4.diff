From da0a364764653f60c1225e7e89178219525ed828 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Mon, 13 May 2019 22:13:23 +0100
Subject: [mod] hackerrank, 'two two', c++ solution

-speed-up, switch to pre-allocated vectors over maps, using a common
index for accessing each vector
-large refactor to help algorithm clarity
-remove legacy code
---
 .../two.two.cpp                               | 237 +++++++++---------
 1 file changed, 122 insertions(+), 115 deletions(-)

diff --git a/hackerrank/algorithms.-.strings.-.advanced.-.two.two/two.two.cpp b/hackerrank/algorithms.-.strings.-.advanced.-.two.two/two.two.cpp
index ebeed43..77c5c06 100644
--- a/hackerrank/algorithms.-.strings.-.advanced.-.two.two/two.two.cpp
+++ b/hackerrank/algorithms.-.strings.-.advanced.-.two.two/two.two.cpp
@@ -1,6 +1,5 @@
 #include <bits/stdc++.h>
 #include <math.h>
-//#include <regex>
 #include <string>
 
 using namespace std;
@@ -32,120 +31,126 @@ void get_next(string s, string* res) {
     return;
 }
 
-static vector<string> a_powers;
-static vector<int> a_powers_length;
-//static vector<string> a_s_rx;
-//static vector<regex> a_rx;
-static map<string, vector<string>> dependents;
-static map<string, bool> possible;
+vector<string> a_powers;
+vector<int> a_powers_length;
+vector<vector<int>> dependents;
+vector<bool> possible;
 
-static int l_max = 0;
+bool init = false;
+int l_s_max_powers;
+int MAX_POWERS = 801;
 
 int twoTwo(string s) {
     /*
      * Write your code here.
      */
-    int debug = 0;
+    //int debug = 0;
     static int test = 0;
     test++;
     //if (test > 1)
     //    exit(0);
-    if (a_powers.size() == 0) {
+
+    int l_s = s.length();
+
+    // max idx in powers set we need to consider
+    int l_idx_max;
+    //int l_s_max;
+
+    if (!init) {
+        init = true;
+
+        // considers strengths (substrings) < ~2^800
+        a_powers.reserve(MAX_POWERS);
+        a_powers_length.reserve(MAX_POWERS);
         // zero case
         a_powers.push_back("1");
         a_powers_length.push_back(1);
-        // considers strengths (substrings) < ~2^800
-        double d = pow(2.0, 800.0);
-        smatch matches;
-        string s_max = to_string(d);
-        l_max = s_max.length();
-    }
-    //cout << l_max << endl;
 
-    int l_s = s.length();
-
-    int l_n = 1;
-    char buf[2];
-    buf[1] = '\0';
-    string s_n;
-    int l_s_max = min(l_max, l_s);  // max substring we need to test
-
-    while (l_n < l_s_max && a_powers.size() <= 800) {
-        // extend pool beyond length of test
-        get_next(a_powers.back(), &s_n);
-        l_n = (int)s_n.length();
-        if (l_n >= l_s_max) {
-            //if (l_n > l_n_last)
-            if (l_n > l_s_max)
-                break;
-            else {
-                // compare first digit
-                memcpy(buf, &s[0], sizeof(char));
-                int s1 = atoi(buf);
-                memcpy(buf, &s_n[0], sizeof(char));
-                int s_n1 = atoi(buf);
-                if (s_n1 > s1)
-                    break; // test set already complete
-            }
-        }
-        // in range, usuable ..
-        //cout << "extending map, add: " << s_n << endl;
-        // empty dependants set
-        dependents[s_n] = vector<string>();
-        // set as dependant
-        if (debug > 0)
-            cout << "s_n [" << s_n << "] is dependent on: ";
-        for (auto itr = a_powers.begin(); itr != a_powers.end(); ++itr) {
-            if (s_n.find(*itr) != string::npos) {
-                dependents[*itr].push_back(s_n);
-                if (debug > 0)
-                    cout << " " << *itr;
+        dependents.reserve(MAX_POWERS);
+        possible.reserve(MAX_POWERS);
+
+        int l_n = 1;
+        string s_n;
+
+        for (int l = 1; l < MAX_POWERS; l++) {
+            // extend pool
+            get_next(a_powers.back(), &s_n);
+            l_n = s_n.length();
+            // in range, usuable ..
+            //cout << "extending map, add: " << s_n << endl;
+            // empty dependants set
+            dependents[l].reserve(1000);
+            // set as dependant
+            //if (debug > 0)
+            //    cout << "s_n [" << s_n << "] is dependent on: ";
+            //for (auto itr = a_powers.begin(); itr != a_powers.end(); ++itr) {
+            for (int l2 = 0; l2 < (int)a_powers.size(); l2++) {
+                if (s_n.find(a_powers[l2]) != string::npos) {
+                    dependents[l2].push_back(l);
+            //        if (debug > 0)
+            //            cout << " " << *itr;
+                }
             }
+            //if (debug > 0)
+            //    cout << endl;
+            a_powers.push_back(s_n);  // ordered
+            a_powers_length.push_back(l_n);  // optimisation
         }
-        if (debug > 0)
-            cout << endl;
-        a_powers.push_back(s_n);  // ordered
-        a_powers_length.push_back(l_n);  // optimisation
+        l_s_max_powers = a_powers_length.back();
+    }
+
+    // set max string length and main power idx for specific test
+    if (l_s > l_s_max_powers) {
+        //l_s_max = l_s_max_powers;
+        l_idx_max = MAX_POWERS - 1;
+    } else {
+        // search
+        l_idx_max = 0;
+        while (a_powers_length[l_idx_max] < l_s)
+            l_idx_max++;
+        // same length but..
+        int l_s1 = atoi(s.substr(0, 1).c_str());
+        while (atoi(a_powers[l_idx_max + 1].substr(0, 1).c_str()) <= l_s1)
+            // first digit smaller
+            l_idx_max++;
+        //l_s_max = a_powers_length[l_idx_max];
     }
-    //cout << "map len: " << a_powers.size() << endl;
+    //cout << "idx max: " << l_idx_max << ", len: " << l_s_max << ", power: " << a_powers[l_idx_max] << endl;
+
+    // reset 'possible' set.. these get switched false when a substring it
+    // depends on searched for and not found
+    for (int l = 0; l < l_idx_max; l++)
+        possible[l] = true;
 
+    // main 's' string positions lookup for known/pre-searched substrings
     unordered_map<string, vector<int>> pools;
 
     //if (debug > 0)
     //    cout << "students: '" << s << "'" << endl;
     int total = 0;
-    int l = 0;
+    int idx;
+    int idx2;
     int total_cur;
-    for (auto itr = a_powers.begin(); itr != a_powers.end(); ++itr)
-        possible[*itr] = true;
-    for (auto itr = a_powers.begin(); itr != a_powers.end(); ++itr) {
-        if (!possible[*itr]) {
+    string search;
+    int l_search;
+    for (int l = 0; l < l_idx_max; l++) {
+        if (!possible[l]) {
             //if (debug > 0)
-            //    cout << "short-circuit: " << *itr << endl;
-            l++;
+            //    cout << "short-circuit: " << a_powers[l] << endl;
             continue;
         }
-        if (a_powers_length[l] >= l_s_max) {
-            if (a_powers_length[l] > l_s_max)
-                break;
-            // compare first digit
-            memcpy(buf, &s[0], sizeof(char));
-            int s1 = atoi(buf);
-            memcpy(buf, &s_n[0], sizeof(char));
-            int s_n1 = atoi(buf);
-            if (s_n1 > s1)
-                break; // tests complete
-        }
+
+        search = a_powers[l];
+        l_search = a_powers_length[l];
         total_cur = 0;
-        int idx = -1;
-        //cout << "testing: " << *itr << endl;
+        //cout << "testing: " << search << endl;
 
         // use the longest lead substring pool available
         vector<int> pool;
         int l_ss = 1;
         string ss = "";
         while (l_ss <= a_powers_length[l]) {
-            ss = itr->substr(0, l_ss);
+            ss = search.substr(0, l_ss);
             if (pools.find(ss) != pools.end())
                 pool = pools[ss];
             else {
@@ -156,68 +161,70 @@ int twoTwo(string s) {
         }
         // ss is the next substring to pos
         if (pool.size() > 0) {
-            //cout << "using map search for '" << itr->substr(0, min((int)itr->length(), 50)) << (itr->length() > 50 ? "..." : "") << "'" << endl;
+            //cout << "using map search for '" << search.substr(0, min(l_search, 50)) << (l_search > 50 ? "..." : "") << "'" << endl;
             // cheaper search
-            for (vector<int>::iterator itr2 = pool.begin(); itr2 != pool.end(); ++itr2) {
+            for (int l2 = 0; l2 < (int)pool.size(); l2++) {
+                idx2 = pool[l2];
                 if (l_ss < 4) {
-                   if (s.substr(*itr2, l_ss) == ss) {
-                        pools[ss].push_back(*itr2);
-                        if (s.substr(*itr2, a_powers_length[l]) == *itr)
+                    if (s.substr(idx2, l_ss) == ss) {
+                        pools[ss].push_back(pool[l2]);
+                        if (s.substr(idx2, l_search) == search)
                             total_cur++;
                     }
-                } else if (s.substr(*itr2, a_powers_length[l]) == *itr)
+                } else if (s.substr(idx2, l_search) == search)
                     total_cur++;
             }
         } else {
             // expensive search find
-            if (a_powers_length[l] < 4) {
+            idx = -1;  // account for initial increment
+            if (l_search < 4) {
                 // cache short lead stubs for fast map lookup
                 while ((idx = s.find(ss.c_str(), ++idx, l_ss)) != (int)string::npos) {
-                        pools[ss].push_back(idx);
-                        if (l_ss == a_powers_length[l])
-                            total_cur++;
-                        else if (l_s - idx >= a_powers_length[l] &&
-                                s.substr(idx, a_powers_length[l]) == *itr) {
-                            pools[*itr].push_back(idx);
-                            total_cur++;
-                        }
+                    pools[ss].push_back(idx);
+                    if (l_ss == l_search)
+                        total_cur++;
+                    else if (l_s - idx >= l_search &&
+                             s.substr(idx, l_search) == search) {
+                        pools[search].push_back(idx);
+                        total_cur++;
+                    }
                 }
-                //total_cur += pools[*itr].size();
             } else {
-                while ((idx = s.find(itr->c_str(), ++idx, itr->length())) != (int)string::npos) {
-                    //pools[*itr].push_back(idx);
+                while ((idx = s.find(search.c_str(), ++idx, l_search)) != (int)string::npos) {
+                    //pools[search].push_back(idx);
+                    //if (ss == "16")
+                    //    cout << "pushing search idx: " << idx << " for '" << ss << "' match" << endl;
                     total_cur++;
                 }
             }
-            //if (ss == "16")
-            //    cout << "pushing search idx: " << idx << " for '" << ss << "' match" << endl;
         }
-        string search = pool.size() > 0 ? "map" : "find";
         //if (debug > 0)
         //if (total_cur == 0 && search == "map")
+        string search_type = pool.size() > 0 ? "map" : "find";
         //if (search == "map")
-        //    cout << "cur: " << *itr << ", total: " << total_cur << ", search: " << search << endl;
+        //    cout << "cur: " << search << ", total: " << total_cur << ", search_type: " << search_type << endl;
         if (total_cur > 0) {
             total += total_cur;
         } else {
-            if (dependents[*itr].size() > 0) {
+            if (dependents[l].size() > 0) {
                 //if (debug > 0)
-                //    cout << "no matches for '" << *itr << "', switching its " << dependents[*itr].size() << " dependents off! [";
-                for (auto itr2 = dependents[*itr].begin(); itr2 != dependents[*itr].end(); ++itr2) {
-                    //if (debug > 0)
-                //        cout << " " << *itr2;
-                    possible[*itr2] = false;
+                //    cout << "no matches for '" << search << "', switching its ";
+                for (int l3 = 0; l3 < (int)dependents[l].size(); l3++) {
+                    if (dependents[l][l3] > l_idx_max) {
+                        //if (debug > 0)
+                        //    cout << l3;
+                        break;
+                    }
+                    possible[dependents[l][l3]] = false;
                 }
                 //if (debug > 0)
-                //    cout << " ]" << endl;
+                //    cout << " dependents off!" << endl;
             }
         }
-
-        l++;
     }
-    //for (auto itr = pools.begin(); itr != pools.end(); ++itr) {
-    //    cout << "pool: " << itr->first << ", size: " << (itr->second).size() << endl; 
-    //}
+
+    //for (auto itr = pools.begin(); itr != pools.end(); ++itr)
+    //    cout << "pool: " << itr->first << ", size: " << (itr->second).size() << endl;
 
     //cout << "[" << test << "] total: " << total << ", powers: " << a_powers.size() << endl;
     /*
-- 
2.23.0

